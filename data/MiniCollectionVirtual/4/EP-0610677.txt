<DOC>
<DOCNO>EP-0610677</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Bimodal communications device driver.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F946	G06F946	G06F1310	G06F1310	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F13	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A data processing system gives an application running on the 
operating system exclusive ownership of a hardware device. The 

system is operable in two modes. In the first mode the 
application interacts with the hardware device by making use of 

the processing system. In this mode many layers of the 
processing system are involved and the interaction time with the 

hardware is slow and inconsistent. In the second mode, 
exclusive ownership of the hardware device is granted to the 

application by the driver. In this mode the application has 
direct access to the hardware device thus avoiding the 

involvement of the processing system layers. The application 
accesses and uses the driver through a low latency processor 

interface linked into the application program itself. 

 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FEENEY JAMES WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
WILHELM GEORGE WILLIAM JR
</INVENTOR-NAME>
<INVENTOR-NAME>
FEENEY JAMES WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
WILHELM GEORGE WILLIAM JR
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to data processing systems, and in 
particular to the ability of an application program to access 
hardware devices in a fast and consistent manner. Typical data processing systems (systems) support multiple 
application programs (applications) running at the same time. 
To accomplish this the processing systems have multiple layers 
that isolate the actual hardware from the applications. In a 
typical processing system one of the layers is the device driver 
which directly accesses the hardware device. The next layer is 
an operating system, such as AIX. This layer controls which 
application can access the device driver next. When an 
application interacts with a hardware device, the interactions 
must pass through these layers of the processing system. Each 
layer adds processing time and may even block usage of the 
hardware device to allow another application to use it. Some systems allow all applications to access the hardware 
device directly whenever required. This is the way processing 
systems used to operate. However, the applications could only 
run one at a time. Typically, one application would run then 
when it completed, the next application would run. As systems 
became faster the execution of programs often had to wait for a 
hardware device to complete its operation before continuing. In 
order to improve the utilization of the entire system, multiple 
applications were run at the same time. This resulted in 
multiple applications trying to use the same hardware device, 
perhaps in different ways, at the same time. This led to the  
 
need to coordinate the hardware device usage between the 
applications and to protect themselves from each other. The 
coordination and programming effort became so large that this 
approach has been abandoned for general purpose processing 
systems that support multiple applications. It is still in use 
in special purpose processing systems that perform dedicated 
tasks such as control processors in automobiles or aircraft. The problem of coordinating and protecting multiple applications 
led to contemporary general purpose systems. In these systems 
the hardware resources are owned by the system, and all 
interactions with the hardware devices go through the system. 
The system typically has multiple layers such as device drivers 
to directly access and control the hardware and an operating 
system to control the application access to the device drivers. 
The requirement to interact with a hardware device through these 
layers
</DESCRIPTION>
<CLAIMS>
A method for operating a device of a computer system, 
comprising computer implemented steps of: 


(a) processing by an operating system (kernel) of the 
computer system requests from concurrent applications 

executing programs to access the device in a first (shared, 
or general user) mode, said operating system preventing 

conflicts between applications concurrently requesting 
access in the first mode to the device; and 
(b) processing by the operating system a first one of the 
application program's request for access to the device in a 

second (exclusive) mode, said processing including passing 
said request to the device driver; 
(c) blocking by the device driver requests from others of 
the application programs for access to the device; and 
(d) accessing the device by the application program 
directly, without intervention by the operating system. 
The method of claim 1, wherein step (d) includes the step 
of the application program invoking a direct (low latency) 

interface to the device. 
The method of claim 2 wherein the interface to the device 
is linked into the application program. 
The method of claim 1, wherein steps (a) and (b) include 
respective calls to the device driver. 
The method of claim 1, wherein step (d) includes mapping 
memory addresses of the device into an address space of the 

application program. 
The method of claim 5, wherein the application program 
sends data to the device by moving said data into a portion 

of the application program's address space into which the 
addresses of the device are mapped. 
The method of claim 5, wherein step (d) includes the steps 
of moving data by the device driver from the device into a 

portion of the application program's address space into 
which the device's addresses are mapped, and reading said 

data by the application program from said portion of the 
application program's address space. 
The method of claim 5, wherein step (d) includes the steps 
of: 

the device driver transferring the data from the device to 
a buffer, 

the application program requesting the data, 
the device driver moving the data from the buffer into a 

portion of the application program's address space into 
which are mapped the device's addresses, and 

the application program reading the data from said portion 
of the application program's address space. 
A system for communicating between first and second 
computer systems, comprising: 

a communication device in the first computer system; 
communication means for transferring data between the 

communication device and the second system; 
a second device in the second computer system connected by 

communication means to the communication device;
 

a device driver for execution in the first system for 
controlling access to the communication device, said driver 

including 
an interface to operating system software, 

means responsive to the operating system software for 
concurrently transferring data between the communication 

device and plural, concurrently executing application 
programs of the first system, and 

means responsive to the operating system software for 
exclusively transferring data between the communication 

device and a first application program executing in the 
first system and preventing access to the communication 

device by other concurrently executing applications 
programs of the first system. 
</CLAIMS>
</TEXT>
</DOC>
