<DOC>
<DOCNO>EP-0621536</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Operating system debugger
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1136	G06F1128	G06F1128	G06F1136	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
This debugger (KD) for an operating system of a machine which comprises, among other things, at least one processor (P), in conjunction with the processor a memory (M) and a memory management unit (MMU), is installed in an area of the memory (M) where the virtual addressing mode is equal to the physical addressing mode. Throughout debugging and in accordance with a predetermined procedure, it executes every operation in physical mode and independently of the management unit (MMU). In order to monitor the initialisation phases of the machine, it supports at least two exception vectors (BP, DSI) and comprises, among other things, its own stack (S), a decoder (DEC) using an algorithm which can be operated whatever the context of the analysed process and means (CMM) for storage of the decoded context. 
<
IMAGE
>
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
BULL SA
</APPLICANT-NAME>
<APPLICANT-NAME>
BULL S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
JOANNIN JEAN-PIERRE
</INVENTOR-NAME>
<INVENTOR-NAME>
JOANNIN, JEAN-PIERRE
</INVENTOR-NAME>
</INVENTORS>
<CLAIMS>
Tool (KD) for debugging an operating system of a
machine comprising, 
inter alia,
 at least one processor
(P), connected to the processor (P) a memory (M) and a

memory management unit (MMU), characterised in that,
throughout the debugging performed according to a

predetermined procedure, said tool (KD) executes any
operation in physical mode working in a zone of the

memory (M) where the virtual addressing mode is equal
to the physical addressing mode and independently of

the memory management unit (MMU), said tool (KD)
supporting, for the control of the initialisation

phases of the machine, at least two exception vectors
(BP), (DSI) and comprising, 
inter alia,
 its own stack
(S) which it initialises, a decoder (DEC) using an

algorithm that can be exploited whatever the context of
the process being analysed, and means (CMM) for storing

the decoded context.
Predetermined procedure applied to the debugging tool
according to Claim 1 characterised in that, in a first

step the tool (KD), recognising a call caused by an
exception, selects and initialises its own stack (S) to

work in physical mode, in a second step of taking
control it receives the parameters of the context to be

processed and uses the translation algorithm to
simulate, for any access, the virtual memory by means

of the decoder (DEC) translating the virtual address to
the physical address, the parameters of the context

decoded in this way being transferred to the context
memory means (CMM) then, in a third step, it

initialises the console, so that an operator is in this
way authorised to act while, in a last step, once

debugging has been performed, he hands over control to
the machine.
Debugging tool (KD) according to Claim 1 or 2, 
characterised in that it permits the selection of any

context of one of the processes contained in a process
table (PT) recorded in the memory (M), the process

table (PT) containing the address of the context to be
selected, said virtual address being decoded in order

to find said context and the latter then being
substituted for the current context by copying over to

the memory means (CMM) after resetting the stack (S).
Debugging tool (KD) according one of the preceding
claims, characterised in that the decoding algorithm

used by the decoder (DEC) is the decoding algorithm of
the processor used, thus allowing it to be adapted to

any processor.
Debugging tool (KD) according to one of the preceding
claims, characterised in that it has a table of

exception vectors (DVT) containing, at fixed addresses,
at least two exception vectors (BP), (DSI), a first

exception vector (BP) making it possible to place stop
points at predetermined locations, permitting an

analysis on the basis of a predetermined instruction
and a second exception vector (DSI) called up when an

invalid address is found in the system being analysed.
Debugging tool (KD) according to Claim 5, characterised
in that its table of exception vectors (DVT) also

contains a third exception vector making it possible to
carry out step-wise analyses without disturbing the

other processors, when the system is a multiprocessor
one.
Debugging tool (KD) according to Claim 5 or 6,
characterised in that, for a first debugging of the

operating system, in the phase of initialising the
debugging tool (KD) just after the initialisation of

the console, a static stop point is provided on the 
system generating an exception, allowing the operator

to intervene after the sending of a message to monitor
the standard initialisation of the system.
Debugging tool (KD) according to any one of the
preceding claims, characterised in that, when the

machine in which it is installed forms part of an
external environment such as UNIX, it initially takes

control of its exception vectors (DVT), then it
supplies them to the external environment, said vectors

being directly associated with said external
environment and the debugging tool (KD) then being

called up in order to perform the desired debugging, in
a totally autonomous manner.
Use of the debugging tool (KD) according to one of the
preceding claims in a user mode, to analyse the memory

image.
</CLAIMS>
</TEXT>
</DOC>
