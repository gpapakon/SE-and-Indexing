<DOC>
<DOCNO>EP-0615186</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Parallel arithmetic-logic processing device for vector and matrix data processing
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1576	G06F1580	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F15	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A parallel arithmetic-logical processing device in which arithmetic-logical processing 
is shared among and executed in a parallel fashion by a plurality of processing 

elements. The device includes a large-capacity serial access memory 2 for continuous 
reading/writing of large-scale data, a small-capacity serial access memory 3 for 

continuous reading/writing of small-scale data and a high-speed general-purpose 
random access memory 4 for random writing/readout of small-scale data. A central 

processing unit (CPU) 5 causes the memories to be used or not used depending on the 
scale of the arithmetic-logical processing. Since the serial access memory 3 or 4 

executes continuous data writing and reading, high-speed access may be achieved, so 
that it can be manufactured inexpensively with a large storage capacity. Consequently, 

the processing speed in the CPU 5 may be increased, while the parallel arithmetic-logical 
processing device may be manufactured inexpensively. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
SONY CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
SONY CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KATO YASUNOBU
</INVENTOR-NAME>
<INVENTOR-NAME>
OYA NOBORU
</INVENTOR-NAME>
<INVENTOR-NAME>
SHIROTA NORIHISA
</INVENTOR-NAME>
<INVENTOR-NAME>
KATO, YASUNOBU
</INVENTOR-NAME>
<INVENTOR-NAME>
OYA, NOBORU
</INVENTOR-NAME>
<INVENTOR-NAME>
SHIROTA, NORIHISA
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to a parallel arithmetic-logic
processing device which may be conveniently employed as a
computer for executing arithmetic operations in the fields of
science and technology. More particularly, it relates to a
parallel arithmetic-logic processing device in which, since
matrix data having a voluminous data volume is frequently
employed in the scientific and technical arithmetic/logic
operations, a memory device for continuous data writing and
reading. is provided as storage means for writing and reading the
matrix data for reducing the processing time and production
costs.It is not too much to state that recent development in
technology is ascribable to enablement of the complex and large-scale
scientific and technological calculations. In the course
of the scientific and technological calculations, matrix
operations, such as solution of extremely large size first-order
simultaneous equations or calculation of eigenvalues of the
matrices occur frequently. For the size (row by column) of the
matrices of n x n, for example, the volume of the processing
operations becomes equal to O(n3) for any of the calculations of
the first-order simultaneous equations having the matrices as the
coefficients, calculations of the inverse matrix, calculations 
of the eigenvalue of the matrix or the calculations of the
eigenvector. Thus, if the number of the rows and/or the columns,
that is the value of n, is increased, the volume of the
processing operations is necessarily increased.It is up to the today's computer to execute the voluminous
operations quickly.Although the processing speed of the central processing unit
(CPU) of the up-to-date computer has been increased tremendously,
it takes some prolonged time to have access to the memory, thus
retarding the overall processing speed of the computer.For possibly reducing the time necessary for having access
to the- memory, a computer has been developed in which a
subsidiary memory known as a cache memory 102 capable of high-speed
access despite its smaller storage capacity than that of
a main memory 103 is provided between the CPU 101 and the main
memory 103, as shown in Fig.14.With such computer, the necessary data is previously read
out from the main memory 103 to the cache memory 102 over a bus
line 105 so that the necessary data is read from the cache memory
102. Since the cache memory 102 permits of high-speed accessing,
the processing operations may be executed more quickly.On the other hand, there is known a so-called supercomputer
having
</DESCRIPTION>
<CLAIMS>
A parallel arithmetic-logical processing device in which data to be processed is
divided into matrix data and vector data by control means (12) and supplied to a

plurality of processing units (1) so as to be parallel-processed by said processing
units (1),

said processing units (1) including

a first storage means (2) adapted to store said matrix data and for continuous
writing and readout of said matrix data,
a serial access memory means (3) adapted to store said vector data and for
continuous writing and readout of said vector data,
processing means (5) for executing arithmetic-logical processing operations on
said matrix data read out from said first storage means (2) and on said vector data

read out from said serial access memory means (3),
a first and second buffer means (7a, 7b) for supplying said matrix data and vector
data from said control means to said first storage m
eans (2) and serial access
memory means (3), respectively, and for supplying processed data from said

processing means (5) to said control means, and
communication control means (6) for controlling data input/output at said lirst and
second buffer means (7a, 7b).
The parallel arithmetic-logical processing device as claimed
in claim 1, wherein said second storage means is a random

access memory (4) for random writing/readout of said second
data.
The parallel arithmetic-logical processing device as claimed
in claim 1, wherein said second storage means is a serial

access memory (3) for continuous writing/readout of said second
data.
The parallel arithmetic-logical processing device as claimed
in claim 1, wherein said second storage means comprise a random

access memory (4) for random writing/readout of said second
data and a serial access memory (3) for continuous

writing/readout of said second data.
</CLAIMS>
</TEXT>
</DOC>
