<DOC>
<DOCNO>EP-0632377</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for testing a message-driven operating system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F9455	G06F1136	G06F948	G06F9455	G06F946	G06F1136	G06F1128	G06F1128	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F11	G06F9	G06F9	G06F9	G06F11	G06F11	G06F11	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A simulation system to simulate the execution of a 
computer program. The computer program is developed for 

invoking operating system functions of a first operating 
system. Each operating system function performs a behavior in 

accordance with passed parameters. The simulation system 
generates a log during the execution of the computer program 

under control of the first operating system. The log includes 
an indication of each invocation of an operating system 

function by the computer program and an indication of each 
parameter passed to the operating system function by the 

computer program and the current time. The logged execution 
is then simulated by the simulation system on a second 

operating system. The simulation system invokes an operating 
system function of the second operating system to perform a 

behavior similar to the behavior performed by each logged 
invocation of the operating system function of the first 

operating system in accordance with the passed parameters. 
Comparison of the functionality, reliability, and performance 

of the two systems are thereby enabled. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BLAKE RUSSEL P
</INVENTOR-NAME>
<INVENTOR-NAME>
DAY ROBERT F
</INVENTOR-NAME>
<INVENTOR-NAME>
BLAKE, RUSSEL P.
</INVENTOR-NAME>
<INVENTOR-NAME>
DAY, ROBERT F.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to a computer
method and system for simulating the execution of a
computer program.Computer operating systems are very complex
computer programs. When developing or modifying an
operating system, it is critical that the operating system
be thoroughly tested. The testing of an operating system
typically involves several testing phases. First, the
programmer who writes a program for the operating system
performs "unit testing." This unit testing ensures that
the program functions as intended by the programmer.
Second, the programmers who developed various programs
perform integration testing. This integration testing
ensures that the various programs function together
correctly. Third, the developer of the operating system
performs alpha testing of the operating system. During
alpha testing, application programs are executed with the
operating system and any anomalies are logged for later
correction. Finally, end users of the operating system
perform beta testing. The beta testing ensures that the
operating system will function correctly in the end user's
environment.The testing of an operating system can be very
time consuming and expensive. Furthermore, it is
virtually impossible to ensure that the operating system
is error free. Generally, operating system developers
concentrate on ensuring that the operating system will
function correctly with "standard applications." A
standard application is an application program that a 
typical user of the operating system may use. By testing
with these standard applications, a developer can help
ensure the operating system will function correctly in
most typical situations.Certain operating systems are referred to as
message-driven operating systems. One such operating
system is Windows 3.1, developed by Microsoft Corporation.
A description of Windows 3.1 is provided in the Software
Development Kit for Windows 3.1, which is available from
Microsoft Corporation.
The Windows operating system provides a
windowing environment for applications that support a
graphical user interface (GUI). Figure 1 is a block
diagram illustrating the messaging architecture of a
typical message-driven operating system. An application
program 110 contains a main procedure 111 and a window
procedure 112. When the application program 110 is
executed under the control of the operating system,
control is passed to the main procedure 111. The main
procedure 111 typically creates and displays a window and
then enters a message loop 113. When executing the
messa
</DESCRIPTION>
<CLAIMS>
A method in a computer system for simulating an execution of
a client program, the client program for invoking functions of a first server program,

the client program specifying parameters for identifying variations in behavior of
invoked functions, the method comprising the steps of:


during execution of the client program (10), logging a plurality of
invocations made by the client program of functions of the first server program (20), each

invocation including an identification of the function and any parameters specified
with the invocation; and
invoking functions of a second server program (60) to perform a behavior
similar to the behavior performed by the first server program (20) based on the logged

invocations whereby the behavior of the client computer program (10) is simulated.
The method of claim 1 wherein the step of invoking functions
of the second server program (60) to perform a behavior includes the steps of:

   for each of a plurality of logged invocations (40),

selecting one or more functions of the second server program (60) to
simulate the behavior of the logged inv
ocation; and
invoking the selected functions of the second server program (60) to
effect simulation of the behavior of the logged invocation (40).
The method of claim 2 wherein the step of invoking the
selected functions of the second server program (60) includes the step of passing to the

second server program any parameters specified with the logged invocation.
The method of claim 3 including the step of before passing a
parameter to a function of the second server program (60), mapping the parameter from a

parameter generated by the first server program (20) to a parameter generated by the
second server program. 
The method of claim 4 wherein the step of mapping includes
the step of mapping a computer system generated handle.
The method of claim 1 wherein the step of invoking functions
of the second server program to perform a behavior includes the steps of:


associating a thunk function with each function provided by the first
server program each thunk function (1060) having a prototype similar to the prototype of

the associated function of the first server program; and
invoking the thunk function (1060) associated with the function of a logged
request to simulate behavior of the logged request.
The method of claim 6 wherein the step of invoking the thunk
function (1060) includes the step of passing a parameter analogous to a parameter of the

logged request.
The method of claim 7 including the step of before passing a
parameter to the second server program (60), mapping the parameter from a parameter

generated by the first server program to a parameter generated by the second server
program.
The method of claim 6 including the step of:

during the invocation of the thunk function (1060), invoking one or more functions
of the second server program (60) to simulate the behavior of the function associated

with the thunk function.
The method of claim 9 including the step of:

upon return from a function of the second server program (60), specifying return
parameters to be returned by the thunk function (1060).
The method of claim 1 wherein the step of logging a plurality
of invocations made by the client program (10) of functions of the first server program (20)

includes the step of logging each return from an invoked function (40), each logged
return including an identification of the invoked function and any parameter

returned by the invoked function.
The method of claim 1 wherein the step of logging a plurality
of invocations made by the client program of functions includes the step of sending

indications of the invocations to a simulation program that controls the invoking of
functions of the second server program (60).
The method of claim 1 wherein the step of logging includes
logging invocations of callback routines of the client program (10), and including

associating a thunk callback routine with each callback routine wherein the thunk
callback routine simulates behavior of the associated callback routine when invoked

by the first server program.
The method of claim 1 wherein the first server program is an
operating system and the second server program (60) is a different version of the same

operating system.
The method of claim 1 wherein the first server program (20) is an
operating system and the second server program (60) is a different operating system.
A computer system for comparing the performance between
execution of a client program (10) with a first server program (20) and execution of the client

program with a second server program (60), the client program for requesting services of
a third server program (20), the system comprising: 


a logging component (40) that, during an execution of the client program,
logs a plurality of requests for a service of the third server program, each request

including an identification of the requested service;
a simulation component (50) that

simulates the execution of the client program with the first
server program (20) by selecting logged requests, requesting the first server program to

perform the requested behavior of each selected logged request, and recording
characteristics of the performance of the request by the first server program; and
simulates the execution of the client program with the second
server program (60) by selecting logged requests, requesting the second server program

to perform the requested behavior of each selected logged request, and recording
characteristics of the performance of the request by the second server program; and
an analysis component that analyzes the recorded characteristics of the
performance of requests by the first server program and the second server program.
The system of claim 16 wherein the recording the performance
characteristics record timing information.
The system of claim 17 wherein the simulating the execution of
the client program with the first server program (20) are performed on a first computer

and the simulating the execution of the client program with the second server
program is performed on a second computer, the first computer and the second

computer having different architectures.
The system of claim 18 wherein the logging is performed on a
third computer having an architecture different from the architecture of the first

computer and the second computer.
</CLAIMS>
</TEXT>
</DOC>
