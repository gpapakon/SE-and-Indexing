<DOC>
<DOCNO>EP-0611497</DOCNO> 
<TEXT>
<INVENTION-TITLE>
ADAPTIVE PROGRAMMING METHOD FOR ANTIFUSE TECHNOLOGY.
</INVENTION-TITLE>
<CLASSIFICATIONS>G11C1714	G11C1716	H03K19177	H03K19177	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G11C	G11C	H03K	H03K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G11C17	G11C17	H03K19	H03K19	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
For antifuse programmable integrated circuit devices, in particular FPGA devices, the invention allows for alternative routing around antifuses (A5) which fail to program. The chip architecture includes wiring segments (Hn, Vn) and antifuses (An) which together allow for alternative routes around every antifuse (An) in the event of failure of that antifuse. The method includes programming the device under control of a computer which can recalculate routes in the event of an antifuse (i.e. A5) which fails to program. Preferably the initial routing distributes unused wiring segments (i.e. H4, V5) through the chip to be available for routing around a failed antifuse (A5). When a failure occurs, the method includes determining an alternative route around every failed antifuse. The alternative route may be established directly after the antifuse has failed or after all initially selected antifuses have been programmed. The method also includes swapping of logic cell inputs (signal 1, signal 2), logic cells (cell n), and/or logic blocks (Bn) from their original layout to adapt to a failed antifuse without changing the timing of signals which would have used the failed antifuse.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
XILINX INC
</APPLICANT-NAME>
<APPLICANT-NAME>
XILINX, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GOETTING F ERICH
</INVENTOR-NAME>
<INVENTOR-NAME>
PARLOUR DAVID B
</INVENTOR-NAME>
<INVENTOR-NAME>
TRIMBERGER STEPHEN M
</INVENTOR-NAME>
<INVENTOR-NAME>
GOETTING, F., ERICH
</INVENTOR-NAME>
<INVENTOR-NAME>
PARLOUR, DAVID, B.
</INVENTOR-NAME>
<INVENTOR-NAME>
TRIMBERGER, STEPHEN, M.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 ADAPTIVE PROGRAMMING METHOD FOR ANTIFUSE TECHNOLOGYFIELD OF THE INVENTION The present invention relates to programming logic devices, more particularly to programming field programmable devices having a programmable interconnect structure interconnectable by antifuses.BACKGROUND OF THE INVENTION FPGAs - SRAM and Antifuse Field programmable gate arrays (FPGAs) comprise programmable logic blocks and a programmable interconnect structure for interconnecting the blocks. The logic blocks are programmed to perform a desired function and the interconnect structure comprises wiring segments which may be interconnected to connect the logic blocks together as desired. Some interconnect structures are interconnected by turning on transistors which interconnect the wiring segments. Others are interconnected by programming antifuses which interconnect the wiring segments. Antifuse programming is achieved by applying sufficiently different voltages to the wiring segments which contact the two terminals of the antifuse to cause current to pass through the antifuse and cause the antifuse to become permanently conductive.Full Testability When manufacturing FPGAs which are programmed by turning on transistors, it is possible to fully test the device before the device is sold to a customer who will program the device, to assure that all transistors operate properly. Thus the yield of devices which are successfully configured by the user is very high. On the other hand, antifuse devices can only be tested for nonconductivity of the antifuses in their unprogrammed 

state. Antifuse devices can not be tested for antifuse programmability before going to a customer, because antifuse devices are one-time programmable, and full testing (which includes determining whether each antifuse will program) would destroy the programmability the customer desires. Given the large number of antifuses that must be programmed in a typical FPGA, even relatively low antifuse failure rates can lead to unacceptably high FPGA device failure rates, since each connection in the device must be successfully completed for the device to work as designed. Some manufacturers of antifuse devices include extra test antifuses, which are programmed at the factory to determine if the device antifuses will program properly. If any of these test antifuses fail to program, the entire part is rejected. However, these test antifuses do not guarantee that the device antifuses will all function properly. Sometimes all test antifuses may program properly and yet a
</DESCRIPTION>
<CLAIMS>
CLAIMS
We claim: 1. A method of programming an antifuse programmable logic device having interconnect wiring segments, and antifuses which programmably connect said wiring segments to each other, said method comprising the steps of: providing a design in machine readable form, said design comprising connections between selected nodes in said device; for each of said connections, selecting active wiring segments and active antifuses in said antifuse programmable logic device to implement said connection, thereby to form a route for said connection; programming at least some of said active antifuses; if during programming any of said active antifuses fails to become conductive, selecting from those antifuses not yet programmed an alternative set of antifuses to complete said connections; programming said alternative set of antifuses, thereby to form an implementation of said design.
2. A method as in Claim 1 comprising the further step of leaving spare wiring segments and spare antifuses not used initially for any of said connections.
3. A method as in Claim 1 in which said design comprises a logic design comprising both design elements and said connections, and said device further comprises logic elements, said antifuses programmably connecting said logic elements to said v;iring segments, said method comprising the further steps of: selecting one of said logic elements to implement each of said design elements; 


 leaving spare logic elements not used initially for any of said design elements.
4. A method as in Claim 1 in which said design comprises a logic design comprising both design elements and said connections, and said device further comprises logic elements grouped into blocks, said antifuses programmably connecting said logic elements to said wiring segments, said method comprising the further step of: leaving spare blocks not used initially for any of said design elements.
5. A method as in Claim 1 in which said design comprises a logic design comprising both design elements and said connections, and said device further comprises logic elements, said antifuses programmably connecting said logic elements to said wiring segments, said method comprising the further steps of: selecting one of said logic elements to implement each of said design elements; leaving spare logic element inputs not used initially in at least some of said logic elements.
6. A method as in Claim 1 in which said active antifuses are programmed in the order of time to spare for a path such that paths having the least time to spare in meeting a timing requirement are programmed first.
7. A method as in Claim 1 in which said alternative set of antifuses is selected such that paths selected after an antifuse failure have the same timing as corresponding paths selected before said antifuse failure.
8. A method as in Claim 1 in which said alternative set 


of antifuses is selected so that said implementation of said logic design meets the same timing requirements as would have been met if no antifuses failed.
9. A method as in Claim 1 in which said step of selecting an alternative set of antifuses is performed after a first failed antifuse is found.
10. A method as in Claim 9 in which said alternative set of antifuses is selected to swap equivalent input ports of a logic element which will receive plural input signals, thereby avoiding said failed antifuse.
11. A method as in Claim 1 in which all of said active antifuses are programmed as part of a first programming step, and said alternative set of antifuses are selected and programmed after said first programming step.
12. A method as in Claim 1 in which said wiring segments comprise both horizontal and vertical wiring segments, and said antifuses are positioned at intersections of said horizontal and vertical wiring segments, spare wiring segments being selected from both horizontal and vertical wiring segments.
13. A method of programming an antifuse programmable logic device having logic elements, interconnect wiring segments, and antifuses which programmably connect wiring segments to each other and to said logic elements, said method comprising the steps of: providing a logic design in machine readable form, said logic design comprising design elements and connections between selected ones of said design elements; selecting one of said logic elements to implement each of said design elements; 


 for each of said connections, selecting active wiring segments and active
"
antifuses in said antifuse programmable logic device to implement said connection and thereby to form a conductive route for said connection; leaving spare wiring segments and spare antifuses not to be used initially for any of said connections; programming each of said active antifuses; for each of said active antifuses which failed to become conductive upon said programming, selecting an alternative route to complete that connection of which said failed antifuse is a part, using selected ones of said spare wiring segments and said spare antifuses, programming said selected spare antifuses, thereby to form said alternative route for said connection.
14. A method of programming an antifuse programmable logic device having logic elements, interconnect wiring segments, and antifuses which programmably connect wiring segments to each other and to said logic elements, said method comprising the steps of: providing a logic design in machine readable form, said logic design comprising design elements and connections between selected ones of said design elements; selecting one of said logic elements to implement each of said design elements; for each of said connections, selecting active wiring segments and active antifuses in said antifuse programmable logic device to implement said connection and thereby to form a conductive route for said connection; programming said active antifuses in turn; if an antifuse fails to become conductive upon programming, for at least that connection of which 


 said failed antifuse is a part, calculating an alternative route to complete that connection.
15. A method as in Claim 14 in which said step of calculating an alternative route to complete that connection further comprises calculating alternative routes for additional unprogrammed connections.
16. A method as in Claim 14 in which said steps of providing, selecting, programming, and calculating are performed under control of a single computer.
17. An antifuse based field programmable logic device comprising: logic elements; wiring segments; antifuses positioned to be programmed to connect said wiring segments to each other and to said logic elements, each wiring segment being connectable to another wiring segment or to a logic element along more than one path, whereby if an antifuse on a first path fails to program, a second path not including the failed antifuse can connect the same logic elements as would have been connected by a path including the failed antifuse.
18. An antifuse based field programmable logic device comprising: logic elements; wiring segments; antifuses which can be programmed to connect said wiring segments to each other and to said logic elements, each antifuse being capable of being bypassed if programming of said antifuse fails.
19. A device as in Claim 18 in which said wiring 


segments comprise long segments and short segments, a short segment spanning a dimension of one of said logic elements and a long segment spanning a greater length, each long segment being connectable to another wiring segment both directly and through one of said short segments.
20. A device as in Claim 18 in which said wiring segments comprise long segments and short segments and said logic elements are grouped into blocks, a short segment spanning a dimension of one of said blocks and a long segment spanning a greater length, each long segment being connectable to another wiring segment both directly and through one of said short segments.
21. A device as in Claim 20 in which some of said short segments are parallel to at least one of said long segments and provide alternative routes for connecting to said long segment from wiring segments perpendicular to said at least one of said long segments.
22. A device as in Claim 21 in which said at least one of said long segments carries a clock buffer signal. 

</CLAIMS>
</TEXT>
</DOC>
