<DOC>
<DOCNO>EP-0644487</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Scalable system interrupt structure for a multiprocessing system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F1516	G06F948	G06F1320	G06F1516	G06F946	G06F1324	G06F15177	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F15	G06F9	G06F13	G06F15	G06F9	G06F13	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An interrupt subsystem within a data processing system is scalable 
from low-end uniprocessor systems to high-end m
ulti-processor (MP) 
systems. This interrupt subsystem provides for queuing of interrupts 

from many sources, and for queuing of interrupts to the best processor in 
a multi-processor system. The external interrupt mechanism is separated 

into two layers, an interrupt routing layer and an interrupt presentation 
layer. The interrupt routing layer routes the interrupt conditions to 

the appropriate instance of an interrupt management area within the 
interrupt presentation layer. The interrupt presentation layer 

communicates the interrupt source to the system software which is to 
service/process the interrupt. By providing two layers within the 

interrupt subsystem, application or system software can be written which 
is independent from the types or sources of interrupts. The interrupt 

routing layer hides the details of a particular hardware implementation 
from the software. The interrupt presentation layer interfaces to the 

system and/or application software, and provides hardware independent 
functionality. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ARNDT RICHARD LOUIS
</INVENTOR-NAME>
<INVENTOR-NAME>
NICHOLSON JAMES OTTO
</INVENTOR-NAME>
<INVENTOR-NAME>
SILHA EDWARD JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
THURBER STEVEN MARK
</INVENTOR-NAME>
<INVENTOR-NAME>
YOUNGS AMY MAY
</INVENTOR-NAME>
<INVENTOR-NAME>
ARNDT, RICHARD LOUIS
</INVENTOR-NAME>
<INVENTOR-NAME>
NICHOLSON, JAMES OTTO
</INVENTOR-NAME>
<INVENTOR-NAME>
SILHA, EDWARD JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
THURBER, STEVEN MARK
</INVENTOR-NAME>
<INVENTOR-NAME>
YOUNGS, AMY MAY
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to data processing systems, and more
particularly to a way of signalling interrupt information between an
interrupt source and an interrupt processor in a data processing system.In data processing systems, interrupts are used to signal a
processor that an interrupt condition exists at a given source. This
interrupt source could be, for example, an adapter card on a system bus
which requires some type of service. The required service may be to
initiate a transfer of data, or to read a status register that has
recently changed.When the processor has been conditioned to accept an interrupt,
otherwise known as having the interrupts enabled, the processor will
initiate interrupt processing upon the receipt of an interrupt. This
interrupt processing typically involves the processor interrogating the
source of the interrupt, performing functions based upon the type of
interrupt, and resetting/turning off the interrupt.Interrupt priorities have also been accommodated in traditional
systems. If more than one interrupt signal is active at a given time,
the use of interrupt priorities tells the processor which interrupt to
service first.Interrupt controllers have been designed to offload certain
interrupt handshake functions that are required, such as resetting an
interrupt signal. Typical of such interrupt controllers is an Intel 8259
controller, which is described in the Intel Component Data Catalog, 1981
(available from Intel Corp. Literature Department, 3065 Bowers Avenue,
Santa Clara, CA), and hereby incorporated by reference as background
material. These interrupt controllers can monitor multiple interrupt
sources, and only interrupt the processor using a single interrupt line.Current interrupt signalling methods were primarily designed for
uniprocessor systems with few interrupt sources or priority levels. Most
systems send interrupts over one or more interrupt lines hardwired on the
planar. In a multiprocessor environment, where there is more than one
processor capable of servicing an interrupt, these types of interrupt
signalling techniques cause increases in bus complexity. An interrupt 
signal from each interrupt source would have to be wired to each
processor or interrupt controller capable of servicing such interrupt.Attempts to satisfy needs of a multiprocessing data processing
system have required dedicated interrupt controllers for each processor
in the system. This approach is not only costly, but also does not allow
for cohesive management of interrupts which are generated
</DESCRIPTION>
<CLAIMS>
A system for processing interrupt requests within a data processing
system having a plurality of processors (40,41) and a plurality of

interrupt sources (30), wherein each of the interrupt requests is
associated with a priority, the data processing system including a

plurality of queues (42,43) for storing interrupt requests, each of the
plurality of queues being associated with a single one of the plurality

of processors, the system comprising:

interrupt routing means (52) for receiving an interrupt request
from an interrupt source and for routing the interrupt request to the one

of the plurality of queues which is associated with a selected one of the
processors; and
interrupt queuing means (52) for queuing the interrupt request
within the queue associated with the selected process
or for presentation
to, and servicing by, the selected processor;

said system being characterized by:

   the interrupt routing means including means for removing the queued
interrupt request from the queue in the event that the priority

associated with the queued interrupt request is lower than the priority
associated with another interrupt request subsequently presented at the

queue.
A system as claimed in claim 1 wherein each of the plurality of
processors is associated with a variable priority and wherein the routing

means routes the interrupt request to a best processor determined based
on a priority associated with the interrupt request and variable

priorities associated with the plurality of processors.
A system as claimed in claim 1, wherein the interrupt request
presented to a selected processor includes a single source identifier

that specifies which of the plurality of interrupt sources issued the
interrupt request.
A method for processing interrupt requests within a data processing
system having a plurality of processors and a plurality of interrupt

sources, wherein each of the interrupt requests is associated with a
priority, the data processing system including a plurality of queues for

storing the interrupt requests, each of the plurality of queues being 
associated with a single one of the plurality of processors, the method

comprising:

receiving a first interrupt request from one of the plurality of
interrupt sources and routing the received request to the one of the

plurality of queues which is associated with a selected one of the
plurality of processors;
queuing the first interrupt request within the queue associated
with the selected processor for servicing by the processor; and

said method being characterized by the step of:

   thereafter, removing the first interrupt request from the queue in
response to presentation at said queue of a second interrupt request

having a higher priority than that of the first interrupt request.
</CLAIMS>
</TEXT>
</DOC>
