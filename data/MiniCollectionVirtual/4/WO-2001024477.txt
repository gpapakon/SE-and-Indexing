<DOC>
<DOCNO>WO-2001024477</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A SEGMENTATION PROTOCOL THAT SUPPORTS COMPRESSED SEGMENTATION HEADERS
</INVENTION-TITLE>
<CLASSIFICATIONS>H04L1256	H04L1256	H04L2906	H04L2906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04L	H04L	H04L	H04L	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04L12	H04L12	H04L29	H04L29	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The per-node delay for transfer of a datagram that is segmented into datagram segments is reduced by a header compression based segmentation and link layer switching. For each datagram segment, the segmentation header includes a unique segmentation context identifier (CID). Based on the segmentation CID, the datagram segments are forwarded between intervening nodes of source and destination, without being reassembled at each node. The segmented data gram is reassembled at the destination node based on sequence numbers assigned to the datagram segments during segmentation.
 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ERICSSON TELEFON AB L M
</APPLICANT-NAME>
<APPLICANT-NAME>
TELEFONAKTIEBOLAGET LM ERICSSON (PUBL)
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
WESTBERG LARS
</INVENTOR-NAME>
<INVENTOR-NAME>
WESTBERG, LARS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 A Segmentation Protocol That Supports Compressed Segmentation HeadersTechnical Field:The present invention relates to data communication over a network, more particularly to a segmentation method used for transmission of large data packets.Background:Recent advances in hardware and communication technologies have introduced the era of mobile computing over wired and wireless links. The proliferation of powerful notebook computers and wireless communications promises to provide users with network access at any time and in any location over the Internet. This continuous connectivity will allow users to be quickly notified of changing events and provide them with the resources necessary to respond to them even when in transit.In mobile networks, such as that proposed by Internet Engineering Task Force (IETF), a mobile host is allowed to roam freely on the Internet while still maintaining the same IP address. In such systems, data transfer delay requirements are critical and transmissions must support efficient transport. These requirements are even more critical for real-time applications, such as voice or video. The Internet community has a well-developed and mature set of layered transport and network protocols, which are quite successful in offering to end- users both connection-oriented transport protocols, such as Transport Control Protocol (TCP), and connectionless transport protocols, such as User Datagram Protocol (UDP), over connectionless network services, such as Internet Protocol (IP). Many popular network applications have been built directly on top of the 

 TCP and UDP over the past decade. These have helped these Internet services and protocols to become widely-spread de facto standards.Interconnection layer protocols and interfaces there between are defined to provide specifications for communication between a process or program being executed on one host computer's operating system and another process or program running on another computer. Transmission control protocol/internet protocol (TCP/IP) are two protocols that are part of a protocol suite or family of protocols layered and designed to connect computer systems that use different operating systems and network technologies. FIG. 1(a) illustrates conceptual layers for TCP/IP as well as the format of objects passed between adjacent protocol layers. TCP/IP is a four layer protocol suite (the hardware layer is not counted) which facilitates interconnection on the same or different networks, and in certain networks such as the Internet,
</DESCRIPTION>
<CLAIMS>
Claims:
1. A method for communicating a datagram through intervening nodes between a source node and a destination node having a destination address comprising:
forwarding a datagram through the intervening nodes, based on CID values inserted at a header of the datagram as the datagram is forwarded through the intervening nodes, wherein an inserted CID value at an intervening node correlates the destination address with a corresponding output port address of the intervening node, until the datagram is received at the destination node.
2. The method of claim 1 further including the step of reassembling the datagram segments at the destination node, without reassembly at each intervening node.
3. The method of claim 1 further including:
inserting sequence information at the header of the datagram segments at the source node; and
reassembling the datagram segments at the destination node based on the sequence information.
4. In a data communications system where a data packet is segmented to into a plurality of datagram segments such that each datagram segment has a corresponding segmentation header, a method for communicating the datagram segments between at least two nodes using a link layer protocol comprising:
receiving a datagram segment;
determining whether a header of the received datagram has a compressed header or a full header; 


 analyzing an IP address received with the full header to identify a corresponding output port number and indexing the identified output port number with a segmentation CID value received with the full header;
analyzing an incoming segmentation CID value received with a compressed header to determine a corresponding output port number and replacing the incoming CID value by an outgoing CID value that corresponds to the determined output port number; and
forwarding the datagram segment on an output port that corresponds to the determined output port number.
5. The method of claim 4 further including the step of reassembling the datagram segments at a destination node based on a segmentation sequence number.
6. In a data communications system where a datagram having headers and an associated data portion is communicated between at least two nodes using a link layer protocol, a method comprising:
segmenting the datagram into a plurality of datagram segments such that each datagram segment has a corresponding header and data portion;
inserting a unique segmentation context identification (CID) value in the segmentation header;
forwarding the datagram segments with the unique CID value from one node to another using the link layer protocol without reassembling the datagram segments at an intervening nodes between source and destination nodes; and
reassembling the datagram segments at the destination node based on a segmentation sequence number. 

7. The method of claim 6 further including:
forwarding the first datagram segment of the segmented datagram using a full header that includes a corresponding CID value and an IP address; and
forwarding subsequent datagram segments using a compressed header.
8. The method of claim 6 further including:
receiving a datagram segment at a node;
determining whether the header of the received datagram segment is full or compressed;
if full, indexing an incoming segmentation CID value with an outgoing port that corresponds to the IP address and forwarding the received datagram segment on the outgoing port with a compressed segmentation header that has a unique outgoing CID value;
if compressed, forwarding the received datagram segment on an output port that corresponds to an incoming CID value; and
replacing the incoming CID value with an outgoing CID value that correspond to the output port in the segmentation header.
9. The method of claim 6, wherein the segmentation CID includes position information indicating the position of a datagram segment within the segmented datagram. 

10. The method of claim 9, wherein the segmentation CID indicates whether a datagram segment is at the beginning of the segmented data message.
11. The method of claim 9, wherein the segmentation CID indicates whether a datagram segment is at the end of the segmented data message.
12. The method of claim 9, wherein the segmentation CID indicates that a datagram segment is not at the beginning or the end of the segmented data message. 

</CLAIMS>
</TEXT>
</DOC>
