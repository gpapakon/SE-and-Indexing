<DOC>
<DOCNO>EP-0653706</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Error handling and correction in computer system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1110	G06F1110	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Add-on memory cards for a computer system are provided which 
include error correction code logic on the card, and logic to do partial 

writes of data words. The system has a central processing unit (CPU), a 
BUS interconnecting the CPU and the add-on memory cards. The CPU or 

associated components are configured to write data and read data from the 
add-on memory as several data bytes constituting data words. The system 

is further configured either within the CPU or as a separate function to 
generate parity bits associated with each of the bytes of data the CPU 

writes to the add-on memory and to read parity bits associated with data 
the CPU reads from the add-on memory and regenerate new parity bits and 

compare the newly generated parity bits with the original parity bits to 
detect data errors on data read from the add-on memory. The system 

itself does not contain error correction code (ECC). The add-on memory 
has ECC logic to identify any byte having a single bit error in the data 

bytes or the parity bits written by the CPU to the add-on memory and to 
correct all single bit errors in data read from the add-on memory to the 

CPU. The error correcting code includes logic to generate parity bits in 
the data bytes written by the CPU to the add-on memory and logic to 

compare the parity bits written by the CPU with those generated by the 
error correcting code logic. Also provided is a circuitry card technique 

to block or by-pass error reporting and correcting during initialization. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FUOCO DANIEL P
</INVENTOR-NAME>
<INVENTOR-NAME>
HERRING CHRISTOPHER M
</INVENTOR-NAME>
<INVENTOR-NAME>
KELLOGG MARK W
</INVENTOR-NAME>
<INVENTOR-NAME>
LENTA JORGE E
</INVENTOR-NAME>
<INVENTOR-NAME>
FUOCO, DANIEL P.
</INVENTOR-NAME>
<INVENTOR-NAME>
HERRING, CHRISTOPHER M.
</INVENTOR-NAME>
<INVENTOR-NAME>
KELLOGG, MARK W.
</INVENTOR-NAME>
<INVENTOR-NAME>
LENTA, JORGE E.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to error handling and correction 
in data being transferred to and from a memory subsystem in a computer 
system. In the field of personal computers there are a variety of CPU 
systems which can "write to" and "read from" both system memory and add-on 
memory. Included within this variety of systems are systems that have 
various degrees of sophistication vis-a-vis parity checking and error 
correction codes. In the simplest of systems the CPU may merely read and 
write data without any parity checks or without any error correction 
code. However, it is normal that the CPU or its associated components 
have at least the capability of writing parity bits with each byte of 
code during the write cycle and the system be equipped either within the 
CPU or with an additional component the ability to do parity checks on 
data which is read from the add-on memory. In this type of system if an 
error occurs during the write cycle wherein there is either an incorrect 
data bit or an incorrect parity bit, this information is stored in its 
incorrect form; then when it is read back by the CPU on a read cycle, the 
associated parity checking logic will flag an error. Further, with this 
type of system no error correction is included, all that can be done is 
identify the byte in which the data error occurred. Moving up the scale of sophistication, some CPU's or the components 
associated therewith have relatively sophisticated error correcting codes 
(ECC) and these can perform the necessary function of checking for write 
errors and detecting and correcting read errors. According to the present invention there is provided a memory card 
adapted to interface with a computer system write and store multiple byte 
data words at a given address, and wherein said computer system is 
configured to write all of the bytes of said data word or write less than 
all of the bytes of said data word selectively to memory; said memory 
card comprising: logic to generate check bits and logic to write said 
data words and said associated check bits to said memory; logic to detect 
when less than all of the data bytes are to be rewritten to a selected 
address and to initiate a read-modify-write cycle; logic to perform a 
read-modify-write cycle wherein data bytes at the given address are read 
from memory and multiplexed with bytes that are to be rewritten, check 
bits are generated from the multiplexed bytes and the multiplexed data  
 
bytes and check bits are written to memory, said last named
</DESCRIPTION>
<CLAIMS>
A memory card adapted to interface with a computer system to write 
and store multiple byte data words at a given address, and wherein said 

computer system is configured to write all of the bytes of said data word 
or write less than all of the bytes of said data word selectively to 

memory; said memory card comprising: 
   logic to generate check bits and logic to write said data words and 

said associated check bits to said memory; 
   logic to detect when less than all of the data bytes are to be 

rewritten to a selected address and to initiate a read-modify-write 
cycle; 

   logic to perform a read-modify-write cycle wherein data bytes at 
the given address are read from memory and multiplexed with bytes that 

are to be rewritten, check bits are generated from the multiplexed bytes 
and the multiplexed data bytes and check bits are written to memory, 

   said last named logic including logic to generate a delay in the 
write cycle for a time sufficient to read said data bytes from memory, 

multiplex said read data bytes with the newly written data bytes and 
write the multiplexed data bytes and check bits to memory; 

   logic to read the data bytes and check bits from memory; and 
   error correction code logic to generate syndrome bits and correct 

all one bit errors. 
A memory card as claimed in claim 1 wherein said card includes 
means to identify said card to a system as having error correction code 

capabilities. 
A memory card as claimed in claim 2 wherein said means to identify 
said card includes circuit means on said card to provide a signal to the 

computer system responsive to a second condition of the computer system 
configuration. 
A memory card as claimed in claim 3 wherein said second 
configuration is a signal supplied by the system and received by a 

contact on said card. 
A memory card as claimed in any previous claim further 
characterized by said card having means to prevent its being inserted to 

a system which does not provide sufficient cycle time for a read-modify-write 
operation. 
A memory card as claimed in claim 5 wherein said means to prevent 
the insertion includes notch means on said card configured to prevent 

said insertion. 
A memory card as claimed in any previous claim, further including 
logic to block reporting or correcting of any errors detected during an 

initialisation mode of said computer system. 
A memory card as claimed in claim 7 wherein logic to initiate a 
read-modify-write cycle and the logic to initiate reporting or correcting 

of any errors during initialisation include a unique combination of 
signal sequences on a single given pin of said card. 
A computer system including a CPU and at least one memory card as 
claimed in any preceding claim. 
A computer system as claimed in claim 9 including means to detect 
whether said system is entering a cycle wherein all the bytes of the data 

word are being rewritten or less than all of the bytes are being 
rewritten, and means to provide the required wait states for each. 
A method of operating a computer system to perform a read-modify-write 
operation to memory, the computer system including a CPU; at least 

one memory card adapted to interface in the computer system; said 
computer system and said card being configured to write and store 

multiple byte data words at a given address, said computer system being 
configured to write all of the bytes of said data word or write less than 

all the bytes of said word selectively to memory, said computer system 
being free of error correction code capabilities but capable of providing 

varying wait states for memory write operations, said computer system 
being configured to provide sufficient cycle time for card logic to 

perform a read-modify-write operation to memory; said memory card 
 

including: logic to generate check bits and logic to write said data 
words and said associated check bits to said selected memory location; 

the method comprising the steps of: 
   detecting when less than all of the data bytes are to be rewritten 

to a selected address initiating a read-modify-write cycle; 
   performing a read-modify-write cycle wherein data bytes at the 

given address are read from memory and multiplexed with bytes that are to 
be rewritten, generating check bits are generated from multiplexed bytes, 

and writing the multiplexed data bytes and check bits to memory; 
   generating a delay in the write cycle for a sufficient time to read 

said data bytes from memory, multiplexing said read data bytes with the 
newly written data bytes and writing the multiplexed data bytes and check 

bits to memory; 
   reading the data bytes and check bits from memory; 

   generating syndrome bits and correcting all one bit errors during 
said operating cycle. 
A method as claimed in claim 11 including the steps of detecting 
whether said system is entering a cycle wherein all the bytes of the data 

word are being rewritten or less than all of the bytes are being 
rewritten, and providing the required wait states for each cycle. 
A method as claimed in claim 11 or claim 12 including the step of 
detecting whether the card has error correction code capabilities. 
A method as claimed in any of claims 11 to 13 including the step of 

blocking, reporting and correcting of any errors detected during an 
initialisation mode of said computer system in which read-modify-write 

cycles are used. 
A method as claimed in claim 14 wherein the read-modify-write cycle 
and the reporting or correcting of any errors during the initialisation 

mode both include the step of generating a unique combination of signal 
sequences imprinted on a single given pin of said card. 
</CLAIMS>
</TEXT>
</DOC>
