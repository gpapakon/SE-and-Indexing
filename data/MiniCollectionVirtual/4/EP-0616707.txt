<DOC>
<DOCNO>EP-0616707</DOCNO> 
<TEXT>
<INVENTION-TITLE>
EXPERT SYSTEM WITH FAST PATTERN MATCH DETERMINATION BY EQUIVALENCE CLASS PROJECTION MEANS
</INVENTION-TITLE>
<CLASSIFICATIONS>G06N504	G06N500	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06N	G06N	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06N5	G06N5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A pattern match method is the primary component of any rule-based inference engine or database search method. Equivalence class projection is used in a discrimination match network, such that only equivalence class tokens (and not working memory objects) are propagated down the network, then only the first object which is a member of any specific equivalence class will cause an actual propagation down through the net. Subsequent changes which are either the creation of new objects which are members of a known equivalence class or the removal of any object but the last member of that equivalence class can totally avoid propagation downward in that section of the discrimination network.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
DIGITAL EQUIPMENT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
DIGITAL EQUIPMENT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BARABASH WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
KIRK STEVEN A
</INVENTOR-NAME>
<INVENTOR-NAME>
YERAZUNIS WILLIAM S
</INVENTOR-NAME>
<INVENTOR-NAME>
BARABASH, WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
KIRK, STEVEN, A.
</INVENTOR-NAME>
<INVENTOR-NAME>
YERAZUNIS, WILLIAM, S.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to pattern matching, such as
arises in complex data base systems, and more specifically, in
rule-based artificial intelligence systems (i.e., so-called
"expert systems") in which the various conditions defined by
the rules are structured as a network to allow efficient
determination of which rules are applicable to data obtained
by the system.An expert system is based on a computer program which
comprises a set of rules and definitions of types of data that
will be processed according to the rules. By a process known
as "inference", the system performs matching between
conditions set forth in the set of rules and data elements of
the defined types in a working data base that has been
obtained by the system from a user or from other data bases.
When a set of data elements satisfies the conditions in one or
more of the rules, one of more of the satisfied rules are
"fired" (i.e., applied to the data) to change the data
elements in the working data base, provide advice to the user
or explanations in response to the user's questions, or to
take some other action. The inference process is repeated
until no rules are found to be satisfied by the data, or the
firing of a rule indicates that the inference process is to
stop.In general, the inference process can be thought of as
attempting to evaluate a set of objects (all the data elements
in the working data base) in light of a preexisting set of
constraints (the conditions in the rule) to find a tuple of
objects which satisfy the set of constraints (the combination
of data elements which satisfy the rule).Each rule includes one or more conditions (collectively
referred to as the "left-hand side" of the rule) which, if 
satisfied by the data, indicate that the rule is applicable.
After the conditions of the rules are evaluated to determine
which rules are applicable, one or more of the applicable
rules is fired. The operations to be performed when the rule
is fired are listed in the "right-hand side" of the rule. One
way to determine which rules are applicable is to test every
condition in the left hand sides of all the rules each time a
new element of data is obtained by the system. With this
scheme, each condition is retested each time the working data
base is altered by addition or deletion of data, even if the
altered data could not possibly have changed the result of
that condition.It is known that during operation of an expert system the
largest proportion of time is spent in evaluating the
conditions in the rules to determine which
</DESCRIPTION>
<CLAIMS>
An expert system including a computer system and a source program
defining a set of rules and operations to be performed according to the rules, the

source program being processed using a compiler to generate an executable
program and associated data structure;

the computer system having a memory in which the executable program and
associated data structure are loaded, the memory being also arranged to store a

working database of actual elements to be processed by the expert system; the
computer system being operable to process the data elements through the data

structure to evaluate when the conditions of a rule are satisfied by the data
elements and to actuate that rule and thereby to perform the operation

associated with the actuated rule;

characterised in that the computer system is operable using tuples to generate,
in the data structure, at least one equivalence class comprising a set of data

elements defined by a common constraint, and a single token representing one
set of equivalence classes, the set comprising equivalence classes having

constraints which satisfy the rule conditions, the computer system having means
operable to map back, from each set of equivalence classes, the data elements

which satisfy the conditions of the rules, thereby enabling the associated
operation to be performed.
An expert system according to claim 1, characterised in that the data
structure includes a memory for storing data element tokens, a data element

token being
 
generated by the data structure in response to an inputted data element, the data

structure being operable to store the data element tokens in the memory in equivalence
classes, each class being defined by the constraint, and each data element token being

identified by that constraint and by other attributes associated with the data element,
to generate an equivalence class token, for processing by the data structure, each time a

new equivalence class is generated, a new equivalence class being generated every
time a data element token is generated in response to an inputted data element having a

uniquely valued constraint, and to evaluate the generated equivalence class tokens to
establish those equivalence classes having constraints which satisfy the conditions of

the rule and to thereby generate a conflict set of single tokens, each single token in the
conflict set representing combinations of equivalence classes which have constraints

satisfying the conditions of the rule.
An expert system according to claim 1 or claim 2, characterised in that the
constraints are attributes of a data element which is compared to attributes of another

data element.
An expert system according to any preceding claim, characterised in that the
data structure is a RETE - net.
An expert system according to any of claims 1 to 3, characterised in that the
data structure is a TREAT - net.
An expert system according to any of claims 2 to 5, characterised in that the
computer system is operable to:


evaluate the equivalence classes identified in each conflict set token to select the best
combination of data elements, in each equivalence class, for actuating the rule; 
to determine, before the rule is actuated, in the conflict set token containing the best
combination of data elements, the next combination of data elements, and to replace,

in that conflict set token, the best combination with the next best combination, the
conflict set token being marked inactive if no such combination exists; and to cause

the data elements selected to actuate the rule to be ineligible to fire the rule again.
An expert system according to claim 6, characterised in that the computer
system is further operable to re-evaluate each conflict set token to update the next best

combination when a new data element is added to an equivalence class.
An expert system according to claim 6 or claim 7, characterised in that the
data structure includes a memory holding tokens representing data elements previously

used to actuate a rule, the contents of the memory being checked before a rule is
actuated to ensure that ineligible data elements are not used to actuate that rule.
</CLAIMS>
</TEXT>
</DOC>
