<DOC>
<DOCNO>EP-0638187</DOCNO> 
<TEXT>
<INVENTION-TITLE>
CATEGORIZING STRINGS IN CHARACTER RECOGNITION
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1730	G06K972	G06F1730	G06K972	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06K	G06F	G06K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	G06K9	G06F17	G06K9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system (10) for use in character (16) recognition (374, 382) in which a directed graph representing a combination of finite state machines implementing string recognition algorithms for a variety of string categories is used to process string data (12) containing a particular ending subsequence. The ending (18, 70, 108) subsequence includes acceptance (36, 80) information indicating whether (80) the string (12) is acceptable. If so, the ending subsequence (18, 70, 108) also includes information indicating a set of categories (36, 82) including words (204, 206), numbers (208, 212), coumpounds words (210), and so forth. The acceptance (18, 36, 108) information can include a bit indicating the character type of the ending character, and an acceptance (18) data unit which indicates an acceptable string ending. The acceptance (18) data unit can be followed by category (18) data units, each indicating a category, which can be used to obtain a bit vector for a string (12), each bit of which indicates whether the string (12) is in one of the categories.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
XEROX CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
XEROX CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KAPLAN RONALD M
</INVENTOR-NAME>
<INVENTOR-NAME>
MULLINS ATTY T
</INVENTOR-NAME>
<INVENTOR-NAME>
SHUCHATOWITZ ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
KAPLAN, RONALD, M.
</INVENTOR-NAME>
<INVENTOR-NAME>
MULLINS, ATTY, T.
</INVENTOR-NAME>
<INVENTOR-NAME>
SHUCHATOWITZ, ROBERT
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to character recognition techniques that categorize
strings, such as strings of characters or other elements.Some conventional character recognition techniques improve recognition accuracy
by taking into account different categories of character strings that can occur in text. The
character recognition products of Xerox Imaging Systems, for example, employ several
specialized recognition algorithms, each for a respective category of character string. One
algorithm can look up words in a dictionary, another can recognize valid strings of arabic
numerals with punctuation marks, and so forth. If a string of character candidates includes a
candidate that has a substantial probability for more than one character category, the
ambiguity can be resolved by applying each recognition algorithm to the possible string that
would result from each probable character category. If one of the possible strings is recognized
by one of the algorithms, the recognition result can be used to resolve the ambiguity. If two or
more possible strings are recognized by different algorithms, the sequence of categories of
strings can be taken into account to resolve the ambiguity.US-A-4,003,022, describe string pattern recognition techniques. As shown and
described in relation to Figs. 1-4 and 7, a character is decomposed into a symbolic string pattern
that is fed to sequential logic. At column 3 lines 52-55 it is stated that the class for each symbol
string pattern is determined by comparing it with all sequential logics and checking which has
accepted the pattern.Sinha, R.M.K. and Prasada, B., "Visual Text Recognition through Contextual
Processing," Pattern Recognition, Vol. 21, No. 5, 1988, pp. 463-479, describe visual text
recognition techniques. Dictionary methods are described beginning in the last paragraph on
page 463. Section 2.1 on page 465 describes a partial dictionary. Section 2.6 on page 467
describes word boundary identification based on unambiguous punctuation marks. Section
2.7 on pages 467-468 describes heuristics use to identify word boundaries, match with the
dictionary, and traverse through a modified Viterbi net. Section 3 on page 468 and Figs. 3 and
4 describe dictionary organization and search, and relate specifically to a trie structure based
dictionary. Fig. 3 shows a node structure, including a NEXT field, an ALT field, a character, an
end of word mark, and a flag. Page 473, right hand column, notes that errors are encountered
due to several causes, including ambiguous
</DESCRIPTION>
<CLAIMS>
A product (12; 360; 400) for providing information about strings of
characters, comprising:


a data storage medium (390; 402); and
string data (12; 392; 404) stored by the data storage medium; the
string data indicating a set of two or more acceptable strings of characters;
the string data comprising two or more data units, each of which can
be accessed by a processor (14; 370); the data units including, for each of a set of two

or more acceptable strings of characters, a respective sequence of data units; the
string's sequence (30) of data units beginning with a subsequence of character data

units (32, 34; 202, 220, 222) that the processor can access using character data (16)
indicating character types of the string's characters; the string's sequence of data

units including acceptance data indicating that the string is one of the acceptable
strings;

   characterised in that

   the sequence (30) of data units for at least one string in the set of
acceptable strings includes a respective ending subsequence (36; 100; 202, 204, 206,

208, 210, 212) of data units that the processor can access after the subsequence of
character data units, which ending subsequence includes two or more category data

units (206, 210), each category data unit indicating one of a set of two or more
categories.
The product of claim 1 in which each data unit (202, 204, 206, 208,
210, 212, 220, 222) is a byte.
The product of claim 1 or 2 in which the set of acceptable strings
includes strings that can be words of a language.
The product of any of the preceding claims in which the said at least
one string includes an ending having a respective character type; the string's 

subsequence of character data units including an ending character data unit (202) that
includes character label information indicating the ending character's character type;

the ending character data unit including a bit indicating that a string at the end of
whose respective subsequence of character data units the processor (14; 370) can

access the ending character data unit is one of the acceptable strings; the string's
acceptance data including the bit.
The product of any of the preceding claims in which the string ending
data of the said at least one string includes an acceptance data unit (204) in the

string's ending subsequence (202, 204, 206, 208, 210, 212); the acceptance data unit
having a value indicating that a string at the end of whose respective subsequence of

character data units the processor (14; 370) can access the acceptance data unit is one
of the acceptable strings; the first string's acceptance data including the acceptance

data unit.
The product of claim 5 in which the said at least one string's ending
subsequence (202, 204, 206, 208, 210, 212) includes a set of category data units (206,

210) that the processor (14; 370) can access after accessing the acceptance data unit
(204).
The product of any preceding claim in which the set of acceptable
strings includes a first string including a respective ending subsequence of data units

including two or more category data units and a second string including a respective

ending subsequence of data units including one or more category data units, one
category dataunit that is also in the first string's ending subsequence being a shared

data unit that is also in the second string's ending subsequence.
The product of any of the preceding claims in which the string data
(12; 392; 404) represent a combined finite state machine (FSM).
The product of claim 8 in which one of the set of categories includes
infinitely many strings, the words in the set of acceptable words that are in the

category being expressible as a cyclic FSM; the combined FSM including the cyclic 
FSM.
The product of any of the preceding claims, further comprising a
processor (14; 370) connected for accessing the string data (12; 392; 404) stored

by the data storage medium.
A method of operating a system (10; 360) comprising:

a processor (14; 370);
memory (390; 402); the processor being connected for accessing
the memory; and
string data (12; 392; 404) stored by the memory; the string data
indicating a set of two or more acceptable strings of characters; the string data

comprising two or more data units, each of which can be accessed by the
processor; the data units including, for each of a set of two or more acceptable

strings of characters, a respective sequence of data units; the string's sequence
(30) of data units beginning with a subsequence of character data units (32, 34;

202, 220, 222) that the processor can access using character data (16) indicating
character types of the string's characters; the string's sequence of data units

including string ending data indicating that the string is one of the acceptable
strings;
the method comprising:

(A) operating the processor to access the string data using
string character data (16) indicating the string's characters; and
(B) operating the processor to obtain category data (18) for the
string;

   characterised in that

   the sequence (30) of data units for at least one string in the set of
acceptable strings includes a respective ending subsequence (36; 100; 202, 204,

206, 208, 210, 212) of data units that the processor can access after the
subsequence of character data units which ending subsequence includes two or

more category data units (206, 210), each category data unit indicating one of a
set of two or more categories.
</CLAIMS>
</TEXT>
</DOC>
