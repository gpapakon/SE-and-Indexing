<DOC>
<DOCNO>EP-0620936</DOCNO> 
<TEXT>
<INVENTION-TITLE>
COLLABORATIVE WORKING IN A NETWORK
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F946	G06F1300	G06F1300	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F13	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A programmable workstation for collaborative working in a network comprises a conventional operating system and a network control program layer. Additionally, the workstation includes a collaborative application support subsystem for interfacing with application programs. The subsystem is responsive to predetermined application program calls to create a logical network model of a collaborative environment. The model comprises sharing sets of application programs, which share data and resources across nodes and logical dedicated data channels connecting members of the sharing set. The subsystem cooperates with the network layer to establish the physical links necessary to implement the model in a physical network, transparently to the application program.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ALDRED BARRY KEITH
</INVENTOR-NAME>
<INVENTOR-NAME>
BONSALL GORDON WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
LAMBERT HOWARD
</INVENTOR-NAME>
<INVENTOR-NAME>
MITCHELL HARRY DAVIDD
</INVENTOR-NAME>
<INVENTOR-NAME>
ALDRED, BARRY KEITH
</INVENTOR-NAME>
<INVENTOR-NAME>
BONSALL, GORDON WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
LAMBERT, HOWARD
</INVENTOR-NAME>
<INVENTOR-NAME>
MITCHELL, HARRY DAVIDD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to collaborative working in a network and more
specifically to a programmable workstation and a method for use in such a
collaborative working environment.Personal computers are now widespread throughout the business community and
many are able to intercommunicate, either through fixed connections e.g.
local area networks, or through dynamically established links e.g. ISDN or
async lines over the public switched telephone network. Increasingly, these
connected personal computers can be used to enhance collaborative working
between remote individuals; a typical example being the use of desk top
conferencing software. Successful collaborative work generally requires
more than a simple data link between the participants; voice capabilities
are normally essential and video links are frequently required. Thus remote
collaborative working can often be regarded as an extension to the
traditional telephone call - it being enhanced with the data and programs
available at the desktop via the personal computer - and, on occasions,
enriched with video services.A broad spectrum of collaborative applications can be envisaged, ranging
from utilities taking advantage of the data and applications on a
workstation, e.g. sharing of screen windows and files, through to new
collaborative applications designed to meet the needs of specific classes
of remote user e.g. just-in-time education, remote presentations, executive
broadcasts or help desk. The common requirements behind these examples are:
o the support of a wide variety of personal computer platforms - both
hardware and software.o operation over the existing communication networks.o group communications and multi-media data services.Although desk top conferencing systems employing multi-media devices and
communications channels exist, generally they are provided with a fixed set
of system software and utility applications which is insufficiently 
flexible to meet the needs of all potential applications.EP-A-317468 describes a method for managing logical connections
between processes based on connection groups which regulate the flow of
work to a shared resource. EP-A-201065 describes a virtual single
machine, in which shared hardware resources on a network are made to look
like processes for easy interaction with other system processes.Accordingly the present invention provides a programmable
workstation for collaborative working in a network of workstations
forming the nodes of the network, the network being connected by physical
links for the
</DESCRIPTION>
<CLAIMS>
A programmable workstation (10) for collaborative working in a network of
workstations forming the nodes of the network, the network being connected

by physical links (11) for the transmission of data between nodes;

the workstation comprising an operating system (15);
a network control program layer (16), running on the operating system, for

controlling physical routing of data between nodes; and
a collaborative application support program layer (1) for interfacing
with application programs (18) running on the workstation and responsive to

predetermined application program calls to create a logical network model
of a collaborative environment wherein said application program calls may specify sharing sets of application

programs, which share data and resources within and across nodes, and
logical dedicated data channels connecting members of a sharing set of

application programs, each data channel (43) being defined by a sending port (45) and
a receiving port (46) each associated with an application program, the

collaborative application support program layer being adapted to cooperate
with the network control program layer to establish the physical links

necessary to implement the logical network model in a physical network,
transparently to the application programs.
A workstation as claimed in claim 1 in which logical data channels
have both a channel type and a channel set name, channels of the same type

and set name in the same sharing set of applications forming a channel set (59)
in which data received over any channel of the set is dependent on data on

other channels of the set in accordance with predetermined properties
associated with the channel type.
A workstation as claimed in claim 2 in which a merged channel type is
defined whose predetermined properties are that data from the sending ports

of channels of a merged channel set is merged and delivered to at least one
receiving port at a target application as a single data stream.
A workstation as claimed in claim 3 in which in a merged channel set
including multiple sending and receiving ports, data channels are created

by the support system between all the cross connections of the sending
ports and the receiving ports.
A workstation as claimed in claim 2 in which a serialised channel
type is defined whose predetermined properties are that data from the

sending ports of a serialised channel set is combined and delivered to each 
of multiple receiving ports in the channel set in the same serial order.
A workstation as claimed in claim 4 or claim 5 in which, in the case
where multiple sharing sets of application programs, each including merged

or serialised channel sets of the same name, are themselves combined to
form a larger sharing set, data channels not explicitly created by the

sharing applications are created by the support system between all the
cross connections of all the sending and receiving ports.
A workstation as claimed in claim 6 in which an application program
may establish bi-directional communication with all members of an existing

sharing set whose members are connected by a merged or serialised channel
set by joining the set and creating a single merged channel of the same

channel set name between its own sending and receiving ports.
A workstation as claimed in claim 2 in which a synchronised channel
type is defined whose predetermined properties are that data on the

different channels of a synchronised channel set is time synchronised at

each receiving port of the channel set.
A workstation as claimed in claim 8 in which synchronisation is
achieved by insertion of synchronising signals at each sending port and

removal of the synchronising signals at each receiving port of the
synchronised channel set.
A workstation as claimed in claim 1 in which, in response to a
predetermined program call by a first application program through which

data is being transferred, via receiving and sending ports of the first
application, between two other applications, the receiving port of the

first application is reversibly directly connected to its sending port so
that the data transfer bypasses the first application program.
A workstation as claimed in claim 1 in which, in response to a
predetermined program call by a first application program through which

data is being transferred, via receiving and sending ports of the first
application, between two other applications, the receiving port of the

first application is permanently directly connected to its sending port so
that a direct data channel, in which the first application plays no further

part, is created between the two other applications.
A method of collaborative working in a network of programmable
workstations (10, 12) forming the nodes of a network connected by physical links (11) for 

the transmission of data between nodes, the method comprising the steps
of:-


in response to predetermined calls from application programs running
on the workstation, creating a logical network model of a collaborative

working environment for use by the application programs (18) wherein said predetermined calls may specify
sharing sets of application programs, which share data and resources within

and across nodes, and logical dedicated data channels connecting members of
a sharing set of application programs, each data channel (43) being defined by a

sending port (45) and a receiving port (46) each associated with an application
program, and establishing the physical links necessary to implement the

logical network model in a physical network, transparently to the
application programs.
A method as claimed in claim 12 in which logical data channels have
both a channel type and a channel set name, channels of the same type and

set name in the same sharing set of applications forming a channel set (59) in
which data received over any channel of the set is dependent on data on

other channels of the set in accordance with predetermined properties
associated with the channel type.
A method as claimed in claim 13 in which a merged channel type is
defined whose predetermined properties are that data from the sending ports

of channels of a merged channel set is merged and delivered to at least one
receiving port at a target application as a single data stream.
A method as claimed in claim 14 in which in a merged channel set
including multiple sending and receiving ports, data channels are created

by the support system between all the cross connections of the sending
ports and the receiving ports.
A method as claimed in claim 13 in which a serialised channel type is
defined whose predetermined properties are that data from the sending ports

of a serialised channel set is combined and delivered to each of multiple
receiving ports in the channel set in the same serial order.
A method as claimed in claim 15 or claim 16 in which, in the case
where multiple sharing sets of application programs, each including merged

or serialised channel sets of the same name, are themselves combined to
form a larger sharing set, data channels not explicitly created by the

sharing applications are created by the support system between all the
cross connections of all the sending and receiving ports. 
A method as claimed in claim 17 in which an application program may
establish bi-directional communication with all members of an existing

sharing set whose members are connected by a merged or serialised channel
set by joining the set and creating a single merged channel of the same

channel set name between its own sending and receiving ports.
A method as claimed in claim 13 in which a synchronised channel type
is defined whose predetermined properties are that data on the different

channels of a synchronised channel set is time synchronised at each
receiving port of the channel set.
A method as claimed in claim 19 in which synchronisation is achieved
by insertion of synchronising signals at each sending port and removal of

the synchronising signals at each receiving port of the synchronised
channel set.
A method as claimed in claim 12 in which, in response to a
predetermined program call by a first application program through which

data is being transferred, via receiving and sending ports of the first
application, between two other applications, the receiving port of the

first application is reversibly directly connected to its sending port so
that the data transfer bypasses the first application program.
A method as claimed in claim 12 in which, in response to a
predetermined program call by a first application program through which

data is being transferred, via receiving and sending ports of the first
application, between two other applications, the receiving port of the

first application is permanently directly connected to its sending port so
that a direct data channel, in which the first application plays no further

part, is created between the two other applications.
</CLAIMS>
</TEXT>
</DOC>
