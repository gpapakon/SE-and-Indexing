<DOC>
<DOCNO>EP-0619547</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A method of requesting data and apparatus therefor.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F952	G06F1208	G06F1208	G06F1316	G06F1316	G06F1318	G06F1320	G06F1330	G06F1336	G06F1336	G06F13362	G06F1516	G06F1516	G06F15177	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F12	G06F12	G06F13	G06F13	G06F13	G06F13	G06F13	G06F13	G06F13	G06F13	G06F15	G06F15	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method of requesting data in a data processing system has 
the steps of receiving a plurality of requests for data by a request 

arbitrator (12) from a plurality of requesters (REQUESTER A, 
REQUESTER B, REQUESTER C), requesting a first portion of each 

request at a first time and requesting a second portion of each 
request at a second time. Each of the requests for data 

corresponds to a first portion of data. At least one of the requests 
also corresponds to a second portion of data. The first portions 

and second portion are requested according to a first and to a 
second predetermined order, respectively. The disclosed method 

requests a critical amount of data first for each request before 
any non-critical data portions are requested. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CODDINGTON JOHN D
</INVENTOR-NAME>
<INVENTOR-NAME>
CODDINGTON, JOHN D.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention generally relates to digital computing 
systems, and more specifically to protocols for data 
communications. One of the fundamental operations of a data processing 
system is a memory read operation. In a memory read operation, a 
data requester identifies a portion of data by an index, or an 
"address," and supplies the address to a memory system. The 
memory system then forwards an associated portion of data to the 
requester over one or more machine cycles. Initially, memory 
read operations were relatively simple operations. For instance, 
in the first generation of personal computers, the only data 
requesters were central processing units, the only memory 
systems were external banks of random access memory ("RAM") 
cells, and the only amount of data was a byte (8 bits). A RAM 
circuit could forward the single byte of data in a single machine 
cycle over a then typical eight-bit bus. Historically, the 
performance of each new data processing system eclipses the 
previous system's performance. Some of the most visible 
improvements between successive systems directly affect the 
complexity and scope of a memory read operation. Many of these 
improvements are especially significant to data processors that 
are integrated onto one or a few integrated circuits. Some of the improvements to data processing systems that 
affect data read instructions are multiple execution units, 
hierarchical memory systems and multi-processor architectures. 
Architectures incorporating multiple execution units typically  
 
execute two or more instructions simultaneously. These 
concurrent instructions may be slightly staggered in time with 
respect to each other, as in pipelining schemes, they may be 
aligned in time, as in the case of superscalar data processors, or 
both. Regardless, multiple execution units create multiple data 
requesters that may simultaneously require data. Typically, 
multiple execution units request data from a small, high speed 
memory cache. A high speed memory cache is part of a two-level 
hierarchical memory system. A cache is complemented with a 
large, slower block of external RAM. Together, the cache and 
external block of RAM provide fast efficient memory accesses. 
Multi-processor architectures implement schemes in which 
multi-processors may require data from a single block of external 
memory or in which one of the processors may require data within 
the memory cache of another processor. In all these scenarios, 
data read operations must account for multiple
</DESCRIPTION>
<CLAIMS>
A method of requesting data in a data processing system 
comprising the steps of: 

   receiving a plurality of requests for data by a request 
arbitrator from a plurality of requesters, each of 

the plurality of requests for data corresponding 
to a first portion of data, respectively, at least 

one of the plurality of requests for data indexing 
both a first portion of data and to a second 

portion of data; 
   at a first time, the request arbitrator requesting each 

first portion of the plurality of requests for data 
in a first predetermined order; and 

   at a second subsequent time, the request arbitrator 
requesting each second portion of data of the 

plurality of requests for data in a second 
predetermined order. 
A method of requesting data comprising the steps of: 
   receiving a plurality of requests for data by a request 

arbitrator from a plurality of requesters, each of 
the plurality of requests for data comprising a 

pair of sets of bits, each pair of sets of bits 
comprising a first and a second subset of bits, 

each of the first subsets indexing a first data 
value, each first subset of a pair of bits 

comprising each of the second subsets of bits, 
each second subset of bits comprising a 

predetermined number of bits; 
   at a first time, requesting each data value indexing 

each first subset of bits in a first predetermined 
order; and 

   at a second subsequent time, requesting at least one 
data value indexing at least one concatenation of 

one of a second subset of bits of a selected pair 
of sets of bits and a permutation of bits in a 

second predetermined order, the permutation of 
bits comprising the predetermined number of 

bits, the permutation of bits logically different 
from the second subset of bits of the selected 

pair of bits. 
A data processing system comprising: 
   a plurality of memory cells (14), each memory cell 

storing a data value; and 
   a request arbitrator (12) coupled to each of the 

plurality of memory cells, the request arbitrator 
receiving a plurality of requests for data, each 

of the plurality of requests for data indexing a 
first portion of one of the plurality of data 

values, at least one of the plurality of requests 
for data indexing a first portion of one of the 

plurality of data values and to a second portion 
of one of the plurality of data values, the request 

arbitrator requesting each first portion of the 
plurality of requests for data in a first 

predetermined order at a first time and 
requesting each second portion of data of the 

plurality of requests for data in a second 
predetermined order at a second subsequent 

time. 
</CLAIMS>
</TEXT>
</DOC>
