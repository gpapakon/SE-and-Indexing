<DOC>
<DOCNO>EP-0650613</DOCNO> 
<TEXT>
<INVENTION-TITLE>
DATA-PROCESSING SYSTEM WITH A DEVICE FOR HANDLING PROGRAM LOOPS.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F932	G06F932	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The invention concerns a data-processing system of the microprocessor type, with two pipeline levels comprising a device of executing an instruction sequence in a repetitive manner, comprising a program counter (74), and a program-address-start register (76) to record the number of the first instruction of the instruction sequence and a repeat counter (70) initialized at the time the first instruction of the instruction sequence is executed. The next-to-last instruction of the instruction sequence to be repeated contains an end-of-loop (EOL) code, which, when the last instruction of the loop is executed, directs that the contents of the program-address-start register (76) be loaded into the program counter (74) as long as the repeat counter is not at zero. The end-of-loop (EOL) code permits an important reduction in the circuits used and an increase in the speed of handling loops.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
TEXAS INSTRUMENTS FRANCE
</APPLICANT-NAME>
<APPLICANT-NAME>
TEXAS INSTRUMENTS INC
</APPLICANT-NAME>
<APPLICANT-NAME>
TEXAS INSTRUMENTS FRANCE
</APPLICANT-NAME>
<APPLICANT-NAME>
TEXAS INSTRUMENTS INCORPORATED
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHAUVEL GERARD
</INVENTOR-NAME>
<INVENTOR-NAME>
DENT PETER
</INVENTOR-NAME>
<INVENTOR-NAME>
WENZINGER YVES
</INVENTOR-NAME>
<INVENTOR-NAME>
CHAUVEL, GERARD
</INVENTOR-NAME>
<INVENTOR-NAME>
DENT, PETER
</INVENTOR-NAME>
<INVENTOR-NAME>
WENZINGER, YVES
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 DATA-PROCESSING SYSTEM WITH A DEVICE FOR HANDLING PROGRAM LOOPSThe present invention concerns data-processing systems of the microprocessor type, and in particular a data-processing system comprising an improved device for handling program loops of the type comprising a program-address-start register to record the number of the first instruction of the loop and a repeat counter initialized at the time the first instruction is executed with the number of repetitions to be made; the repeat counter is decremented at the end of each loop, and execution of the loop is repeated until it reaches zero. In another aspect, the data- processing system may include a status register containing status parameters that are a function of the results of arithmetic and logic operations and the updating of which depends on the program. The command program of the data-processing system may include instructions depending on parameters of the status register determined by the result of arithmetic and logic operations. In yet another aspect, a device for selectively reading/writing data, byte by byte, in the data-processing system is provided and comprises a data memory in which the memory locations each contain a predetermined number of bytes.During the past decade, informatics has invaded industrial technology. Data-processing systems now perform functions more rapidly and more precisely than humans. The advent of the microprocessor or, in general, the possibility of integrating a data-processing system on a single tiny chip, has permitted most of the equipment in any field to be automated and made more efficient.SUBSTITUTESHEET 

 These considerable steps in progress have been made possible thanks to the technology of manufacturing the elementary circuits that make up data-processing systems. This progress has permitted more and more intensive miniaturization, resulting in an enormous increase in the speed of instruction processing, even greater processing power, and a reduction in manufacturing costs from the use of identical elementary circuits, generally transistors, and a reduced consumption of the basic material of the circuits, silicon.In parallel with these improvements, mainly due to semiconductor technology, attempts have been made to improve data-processing systems by other means, such as a reduction of the logic circuits used for execution of instructions or a reduction of the operations necessary to execute the program. This is precisely a purpose of the present invention.Thus, a program of instructions for
</DESCRIPTION>
<CLAIMS>
Claims
1. A data-processing system, of which the functioning is directed by execution of a program composed of an instruction sequence, including a device for executing in a repetitive manner an instruction sequence within said instruction sequence, said device comprising a program counter 74 giving the number of the next instruction of the said instruction sequence, incremented at each of the instructions, a program-address-start register 76 for recording the number of the present instruction of the said instruction sequence, and a repeat counter 70, initialized at the time of the execution of the first instruction of the said instruction sequence with the number of times that execution of said instruction sequence is to be repeated, said repeat counter being decremented at the end of said instruction sequence and the execution of said sequence ending when said repeat counter is at zero; wherein one of the last instructions of said instruction sequence, the distance of which, from the last instruction, depends on the number of pipeline levels of said system, contains an end-of-loop (EOL) code, which directs that when the last instruction of said instruction sequence is executed, the contents of said program-address-start register 76 be loaded into said program counter 74, as long as said repeat counter is not at zero, in such a manner as to repeat execution of said instruction sequence a number of times equal to the contents of said repeat counter 70.
2. A system according to Claim 1, in which said end-of- loop (EOL) code is a bit in each instruction, having the binary value 1 in said one of the last instructions to direct loading of said program-address-start register 76 into said program counter
37
SUBSTITUTESHEET 


74 at the time of the execution of the last instruction in said instruction sequence to be repeated.
3. A system according to Claim 1 or 2, in which a two-level pipeline processor is used in such a way that the end-of-loop
(EOL) code is the next-to-last instruction of said instruction sequence to be repeated.
4. A system according to any of Claims 1, 2, or 3, including, an AND circuit 90 with two inputs, the first being connected to said repeat counter 70 to provide a 1 signal when said repeat counter is not at 0, the second input being provided by said end-of-loop (EOL) code and the output of the said AND circuit directing a change of a multiplexer 82 connected between said program-address-start register 76 and the program counter 74, so as to transfer the contents of said program counter at the time of execution of the last instruction of said instruction sequence after detection of the end-of-loop (EOL) code and when said repeat counter is not at zero.
5. A system according to any of the preceding claims, in which a branching instruction before the said one of the last instructions permits branching of the program to another instruction sequence terminating with detection of an end-of-loop (EOL) code in such a way that execution of the program is returned to the first instruction of said instruction sequence to be repeated, of which the number was transferred into said program counter when the said EOL code was detected.
6. A system according to Claim 4 or 5, in which said program counter 74, said program-address-start register 76, said repeat counter 70 and said multiplexer are registers in the said block of processing registers 18.
38
SUBSTITUTESHEET 


 7. A data-processing system, in which the function is directed by the flow of a program consisting of an instruction sequence comprising an arithmetic and logic unit 24 for executing operations determined by arithmetic and logic instructions and a status register 140 containing status parameters, the value of which depends on results of said operations performed by said arithmetic and logic unit; wherein said arithmetic and logic instructions include an updating field 146 and at least some of the status parameters N,Z,C of said status register 140 are updated only when said updating field 146 has a predetermined value.
8. A system according to Claim 7, in which said updating field 146 of each arithmetic and logic unit includes a single bit US, the value of which is set to 1 in an instruction to direct updating of said status register at the time said instruction is executed.
9. A system according to Claim 8, also including an AND circuit 148, of which the first input is provided by said bit US in the updating field 146 and a second input is a write signal W in said status register 140, this latter being updated when said bit US has the value 1, by status parameters resulting from an arithmetic and logic operation performed by the arithmetic and logic unit 24.
10. A system according to any one of Claims 7 to 9, in which said status parameters, updated when the bit US of said updating field is at 1, are an N bit indicating a negative result, a Z bit indicating a zero result, and a C bit indicating a carry.
11. A system according to any of Claims 7 to 10, in which the status register 140 is included in the system's block of
39
SUBSTITUTESHEET 


processing registers 18 and is used as a processing register by the program.
12. A data-processing system, the functioning of which is directed by the flow of a program composed of an instruction sequence, including an arithmetic and logic unit 24 for performing arithmetic and logic operations directed by the operation code of the instructions of said instruction sequence and a status register 250, containing status parameters, the value of which depends on operations performed by said arithmetic and logic unit; wherein the system includes a decoding circuit 14 of status parameters contained in said status register for modifying the operation code 242 of an instruction transmitted to the arithmetic and logic unit, depending on status parameters as a function of said parameters so as to provide a number of command codes equivalent to several alternative instructions, the execution of which depends on said status parameters, one of said command codes depending -on the value of said status parameters being transmitted to said arithmetic and logic unit in order for it to execute an arithmetic or logic operation associated with said command code.
13. A data-processing system according to Claim 12, wherein said status parameters used to modify the operation code (242) of an instruction depending on status parameters are N, which is at 1 when the result of the preceding operation is negative, Z when the result of the preceding operation is zero, and C, which is at 1 when the preceding operation has generated a carry.
14. A data-processing system according to Claim 13, wherein said decoding circuit is an EXCLUSIVE-OR circuit 260, of which the first input is provided by the status parameter N and the second input by one of the bits of the operation code of an
40
SUBSTITUTESHEET 


instruction depending on status parameters, the output of said EXCLUSIVE-OR circuit directing execution by said arithmetic and logic unit 24 of one of two possible operations determined by the value of said parameter N.
15. A data-processing system acording to Claim 14, wherein the two possible operations, the choice of which is determined by the value of said status parameter N, are addition and subtraction.
16. A device for reading data byte by byte in a data- processing system of the type comprising a selection register STAT, an address bus 16, and a data memory 22, of which the locations addressed by means of an address bus each contain a predetermined number of bytes; characterized by the fact that it includes a selection means 346, 350 which determines the end of each of said locations 344 at which the first byte of said predetermined number of bytes located in said selection register should be read in response to said selection bit B/L.
17. A read device according to Claim 16, in which said selection means includes a ones-complement circuit 346 connected as input to low-order lines AQ, A^ of said address bus, the other lines of which determine the address of said memory location 344, said ones-complement circuit inverting said low-order lines when said selection bit B/L is 1, and a multiplexer 350 determining at which part, the left end or right end of said memory location, the first byte of data should be read.
18. A read device according to Claim 17, in which each of said memory locations 344 contains 2 bytes, and said ones- complement circuit 346 is an EXCLUSIVE-OR circuit, one entry of which is said selection bit B/L and the other input is the low- order line AQ of the address bus 16, the output A'
Q
 of said
41
SUBSTITUTESHEET 


EXCLUSIVE-OR circuit being inverted when said selection bit is equal to 1 and unchanged when said selection bit is equal to 0.
19. A read device according to Claim 17, in which each of said memory locations 344 contains 4 bytes and said ones- complement circuit 346 is formed by two EXCLUSIVE-OR circuits, of which one of the two inputs is one of the low-order lines A'Q, A'I of said address bus 16, and the second input is said selection bit B/L, the output A'Q, A'I of each of said EXCLUSIVE- OR circuits being inverted when said selection bit is equal to 1 and unchanged when said selection bit is equal to 0.
20. A data-processing system including a read device according to any of Claims 16-19 and also including an incrementer INC for incrementing the address of an index register X in the case of indirect addressing, the reading of data in memory being possible either in the mode starting with the high- order byte or in the mode starting with the low-order byte, due to said read device.
21. A device for writing data byte by byte in a data- processing system of the type comprising a selection register STAT, an address bus 16, a data bus 26, and a data memory 22, the locations of which addressed by means of an address bus each contain a predetermined number of bytes; characterized by the fact that it includes a selection means 356, 360 which determines the end of each of said locations 354 at which the first byte of said predetermined number of bytes, provided on said data bus 26 should be written in response to said selection bit B/L.
22. A write device according to Claim 21, in which said selection means includes a ones-complement circuit 356 connected as input to low-order lines AQ, A^ of said address bus 16, the other lines of which determine the address of said memory
42
SUBSTITUTESHEET 


location, said ones-complement circuit inverting said low-order lines when said selection bit is 1, and a demultiplexer 360 determining at which part, the left end or right end of said memory location 354, the first byte of data should be written in response to the output lines A
Q
, A^ of said ones-complement circuit.
23. A write device according to Claim 22, in which each of said memory locations 354 contains two bytes, and said ones- complement circuit 356 is an EXCLUSIVE-OR circuit, one entry of which is said selection bit B/L and the other input is the low- order line A
Q
 of the address bus 16, the output A'Q of said EXCLUSIVE-OR circuit being inverted when said selection bit is equal to 1 and unchanged when said selection bit is equal to 0.
24. A write device according to Claim 22, in which each of said memory locations 354 contains 4 bytes and said ones- complement circuit 356 is formed by two EXCLUSIVE-OR circuits, of which one of the two inputs is one of the low-order lines AQ, A]_ of said address bus 16, and the second input is said selection bit B/L, the output A ' 
Q
 , A'χ of each of said EXCLUSIVE-OR circuits being inverted when said selection bit is equal to 1 and unchanged when said selection bit is equal to 0.
25. A data-processing system including a write device according to any of Claims 21-24 and also including an incrementer INC for incrementing the address of an index register X in the case of indirect addressing, the writing of data in memory can be done either in the mode starting with the high- order byte or in the mode starting with the low-order byte, thanks to said write device.
43
SUBSTITUTESHEET 

</CLAIMS>
</TEXT>
</DOC>
