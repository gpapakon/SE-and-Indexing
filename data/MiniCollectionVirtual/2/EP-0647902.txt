<DOC>
<DOCNO>EP-0647902</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A data processing system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F946	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The present invention provides a data processing system and method 
of operating such a system, where the system comprises an operating 

system (10), memory (20) controlled by the operating system (10) and a 
first process (30) having a first portion (50) of the memory (20) 

associated therewith. An allocation means (60) is provided, which is 
accessible by the first process, and is used to create an object in the 

first portion of memory (50). The system is characterised by: a 
designation means (80) for designating the first portion of memory as 

memory to be shared between a plurality of processes; and an 
identification means (90) to indicate to a second process (100) the 

location of the object in the first portion of memory. By this technique 
instances of objects can be shared between a plurality of processes. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CUNNINGHAM CONNEL G
</INVENTOR-NAME>
<INVENTOR-NAME>
O'ROURKE FERGHILL J
</INVENTOR-NAME>
<INVENTOR-NAME>
CUNNINGHAM, CONNEL G.
</INVENTOR-NAME>
<INVENTOR-NAME>
O'ROURKE, FERGHILL J.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a data processing system having a
message based environment in which 'objects' are created and utilised by
processes running on the system.A message based environment is used by Object Oriented Programming
(OOP) techniques, OOP being a particular approach to software development
which implements required functions by way of 'messages' sent to
'objects'. An 'object' is a software component that contains a collection
of related procedures (hereafter called 'methods') and data. Further
objects can be grouped into 'Object Classes', an object class being a
template for defining the methods and data for a particular type of
object. All objects of a given class are identical in form and behaviour
but have different data associated therewith.A 'message' is a signal sent to an object to request the object to
carry out one of its methods. Hence a message sent to an object will
cause a method to be invoked to implement the required function.When a process is running on a data processing system, there may be
a requirement at some stage for an 'instance' of an object to be created
for future use by the process. Typically the OOP environment in which the
process is running will have a standard operator defined for creating
instances of an object, and this operator would be expressed as part of
the process to indicate that the process requires a particular object to
be created. At the time that the process was initialised (or at some
other convenient time before an instance of an object is created) the OOP
environment would have obtained a block of memory from the operating
system of the data processing system for use by the process. Hence the
new object will be created in that piece of memory.Since the piece of memory would generally be private to the process
for which it was obtained, then the object instance created in that
memory will also be private to the particular process. However with the
increase in complexity of applications written in OOP languages, it is
becoming desirable for instances of objects to be accessible by processes
other than the process which has created that instance.Techniques are known for designating portions of memory as shared
memory, in which a plurality of processes can share data stored in that 
portion of memory. However these techniques do not allow instances of
objects, which consist not only of data but also methods, to be shared
between processes. The problem that arises is how to enable a process to
have access to the methods of an object
</DESCRIPTION>
<CLAIMS>
A data processing system comprising:

an operating system (10);
memory (20) controlled by the operating system (10);
a first process (30) having a first portion (50) of the memory (20)
associated therewith;
allocation means (60), accessible by the first process, for
creating an object in the first portion of memory (50);
the system being characterised by:
designation means (80) for designating the first portion of memory
as memory to be shared between a plurality of processes; and
an identification means (90) to indicate to a second process (100)
the location of the object in the first portion of memory.
A data processing system as claimed in Claim 1, wherein the
designation means (80) is activated by the first process (30) when the

first process is initialised.
A data processing system as claimed in Claim 2, wherein the
designation means (80) specifies the second process as being authorised

to access the first portion of memory.
A data processing system as claimed in any preceding claim, wherein
the identification means (90) indicates the location of the object by

placing a pointer to that object in an input queue defined by the second
process (100).
A data processing system as claimed in any preceding claim, wherein
the second process (100) is resident on another system connected via a

network with the data processing system.
A data processing system as claimed in any preceding claim wherein
the second process (100) is a database server process for administering 

requests to a database, and the first process is a client process of the
second process, the object created by the allocation means (60) being the

request for the database.
A data processing system as claimed in any preceding claim, wherein
a memory obtaining means is provided to obtain the first portion of

memory from the operating system for use by the plurality of processes.
A method of operating a data processing system comprising an
operating system (10), memory (20) controlled by the operating system

(10), and a first process (30) having a first portion (50) of the memory
(20) associated therewith, the method comprising the steps of:


invoking an allocation means (60), in response to the first
process, to create an object in the first portion of memory (50);
the method being characterised by the steps of:
operating a designation means (80) to designate the first portion
of memory as memory to be shared between a plurality of processes; and
in response to the first process, employing an identification means
(90) to indicate to a second process (100) the location of the object in

the first portion of memory (50).
</CLAIMS>
</TEXT>
</DOC>
