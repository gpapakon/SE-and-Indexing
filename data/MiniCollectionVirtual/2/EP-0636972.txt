<DOC>
<DOCNO>EP-0636972</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Booting a computer system using the last valid configuration
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F9445	G06F906	G06F100	G06F100	G06F906	G06F9445	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F1	G06F1	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The present invention provides a current set of 
configuration data to be used in a first attempt to boot the 

computer system, and the LastKnownGood set of configuration 
data which stores the last set of configuration data that 

successfully booted the computer system. The present 
invention first attempts to boot the computer system from the 

current set of configuration data. In response to an 
unsuccessful attempt to boot the computer system using the 

current set of configuration data, the present invention 
automatically boots the computer system using the 

LastKnownGood set of configuration data. In response to a 
successful boot of the computer system using the LastKnownGood 

set of configuration data, the present invention makes a new 
current set of configuration data that is equivalent to the 

LastKnownGood set of configuration data that successfully 
booted the computer system. In response to a successful boot 

from the current set or configuration data, the present 
invention makes a new LastKnownGood set of configuration data 

that is equivalent to the current set of configuration data 
which successfully booted the computer 
system. If boot 
appears to succeed to software, but fails in a way apparent to 

a human user, the system may be manually forced to use the 
LastKnownGood configuration set. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HINSLEY DAN ALVIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HOVEL DAVID OTTO
</INVENTOR-NAME>
<INVENTOR-NAME>
VERT JOHN DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLMAN BRYAN M
</INVENTOR-NAME>
<INVENTOR-NAME>
WONG RITA MANG CHEE
</INVENTOR-NAME>
<INVENTOR-NAME>
HINSLEY, DAN ALVIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HOVEL, DAVID OTTO
</INVENTOR-NAME>
<INVENTOR-NAME>
VERT, JOHN DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLMAN, BRYAN M.
</INVENTOR-NAME>
<INVENTOR-NAME>
WONG, RITA MANG CHEE
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to a method and
system for booting a computer, and more specifically, to a
method and system which ensures that the boot-up procedure
will always be successful.When a user starts a personal computer system,
the computer system goes through a complex set of
operations to make sure that all of its components are
working properly. This operation is but the first step in
an even more complicated process called the system boot-up
procedure (i.e., the boot). Booting the system activates
all of the computer system's components long enough to
load an operating system. The operating system is a
computer program that allows the computer system to use
other computer programs. Before attempting to load the
operating system, the computer system insures that the
system's input-output hardware, central processing unit,
and main memory are all functioning. This is accomplished
through the use of a power-on self-test, or Post.After the Post checks all of the hardware
components of the computer system, a boot program
contained in the computer's ROM BIOS chips checks drive A
of the computer to see if drive A contains a formatted
floppy disk. If a formatted floppy disk is positioned in
drive A, then the boot program loads the first sector of
the disk into memory and executes it. If there is no
formatted floppy disk in drive A, then the first sector on
the first hard drive is loaded into memory and executed.The first sector on the hard drive contains a
program that reads the partition table of the hard drive 
and determines which partition is marked active. The
first sector from the active partition is then loaded into
memory and executed.The first sector on the active partition or
floppy disk contains a program that searches for files
that comprise the first files of the operating system. On
most personal computer systems, the files are named IO.SYS
and MSDOS.SYS. On IBM computers, the two files are named
IO.SYS and IBMDOS.COM. For purposes of this discussion,
it will be assumed that the two system files are IO.SYS
and MSDOS.SYS. IO.SYS provides a low level interface to
the ROM BIOS device routines. MSDOS.SYS is the DOS
program itself and provides a high-level interface for
user programs. It consists of file management routines,
data blocking/deblocking for the disk routines, and a
variety of built-in functions easily accessible by user
programs. When these function routines are invoked by a
user program, they accept high-level information via
register and control block contents, then
</DESCRIPTION>
<CLAIMS>
A method in a computer system (100) for booting the computer system (100),
the method using a boot program (109), the boot program (109) utilizing in its

execution a selectable configuration profile (203, 206, 207), the method
comprising:


executing the boot program (109) using a first configuration profile; and
if execution of the boot program (109) using the first configuration profile
fails,


loading a second configuration profile, the second configuration
profile having been previously used by the boot program (109) to

successfully boot the computer system (100), and
executing the boot program (109) using the loaded second
configuration profile.
The method of claim 1 wherein the loaded second configuration profile is the
last configuration profile used by the boot program (109) to successfully boot

the computer system (100).
The method of claim 1 or 2 wherein the first and second configuration profiles
are each a set of device drivers (129).
The method of one of claims 1 to 3 wherein the first and second configuration
profiles are each a set of hardware devices.
The method of one of claims 1 to 4 wherein the boot program (109) attempts to
load particular device drivers (129) based upon the configuration profile used

further comprising:

determining that execution of the boot program (109) using the first 
configuration profile fails where an attempt by the boot program (109) to

load a device driver (129) fails.
The method of one of claims 1 to 4 wherein the boot program (109) attempts to
initialize particular device drivers (129) based upon the configuration profile

used, further comprising:

determining that execution of the boot program (109) using the first
configuration profile fails where an attempt by the boot program (109) to

initialize a device driver (129) fails.
The method of one of claims 1 to 6 wherein the second configuration profile is
stored in persistent storage, further comprising:


if execution of the boot program (109) using the first configuration profile
succeeds, replacing the second configuration profile stored in persistent

storage with the first configuration profile.
The method of one of claims 1 to 7, further comprising:

loading the first configuration profile.
The method of one of claims 1 to 8, further comprising:

dynamically determining the first configuration profile.
An apparatus for booting a computer system (100) using a boot program (109),
the boot program (109) utilizing in its execution a selectable configuration

profile (203, 206, 207), comprising:

means (127) for executing the boot program (109) using a first
configuration profile; and
means (113, 127) for loading a second configuration profile, the second
configuration profile having been previously used by the boot program (109) to

successfully boot the computer system (100), and executing the boot
program (109) using the loaded second configuration profile if execution

of the boot program (109) using the first configuration profile fails.
The apparatus of claim 10 wherein the loaded second configuration profile is 
the last configuration profile used by the boot program (109) to 
successfully
boot the computer system (100).
The apparatus of claim 10 or 11 wherein the first and second configuration
profiles are each a set of device drivers (129).
The apparatus of one of claims 10 to 12 wherein the first and second
configuration profiles are each a set of hardware devices.
The apparatus of one of claims 10 to 13 wherein the boot program (109)
attempts to load particular device drivers (129) based upon the configuration

profile used, further comprising:

means (121, 127) for determining that execution of the boot program (109)
using the first configuration profile fails where an attempt by the boot

program (109) to load a device driver (129) fails.
The apparatus of one of claims 10 to 13 wherein the boot program (109)
attempts to initialize particular device drivers (129) based upon the

configuration profile used, further comprising:

means (127, 139) for determining that execution of the boot program (109)
using the first configuration profile fails where an attempt by the boot

program (109) to initialize a device driver (129) fails.
The apparatus of one of claims 10 to 15 wherein the second configuration
profile is stored in persistent storage, further comprising:


means (127, 137) for replacing the second configuration profile stored in
persistent storage with the first configuration profile if execution of the

boot program (109) using the first configuration profile succeeds.
The apparatus of one of claims 10 to 16, further comprising:

means for loading the first configuration profile.
The apparatus of one of claims 10 to 17, further comprising:

means (111, 127) for dynamically determining the first configuration
profile.
</CLAIMS>
</TEXT>
</DOC>
