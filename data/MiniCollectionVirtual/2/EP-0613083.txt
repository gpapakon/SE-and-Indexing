<DOC>
<DOCNO>EP-0613083</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Transaction management in object oriented systems
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1516	G06F944	G06F1516	G06F946	G06F944	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F15	G06F9	G06F15	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
This disclosure describes a solution to this basic problem of transaction management for systems 
which use the object metaphor to define the interfaces between different components of a system. 

An elegant solution is described which defines a transaction manager protocol and process, 
which is independent of the operating system micro-kernel's interprocess communication activities. 

The object-oriented transaction manager ("TM") creates transactions, keeps track of all object 
managers (servers) that are a part of a transaction, and coordinates transaction termination among 

all objects that are involved in the transaction. In addition, operations by naive applications can be 
made to execute under transaction control without modifying the applications. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
SUN MICROSYSTEMS INC
</APPLICANT-NAME>
<APPLICANT-NAME>
SUN MICROSYSTEMS, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KHALIDI YOUSEF A
</INVENTOR-NAME>
<INVENTOR-NAME>
KHALIDI, YOUSEF A.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the fields of distributed computing systems, client-server
computing and object oriented programming. Specifically, the present invention is a method and
apparatus for providing program mechanisms which are independent of the operating system
kernel, to manage a transaction protocol in inter-client communications involving objects.Prior art methods for dealing with computer data processing system failures and system
recovery upon the detection of a failure, have been based upon the notion of a well defined transaction,
and a transaction management system. A transaction is defined as the execution of one or
more programs that include data and transaction operations. Transaction operations are start, commit
and abort. Start is an operation issued by a client to tell the system that a new transaction is about
to begin. Commit is an operation issued by a transaction manager to tell the system that the transaction
has terminated normally and all of its effects should be made permanent. Abort is an operation
issued by a program or object or object manager or another transaction manager to indicate that the
transaction terminated abnormally and all of its effects should be obliterated. Relatively formal systems
for dealing with transactions for both concurrency control and recovery operations are well
known and have been described in the art since the early 1960's. See for example, the text "Concurrency
Control and Recovery in Database Systems" by P. A. Bernstein, V. Hadzilacos and N. Goodman,
1987 Addison-Wesley Publishing Company.As computer data processing systems have become more widely distributed, such
systems result in a significantly more complicated set of failure modes, and the resulting need to deal
with these failures. However, reliable operation of distributed systems has generated more and more
system constraints on the application programmer to conform to transaction and recovery processing
ground rules imposed by the operating system. A key problem in Operating Systems development and maintenance is permitting the
introduction of new interfaces and implementation techniques in a way which allows clients and programmers
maximum flexibility without loading the operating system down with implementation
details. Moreover, this problem becomes more intense when developing object oriented operating
systems which have micro-kernel architectures. Such operating systems are typically extensible and
distributed. That is, such operating systems permit clients to implement
</DESCRIPTION>
<CLAIMS>
A method for managing transactions, performed by a computer
in a distributed computing system, having at least one client

program (40) and at least one sub-program (58, 60, 62), each
sub-program having an object implementor (38), said system

having at least one computer node (30), and each node having an
operating system kernel (32), said method comprising the steps

of:

providing a Transaction Manager (TM) (34) in each node,
said TM comprising mechanisms configured to provide control of

transaction assignment, transaction control, and commit and
abort voting in object-oriented distributed systems;
assigning a transaction identification (TID) value (52) to
a request from an originating client program (40) to create a

transaction and returning said TID value to the originating
client program;
the originating client program requesting at least one sub-program
to join as a participant in the transaction and the

originating client program passing a copy of said TID value to
said at least one participating sub-program;
the TM receiving a call-back object (54) from an object
implementor of said at least one participating sub-program, and

returning a transaction voting object (56) to said implementor,
thereby establishing a two-way communication path (64) between

the TM and the implementor of the at least one participating
sub-program;
said method steps enabling all participating sub-programs
to indicate whether said transaction was completed correctly,

without any required support of the operating system kernel.
The method of claim 1 wherein said implementors may notify
the TM to abort the transaction, without any required support of

the operating system kernel.
The method of claim 2 wherein said participating sub-programs
and said originating client program can be notified by

the TM of the completion status of said transaction, without any
required support of the operating system kernel.
The method of claims 1-3 wherein all programs, sub-programs
and implementors are objects.
The method of claims 1-4 wherein said object
implementations may notify the TM to abort the transaction,

without any required support of the operating system kernel.
The method of claims 1-4 wherein said participating objects
and said originating client program can be notified by the TM of

the completion status of said transaction, without any required
support of the operating system kernel.
The method of claims 1-4 comprising the additional step of
said TM returning a master voting object (50) containing the TID

value to said originating client program, in response to the
command to create a transaction, whereby said originating client 

program can query the TM as to the completion status of said
transaction without support from said operating system kernel.
The method of claims 1-4 wherein the step of said TM
receiving a call-back object from an object implementation of a

participating object results from said object implementation of
a participating object invoking the register_object_manager

command on the TID object, said TM being the object
implementation of the TID object.
The method of claim 
8
 wherein said at least one
participating object may be on any of the computer nodes in the

distributed computing system.
The method of claim 
9
 wherein an object implementation of
an object participating in said transaction may be on any of the

computer nodes in the distributed computing system.
The method of claim 
10
 wherein objects participating in
said transaction inherit from an object of type atomic.
The method of claim 
11
 wherein said objects which inherit
from said object of type atomic are invited to be participants

in said transaction by said originating client program by
invoking the join_transaction (TID) call on each of said object

of type atomic. 
The method of claim 12 wherein said participating objects which have been
joined to said transaction may be passed around to other client programs that do not

know that operations on these participating objects are part of a transaction.
The method of claim 7 comprising the additional step of invoking a create
sub-transaction call on one of said transaction voting mechanisms whereby a nested

transaction is created.
The method of claims 1-4 comprising the additional step of invoking a create
sub-transaction call on one of said transaction voting objects whereby a nested

transaction is created.
An apparatus for managing transactions in an object-oriented distribution

computing system, having at least one client program (40) and at least one object
(58, 60, 62), each object having an object implementation (38), said system having at

least one computer node (30), and each node having an operating system kernel
(32), said apparatus comprising:


a transaction manager (TM) (34) in each node, said TM comprising
mechanisms configured to provide control of transaction assignment, transaction

control, and commit and abort voting in object-oriented distributed systems;
said TM further comprising mechanisms configured to assign a transaction
identification (TID) value (52) to a request from an originating client program (40) to

create a transaction and a first communications mechanism configured to return a
TID object containing said TID value to the originating client program;
a requesting mechanism configured to be used by the originating client
program in requesting at least one object to join as a participant in the transaction

wherein said request passes a copy of said TID object to said at least one
participating object; and
a second communications mechanism configured to be used by the TM for
receiving a call-back object (54) from an object implementation of said at least one

participating object, and for returning a transaction voting object (56) to said object 
implementation, thereby establishing a two-way communication

path (64) between the TM and the object implementation of the at
least one participating object;
said apparatus operating to enable participating objects to
indicate whether said transaction was completed correctly,

without any required support of the operating system kernel.
The apparatus of claim 
16
 wherein said object
implementations may notify the TM to abort the transaction,

without any required support of the operating system kernel.
The apparatus of claim 
17
 wherein said participating
objects and said originating client program can be notified by

the TM of the completion status of said transaction, without any
required support of the operating system kernel.
The apparatus of claim 
16
 wherein said TM returns a master
voting object (50) containing the TID to said originating client

program in addition to said TID object, in response to the
command to create a transaction, whereby said originating client

program can query the TM as to the completion status of said
transaction without support from said operating system kernel.
The apparatus of claim 
19
 wherein said TM receiving a call-back
object from an object implementation of a participating

object results from said object implementation of a
participating object using said second communications means to

register said object implementation with said TM. 
The apparatus of claim 
20
 wherein said at least one
participating object may be on any of the computer nodes in the

distributed computing system.
The apparatus of claim 
21
 wherein an object implementation
of an object participating in said transaction may be on any of

the computer nodes in the distributed computing system.
The apparatus of claim 
22
 wherein objects participating in
said transaction inherit from an object of type atomic.
The apparatus of claim 
23
 wherein said objects which
inherit from said object of type atomic are invited to be

participants in said transaction by said originating client
program by invoking the join_transaction (TID) call on each of

said objects.
The apparatus of claim 
24
 wherein said participating
objects which have been joined to said transaction may be passed

around to other client programs that do not know that operations
on these participating objects are part of a transaction.
The apparatus of Claims 
16-25
 wherein said apparatus is a
computer program product having a computer readable medium

having a computer program recorded thereon 
The apparatus of claims 16-25 further comprising invoking means for
invoking a create sub-transaction call on one of said transaction voting objects

whereby a nested transaction is created.
</CLAIMS>
</TEXT>
</DOC>
