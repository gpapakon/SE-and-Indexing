<DOC>
<DOCNO>EP-0632403</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Handwritten symbol recognizer and method for recognising handwritten symbols
</INVENTION-TITLE>
<CLASSIFICATIONS>G06K946	G06F3048	G06K922	G06K968	G06F3041	G06K962	G06F3041	G06K922	G06F3048	G06K946	G06K962	G06K968	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06K	G06F	G06K	G06K	G06F	G06K	G06F	G06K	G06F	G06K	G06K	G06K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06K9	G06F3	G06K9	G06K9	G06F3	G06K9	G06F3	G06K9	G06F3	G06K9	G06K9	G06K9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A handwritten symbol recognizer adapted to automatically recognize various 
handwritten symbols including Kanji character is disclosed. The symbol recognizer includes 

a data processor coupled to a user interface that receives handwritten input symbols from a 
user and displays reference symbols determined by the symbol recognizer to correspond to 

the handwritten symbols. The data processor includes a memory unit which temporarily 
stores coordinate information representing features of the input symbols as received from the 

user interface. The data processor includes a symbol analyzer that retrieves the coordinate 
information from the memory unit and translates the coordinate information for each written 

feature into a feature code representing one of a predetermined number of feature models 
stored in the memory. The symbol analyzer also creates a geometric representation of the 

input symbol for comparison with one or more geometric models stored in the memory unit. 
The data processor also includes a label comparator adapted to compare the feature codes for 

the input symbol with feature codes of reference symbols stored in the memory unit and to 
identify the reference symbol or symbols having feature codes that most closely match the 

feature codes of the input symbol. The data processor also includes a geometric comparator 
that compares stored geometric models corresponding to the reference symbols most closely 

matching the input label with the geometric representation of the input symbol. The 
geometric comparator uses its comparison to identify the reference symbols whose geometric 

model or models most closely match the geometric representation of the input symbol. The 
reference symbol that most closely matches the handwritten input symbol, as determined by 

the label and geometric comparators, is sent to the user interface which displays the reference 
symbol to the user. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DAI XIWEI
</INVENTOR-NAME>
<INVENTOR-NAME>
DAI, XIWEI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to handwritten symbol recognition and
more particularly to recognition of symbols using individual features of the symbols
and the symbols as a whole.Various devices have been created to input data and other information
into a computer. Two of the most common such devices are a keyboard and a pointing
device such as a mouse. While such devices are capable of inputting numerous forms
of information, such devices have their limitations. The use of a keyboard is effectively
limited to those users who know how to type efficiently. Keyboards are normally
limited to a single language or character representation system and therefore are not
easily adaptable to users of differing nationalities. Perhaps the most important
limitation of keyboards is their relatively large size. With the advent of ever-smaller
computers such as palm-top and personal digital assistants (PDAs), the large size of the
keyboards renders them unacceptable for such computers.The drawbacks of the keyboard are magnified when using a large
alphabet language such as Chinese or Kanji. The number of Chinese/Kanji characters
needed to convey more than very basic information exceeds 2,000 characters and may
be as high as 50,000. The number of keys needed to input such numerous characters
makes Kanji and Chinese keyboards extremely cumbersome in terms of both size and
ease of use. Indeed, their use is limited to professionals given highly extensive training.Pointing devices such as mice alleviate some of the problems of
keyboards but have drawbacks of their own. In particular, pointing devices are
designed to be used in conjunction with a graphical user interface (GUI) to point to
various locations on a display screen. The GUI assigns predetermined functions to the
locations on the display screen. The actions of the pointing device are limited to the
predetermined functions of the GUI and are not easily extended to character input. In
addition, like keyboards, pointing devices typically are too large or awkward to be used
with small computers such as a palm-top computer.Given the inherent shortcomings of keyboards and pointing devices, a
large demand exists for input devices that can recognize symbols handwritten by a user. 
Symbol recognizers include two parts: a unit for converting the physical motions of a
handwriting implement into binary information processable by the computer and a
recognition unit for determining the meaning of the handwritten symbol. Numerous
well-known devices are available for converting
</DESCRIPTION>
<CLAIMS>
1.
 An automatic handwritten symbol recognizer that recognizes a
handwritten input symbol having sequential symbol portions written according to a

time sequential order, comprising:

a symbol analyzer (18) adapted to receive a time sequence of coordinate
information representing the sequential symbol portions of the input symbol according

to the time sequential order in which the sequential symbol portions were written,
to translate the coordinate information for each written sequential symbol portion into a

feature code representing one of a predetermined number of feature models (42), and to
produce an input label of feature codes ordered according to the time sequential order in which the symbol portions were written;

the symbol analyzer also being adapted to create a geometric representation of the input symbol, the
geometric representation including data representing positions of the symbol portions

of the input symbol;
a memory (16) storing reference symbol information including a
plurality of label models and a plurality of geometric models, each label model

including a plurality of feature codes in a predetermined order and corresponding to
one of the geometric models, each geometric model storing data representing positions

of symbol portions of a reference symbol represented by the geometric model;
a label comparator (20) adapted to compare the input label with the label
models without regard for positions of the symbol portions represented by the feature

codes of the input label and to identify a most closely matching subset of the stored
label models by identifying the label model or models that most closely match the

input label regardless of the positions of the symbol portions represented by the
feature codes of the input label; and
a geometric comparator (22) adapted to compare only the geometric models
corresponding to the label models of the most closely matching subset with the 

geometric representation of the input symbol and to identify the geometric model or
models that most closely match the geometric representation of the input symbol.
2.
 The handwriting recognizer of claim 1 wherein the symbol
analyzer (18) is adapted to translate the coordinate information for each written

symbol portion into a feature code representing one of thirteen feature models.
3.
 The handwriting recognizer of claim 1 wherein the symbol
analyzer (18) includes means for vectorizing the coordinate information into a time

sequence of vector codes representing vector information of the symbol portions.
4.
 The handwriting recognizer of claim 3 wherein the symbol
analyzer (18) includes a filter for detecting anomalous vector codes that represent an

irregular portion of an otherwise straight line of the input symbol and changing the
anomalous vector codes to remove the irregular portion.
5.
 The handwriting recognizer of claim 3 wherein the symbol
analyzer (18) includes means for translating a portion of the vector codes into one of

the feature codes.
6.
 The handwriting recognizer of claim 1 wherein the symbol
analyzer (18) includes a hook filter for detecting and removing a hook occurring at an

end portion of a pen stroke of the input symbol.
7.
 The handwriting recognizer of claim 6 wherein the symbol
analyzer (18) includes means for vectorizing the coordinate information into a

plurality of vector codes representing vector information of the symbol portions and
wherein the hook filter is structured to detect and remove the hook if the number of 

vector codes created for the end portion of the pen stroke is less than a predetermined
fraction of the number of vector codes created for the entire pen stroke.
8.
 The handwriting recognizer of claim 1 wherein the symbol
analyzer (18) includes means for creating the geometric representation of the input

symbol by saving a subset of the coordinate points of each symbol portion and
discarding the remaining coordinate points of the symbol portions.
9.
 The handwriting recognizer of claim 8 wherein the subset saved
is limited to two coordinate points for each symbol portion with one of the two

coordinate points being an end point of the symbol portion.
11.
 The handwriting recognizer of claim 1 wherein the label
comparator (20) includes:


means for rearranging the order of the feature codes of the input label
after the geometric representation of the input symbol corresponding to the input label

is compared by the geometric comparator and for comparing the rearranged input label
to the label models.
12.
 The handwriting recognizer of claim 1 wherein the label
comparator (20) includes means for comparing the input label only with label models

having the same number of feature codes as the input label during a first pass.
13.
 The handwriting recognizer of claim 1 wherein the label
comparator (20) includes means for comparing the input label only with label models

having the same number of feature codes as the input label during a first pass and
wherein the label comparator includes means for comparing the input label with label

models having one more or one less feature code than the input label during a second
pass. 
14.
 The handwriting recognizer of claim 1 wherein the label
comparator (20) includes means for identifying a score for each comparison of the

input label with one of the label models and means for saving the scores that satisfy a
predetermined label threshold.
15.
 The handwriting recognizer of claim 1 wherein the geometric
comparator (22) includes means for computing a Euclidean vector distance for each

geometric model, the Euclidean vector distance representing how closely the
geometric model matches the geometric representation of the input symbol.
16.
 The handwriting recognizer of claim 15 wherein the geometric
representation of the input symbol is limited to two coordinate points for each feature

and the means (22) for computing a Euclidean vector distance computes the Euclidean
vector distance for a selected geometric model by determining a distance between each

of the two coordinates points for each symbol portion and corresponding coordinate
points for the selected geometric model.
17.
 The handwriting recognizer of claim 15, further including output
means (26) for causing to be displayed one of the geometric models whose Euclidean

vector distance satisfies a geometric threshold.
18.
 A computerized method of recognizing a handwritten input
symbol having symbol portions written according to a time sequential order,

comprising:

receiving a time sequence of coordinate information representative of
the input symbol; 
translating (40) the coordinate information into an input label of one or
more feature codes (42), each feature code representing one of a predetermined

number of feature models and ordering the feature codes of the input label according to the time sequential order in which the symbol portions of the input symbol were handwritten;
comparing (48) the input label to a plurality of stored label models according to the time sequential order in which the symbol portions of the input symbol were handwritten and without regard for positions of the symbol portions represented by the feature codes of the input label; each
label model corresponding to a stored geometric model, each geometric model

including data representing positions of symbol portions of a reference symbol
represented by the geometric model;
creating a geometric representation of the input symbol, the geometric
representation including data representing positions of symbol portions of the input

symbol;
identifying (48) a most closely matching subset of the stored label
models by identifying the label model or models most closely matching the input label

regardless of the positions of the symbol portions represented by the feature codes of
the input label;
comparing (52) only the geometric models corresponding to the label
models of the most closely matching subset with the geometric representation of the

input symbol; and
identifying (52) the geometric model or models that most closely
matches the input symbol geometric representation.
19.
 The method of claim 18 wherein the translating step (40) includes
translating the coordinate information for each written feature into a feature code

representing one of thirteen feature models.
20.
 The method of claim 18 wherein the translating step (40) includes
vectorizing the coordinate information into a time sequence of vector codes

representing vector information of the features.
21.
 The method of claim 20 wherein the translating step (40) includes
detecting anomalous vector codes that represent an irregular portion of an otherwise

straight line of the input symbol and changing the anomalous vector codes to remove
the irregular portion.
22.
 The method of claim 20 wherein the translating step (40) includes
translating a portion of the vector codes into one of the feature codes.
23.
 The method of claim 18 wherein the translating step (40) includes
detecting and removing a hook occurring at an end portion of a pen stroke of the input

symbol.
24.
 The method of claim 23 wherein the detecting step includes:

vectorizing the coordinate information into a plurality of vector codes
representing vector information of the symbol portions; and
identifying an unintended hook if the number of vector codes created for
the end portion of the pen stroke is less than a predetermined fraction of the number of

vector codes created for the entire pen stroke.
25.
 The method of claim 18 wherein the translating step (40) includes
saving a subset of the coordinate points of a feature and discarding the remaining

coordinate points of the feature.
26.
 The method of claim 25, further including limiting the subset
saved to two coordinate points, one of the two coordinate points being an end point of

the feature.
27.
 The method of claim 18 wherein the translating step (40)
includes:


rearranging the order of the feature codes of the input label after the
input symbol geometric representation corresponding to the input label is compared to

the geometric models; and
comparing the rearranged input label to the label models.
28.
 The method of claim 18 wherein the comparing labels step (48)
includes comparing the input label only with label models having the same number of

feature codes as the input label during a first pass.
29.
 The method of claim 18 wherein the comparing labels step (48)
includes comparing the input label to a plurality of stored label models having the

same number of feature codes as the input label during a first pass and comparing the
input label with label models having one more or one less feature code during a

second pass.
30.
 The method of claim 18 wherein the comparing labels step (48)
includes identifying a score for each comparison of the input label with one of the

label models and saving the scores that satisfy a predetermined label threshold. 
31.
 The method of claim 18 wherein the geometric comparing step
(52) includes computing a Euclidean vector distance for each geometric model, the

Euclidean vector distance representing how closely the geometric model matches the
geometric representation of the input symbol.
32.
 The method of claim 32 wherein the geometric representation
created is limited to exactly two coordinate points for each feature and the step (52) of

computing a Euclidean vector distance includes computing the Euclidean vector
distance for a selected geometric model by determining a distance between each of the

two coordinates points for each feature and corresponding coordinate points for the
selected geometric model.
33.
 The method of claim 33, further including displaying (56) one of
the geometric models whose Euclidean vector distance satisfies a geometric

comparison threshold.
</CLAIMS>
</TEXT>
</DOC>
