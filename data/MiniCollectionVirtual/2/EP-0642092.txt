<DOC>
<DOCNO>EP-0642092</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Parallel database system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F306	G06F306	G06F946	G06F950	G06F1200	G06F1200	G06F1730	G06F1730	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F3	G06F3	G06F9	G06F9	G06F12	G06F12	G06F17	G06F17	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method and system are provided for determining a set of tables 
62, 64 from which data can be redistributed between nodes 61, 63 in a 

parallel database. First, a list of candidate tables from those stored 
in the memories associated with a plurality of nodes in the parallel 

database is established. The list is ordered according to a workload of 
each of the candidate tables. Next, each of the candidate tables is 

tested to determine whether it can be scanned at each of the plurality of 
nodes at which the candidate table is stored within a predetermined time 

period. Any candidate table which can be scanned within the 
predetermined time period is added to the set of tables from which data 

can be redistributed. Once the set of tables for redistribution are 
established, data sets, or buckets, within the redistribution tables are 

selected. The selected buckets are redistributed from the plurality of 
nodes to a receiving node 71. The receiving node is a new node to the 

parallel database system or an underutilized node in the parallel 
database system. 


 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
LI SHIH-GONG
</INVENTOR-NAME>
<INVENTOR-NAME>
LI SHIH-GONG
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to data redistribution in a Parallel 
Data Base System. Databases have become the subject of significant recent interest, 
not only because of the increasing volume of data being stored and 
retrieved by computerized databases but also by virtue of the data 
relationships which can be established during the storage and retrieval 
processes. In the last decade, database system developers have turned their 
attention toward parallel processing platforms, because a parallel 
processing system's cost/performance ratio is often superior to that 
of conventional mainframes. Set-oriented database systems, like 
relational database systems, are particularly well-suited to parallel 
processing since the database can be spread across the multiple computers 
or "nodes" in the system, and requests against the database can thus be 
executed in parallel. A generic parallel database system is characterized 
by a cluster of powerful, inexpensive microprocessor-based computers, 
each of which includes one or more disk storage devices with high 
performance and capacity. The nodes are interconnected using a shared 
communication medium. The cluster uses standard "off the shelf" 
microprocessor and workstation hardware products to take advantage of the 
high performance, lower cost, and higher reliability found in commodity 
components. When the database size or workload grows nears the capacity 
of the system, more nodes can be added to extend that capacity. In such a system, the database is distributed across the nodes; each 
node stores a fraction of the database. Likewise, the workload is 
distributed across the nodes: requests are sent to the nodes that 
contain the desired data and are executed there. Consequently, data 
placement determines how well the workload is balanced across the 
nodes, and how well the system performs as a whole. In many cases, the 
best performance can be obtained by spreading the workload as evenly as 
possibly across all of the nodes. However, in an initially balanced 
system, the type and frequency of requests will change over time, data  
 
will be added to and deleted from the database over time, causing the 
workload to shift over time. Eventually, the system will become imbalanced across the nodes. 
Thus, the data will occasionally have to be redistributed to rebalance 
the load. Also, as nodes are added to or deleted from the system, the 
data will have to be redistributed across the new number of nodes. In a Parallel Database (PDB) System, data records
</DESCRIPTION>
<CLAIMS>
A method for redistributing data between the nodes of a parallel 
database system concurrently with other database activities, said method 

comprising the steps of: 
   identifying data capable of being redistributed from at least one 

source node to a destination node in a predetermined time period allotted 
for said redistributing; and 

   redistributing the data from said at least one source node to said 
destination node within said predetermined time period. 
A method as claimed in Claim 1, wherein said identifying step 
comprises the steps of: 

   establishing a list of candidate tables stored at said at least one 
source node, the list being ordered in accordance with the workload of 

each of the candidate tables; 
   determining whether each of the candidate tables can be scanned 

within said predetermined time period; and 
   adding any candidate table which can be scanned within the 

predetermined time period to a set of tables from which can be selected 
the data capable of being redistributed. 
A method as claimed Claim 1 or 2, wherein said destination node is 
a new node to the parallel database system. 
A method as claimed in Claim 1 or 2, wherein said destination node 
is an underutilized node in the parallel database system. 
A parallel database system having a plurality of nodes, and 
including means for redistributing data between the nodes concurrently 

with other database activities comprising: 
   means for identifying data capable of being redistributed from at 

least one source node to a destination node in a predetermined time 
period allotted for said redistributing; and 

   means for redistributing the data from said at least one source 
node to said destination node within said predetermined time period. 
A parallel database system as claimed in Claim 5, wherein said 
means for identifying comprises: 

   means for establishing a list of candidate tables stored at said at 
least one source node, the list being ordered in accordance with the 

workload of each of the candidate tables; 
   means for determining whether each of the candidate tables can be 

scanned within said predetermined time period; and
 

   means for adding any candidate table which can be scanned within 
the predetermined time period to a set of tables from which can be 

selected the data capable of being redistributed. 
A parallel database system as claimed in Claim 5 or 6, wherein said 
destination node is a new node to the parallel database system. 
A parallel database system as claimed in Claim 5 or 6, wherein said 
destination node is an underutilized node in the parallel database 

system. 
</CLAIMS>
</TEXT>
</DOC>
