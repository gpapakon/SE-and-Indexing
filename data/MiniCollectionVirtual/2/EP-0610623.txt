<DOC>
<DOCNO>EP-0610623</DOCNO> 
<TEXT>
<INVENTION-TITLE>
File locking based on bad disk sectors.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F100	G06F100	G06F2100	G06F2100	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F1	G06F1	G06F21	G06F21	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method for locking software programs to a particular disk 
(306) includes the steps of determinating the bad sectors on 

the hard disk the software is installed on, 
comparing this information to the actual bad sectors on the 

hard disk the software is presently installed on (1310), and if 
the hard disk (306) is the same, then allowing the software 

program to execute. This program locking 
method permits the distribution of trial copies of software 

programs and limits the risk that the program 
will be copied to other computers. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SIGNH JITENDRA KUMAR
</INVENTOR-NAME>
<INVENTOR-NAME>
SIGNH, JITENDRA KUMAR
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to computers and in particular to a 
method for preventing the unauthorized use of software programs on 
computers incorporating hard disks. In the last fifteen years the software market for computers 
has grown tremendously and along with this growth has come the need 
for the mass distribution of software programs. As many of the 
programs developed for personal computers are costly, the 
prospective buyers want to be able to test the program before they 
buy it and they want to test the program on their computer in their 
home or office. Unfortunately software piracy is wide spread and 
costs the producers and suppliers of software programs millions of 
dollars annually. So there needs to be a method whereby software 
can be distributed to prospective purchasers on a trial basis 
while, at the same time, protecting the rights of the software 
suppliers. Prior art methods have been developed to try to protect 
software however they have not meet with acceptance by both the 
software suppliers and the users. Some of the prior art methods 
required additional hardware which increased the cost of the 
product and made the use of the product inconvenient for the user. 
Other methods required a special floppy disk to be in a disk drive  
 
for the software to work. However, users disliked having to keep 
track of the floppy disk. What is needed in the industry is a method for distributing 
trial software to users that allows the users to conveniently test 
the software while, at the same time, protecting the interests of 
the software suppliers. The present invention provides a method whereby trial versions 
of software programs can be widely distributed to prospective users 
while, at the same time, preventing copying or unlimited use of the 
programs. The users are thus able to test the programs on their 
particular computer systems and use the programs as they would if 
they bought the programs. In a preferred embodiment of the present invention, the user 
is given an encrypted version of the application program the user 
requests and an installation program. The installation program 
further encrypts, renames and loads the application program onto a 
hard disk in the user's computer system. In addition, the install 
program creates one or more randomly named files which are also 
loaded onto the hard disk. Each of the random files contain the 
location, on the hard disk, of the application program, the other 
random files and its own disk location. Also, the random files 
contain
</DESCRIPTION>
<CLAIMS>
A method for locking software (Fig.3 : STEP 1), to a 
specific magnetic disk (306) having bad sectors, comprising the 

steps of: 

a) detecting a location of a magnetic disk bad sector at a 
first point in time (Fig.5 STEP 8); and 
b) detecting the current location of the magnetic disk bad 
sector (1310) and allowing use of the software (1108) when 

the location of the magnetic disk bad sector detected at the 
first point in time matches the current location of the 

magnetic disk bad sector. 
A method as in claim 1 further comprising the steps of: 

a) storing the location of the magnetic disk bad sector, 
detected at the first point in time (Fig.5: STEP 8) in a 

storage device (306); and 
b) recalling the stored location (1308) from the storage device 
(306) and using the recalled location to match against the 

current location of the magnetic disk bad sector (1310). 
A method as in claim 2 further comprising the steps of: 

a) encrypting the location of the magnetic disk bad sector 
(Fig.5 STEP 8) and storing the encrypted location in the 

storage device (306); and 
b) decoding the recalled location (1308) before the recalled 
location is matched against the current location of the 

magnetic disk bad sector. 
A method for locking software (Fig.3 STEP 1), to a specific 
magnetic disk (306) having sectors, comprising the steps of: 


a) marking a sector, having a location, as bad; and 
b) detecting if the sector is currently marked as bad (1310) 
and allowing use of the software if the sector is currently 

marked as bad. 
A method as in claim 4 further comprising the steps of: 

a) storing the location of the marked bad sector in a storage 
device (306); and 
b) recalling the stored location (1308) from the storage device 
(306) and using the recalled location (1310) of the marked 

bad sector to identify the specific sector marked as bad. 
A method as in claim 4 further comprising the steps of: 

a) storing data in the sector marked as bad; 
b) recalling data currently stored in the sector (1308); and 
c) comparing the stored data with the recalled data (1310) and 
allowing use of the software when the stored data and 

recalled data match. 
A method for locking software (Fig.3: STEP 1) to a storage 
device (306) having a substantially unique characteristic, 

comprising the steps of: 

a) detecting a unique characteristic of the storage device 
(Fig.5: STEP 8) at a first point in time; and 
b) comparing the unique characteristic of the storage device 
with the current characteristics of the current storage 

device (1310) and allowing use of the software when the 
current characteristics of the current storage device 

include the unique characteristic of the storage device. 
A method as in claim 7 further comprising the steps of: 

a) storing information identifying the unique characteristic in 
a storage device (Fig.5: STEP 9); and 
b) recalling the stored information from the storage device 
(1308) and using the recalled information to determine if 

the current characteristics of the current storage device 
include the unique characteristic (1310). 
A method as in claim 8 further comprising the steps of: 

a) encrypting the information identifying the unique 

characteristic (Fig.5: STEP 8) and storing the encrypted 
information (Fig.5 : STEP 9) in the storage device (306); 

and 
b) decoding the information recalled from the storage device 
and using the decoded information to determine if the 

current characteristics of the current storage device include 
the unique characteristic (1310). 
</CLAIMS>
</TEXT>
</DOC>
