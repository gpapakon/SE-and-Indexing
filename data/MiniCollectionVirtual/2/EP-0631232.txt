<DOC>
<DOCNO>EP-0631232</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Integration of systems management services with an underlying system object model
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F954	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A systems management subsystem provides resources 
for managing components and allows components to be 

manageable. In particular, state information about managed 
components is encapsulated into objects that are visible in 

the global name space. The state of a single component may be 
partitioned into subcomponents that are stored in separate 

objects. These objects may, in turn, be encapsulated into a 
single container object that is associated with the managed 

component. By placing the state information in the global 
name space, local processes and remote processes may both gain 

access to internal state information and properly manage the 
component. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BLANFORD MARK S
</INVENTOR-NAME>
<INVENTOR-NAME>
HEIZER ISAAC J
</INVENTOR-NAME>
<INVENTOR-NAME>
SAHNI ANIRUDH A
</INVENTOR-NAME>
<INVENTOR-NAME>
SEAMAN MICHAEL R C
</INVENTOR-NAME>
<INVENTOR-NAME>
BLANFORD, MARK S.
</INVENTOR-NAME>
<INVENTOR-NAME>
HEIZER, ISAAC J.
</INVENTOR-NAME>
<INVENTOR-NAME>
SAHNI, ANIRUDH A.
</INVENTOR-NAME>
<INVENTOR-NAME>
SEAMAN, MICHAEL R.C.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to data
processing systems and, more particularly, to the
integration of system management services with an
underlying system object model.In order for system management functions to
properly perform their intended roles, the functions must
be able to monitor the internal state of components that
they manage. Conventional systems have not had access to
the internal state of managed components. As a result, it
has often been difficult for conventional systems to
properly manage the components. Certain conventional
systems have attempted to increase access to information
concerning managed components by adding a separate
framework and access technique for the internal state
information. Such conventional systems, however, have not
made the internal state information generally available
through standard user-visible system interfaces and human
interfaces. Z. Hong and W. McCoy, An associated object model for distributed
systems, Operating Systems Review (SIGOPS), October 1990, vol. 24, no. 4, pages
34 to 51, describe a model for supporting distributed applications, named Associated
Object Model, wherein multi-objects can communicate with each other through an
abstract association, improving the operation of distributed application objects
(DAO). A mechanism, named Broker, supports establishment and maintenance of
associations between cooperating DAOs. In the model, the broker is designed to
support multi-object locating. The broker builds and manages derivative
associations between cooperating DAOs the broker is intermediary between DAOs
in the system, and a Local Broker is present at every site where some DAOs exist.
Functions of a Local Broker comprise building an association that includes the
corresponding members, providing a reliable data transfer mechanism, carrying out
a mapping from local name to global name, guaranteeing the uniqueness of global
names, and providing mechanisms for recovering from failures.It is the object of the invention to provide a distributed system wherein
components may be managed in an efficient and convenient manner, and a method
of operating the distributed system.This object is solved by a method as claimed in independent claim 1, a
computer-readable medium as claimed in claim 18, and a distributed system as
claimed in independent claim 19. Preferred embodiments of the invention are
subject-matters of dependent claims.In accordance with a first aspect of the present
invention, a method is practiced in a distributed system
having at
</DESCRIPTION>
<CLAIMS>
A method of operating a distributed system (10), the distributed system (10)
comprising a memory device (16) for storing objects, a processor (14) for

running a process and a managed component with an internal state, the
method comprising the steps of:


making objects in a distributed name space (28) visible to the process

characterized by
storing the internal state of the managed component as an object in the
memory device (16); and
accessing the object to gain access to the internal state of the managed
component by the process.
The method as claimed in claim 1 wherein:

the object supports an interface for accessing the object.
The method as claimed in claim 1 or 2 wherein:

the object supports an interface for querying whether the object supports
a particular interface, the interface being referred to as IUnkown interface.
The method as claimed in one of claims 1 to 3 wherein:

the object supports an interface for binding a moniker to the object, the
interface being referred to as IMoniker interface, and the moniker

comprising a pointer to an object.
The method as claimed in one of claima 1 to 4, further comprising the step of: 

storing a system management object for managing the managed
component in the memory device (16).
The method as claimed in claim 5, further comprising the step of:

managing the managed component using the system management object.
The method as claimed in one of claims 1 to 6, further comprising the step of:

providing a name service for organizing the names of objects in the
distributed name space (28).
The method as claimed in one of claims 1 to 7, further comprising the steps of:

partitioning the managed component into multiple subcomponents, each
subcomponent having an internal state; and
storing the internal state of each of the subcomponents in a separate
object in the memory device (16), each object being visible in the

distributed name space (28) to the process.
 
The method as claimed in claim 8, further comprising the step of:

encapsulating the objects which store the internal states of the
subcomponents into the object that stores the internal state of the

managed component so that the objects which store the internal states of
the subcomponents may be accessed through the object that stores the

internal state of the managed component.
 
The method as claimed in one of claims 1 to 8 wherein:

the distributed system (10) further comprises:

a second managed component with an internal state; and
 
 
 
the method further comprises the step of:

storing the internal state of the second managed component as an

object in the memory device (16), the object being visible in the
distributed name space (28) to the process.
The method as claimed in one of claims 1 to 10 wherein: 

the distributed system (10) further comprises:

a remote procedure call facility,
a first data processing system (11) comprising the processor (14),
and
a second data processing system (11) comprising the memory
device (16); and
the method further comprises the steps of:

requesting access in the process to the internal state of the
component, and
in response to the step of requesting access, performing a remote
procedure call using the remote procedure call facility for performing

the step of accessing the object on behalf of the process.
The method as claimed in one of claims 1 to 11 wherein:

the managed component is a program; and
the method further comprises the steps of:

declaring a variable in the program to be a variable that is
accessible in the distributed name space (28),
running the program so that a value is assigned to the variable, and
storing the value of the variable in the object.
The method as claimed in claim 12 wherein:

the variable is a counter; and
the step of running the program further comprises the step of:

incrementing the variable by a predetermined quantity.
The method as claimed in claim 12 or 13 wherein:

the step of running the program further comprises the step of:

assigning a value specifying the state of the program to the variable.
The method as claimed in one of claims 1 to 10 wherein:

the managed component is a data processing resource; and
the method further comprises the step of:

modeling the data processing resource as an object.
The method as claimed in claim 15 wherein:

the data processing resource comprises a hardware component.
The method as claimed in claim 15 or 16 wherein:

the data processing resource comprises a software component.
A computer-readable medium comprising instructions for implementing the
computerized method as claimed in one of claims 1 to 17.
A distributed system (10), comprising:

means for making objects in a distributed name space (28) visible to a
process

characterized by
a memory device (16) for storing objects;
a processor (14) for running the process;
a managed component with an internal state;
means for storing the internal state of the managed component as an
object in the memory device (16); and
means for accessing the object to gain access to the internal state of the
managed component by the process.
The distributed system (10) as claimed in claim 19 wherein:

the object supports an interface for accessing the object
The distributed system (10) as claimed in claim 19 or 20 wherein:

the object supports an interface for querying whether the object supports
a particular interface the interface being referred to as IUnkown interface
The distributed system (10) as claimed in one of claims 19 to 21 wherein:

the object supports an interface for binding a moniker to the object, the
interface being referred to as IMoniker interface, and the moniker

comprising a pointer to an object.
The distributed system (10) as claimed in one of claims 19 to 22, further
comprising:


means for storing a system management object for managing the
managed component in the memory device (16).
The distributed system (10) as claimed in claim 23, further comprising:

means for managing the managed component using the system
management object.
The distributed system (10) as claimed in one of claims 19 to 24, further
comprising:


means (24) for providing a name service for organizing the names of
objects in the distributed name space (28).
The distributed system (10) as claimed in one of claims 19 to 25, further
comprising:


means for partitioning the managed component into multiple
subcomponents, each subcomponent having an internal state; and
means for storing the internal state of each of the subcomponents in a
separate object in the memory device (16), each object being visible in the

distributed name space (28) to the process.
The distributed system (10) as claimed in claim 26, further comprising:

means for encapsulating the objects which store the internal states of the
subcomponents into the object that stores the internal state of the

managed component so that the objects which store the internal states of
the subcomponents may be accessed through the object that stores the

internal state of the managed component.
The distributed system (10) as claimed in one of claims 19 to 27, further
comprising:


a second managed component with an internal state; and
means for storing the internal state of the second managed component as
an object in the memory device (16), the object being visible in the

distributed name space (28) to the process.
The distributed system (10) as claimed in one of claims 19 to 28, further
comprising:


a remote procedure call facility;
a first data processing system (11) comprising the processor (14);
a second data processing system (11) comprising the memory device
(16);
means for requesting access in the process to the internal state of the
component; and
means for, in response to the means for requesting access, performing a
remote procedure call using the remote procedure call facility for

operating the means for accessing the object on behalf of the process.
The distributed system (10) as claimed in one of claims 19 to 29 wherein:

the managed component is a program; and
the distributed system (10) further comprises:


means for declaring a variable in the program to be a variable that is
accessible in the distributed name space (28),
means for running the program so that a value is assigned to the
variable, and
means for storing the value of the variable in the object.
The distributed system (10) as claimed in claim 30 wherein:

the variable is a counter; and 
the means for running the program further comprises:

means for incrementing the variable by a predetermined quantity.
The distributed system (10) as claimed in claim 30 or 31 wherein:

the means for running the program further comprises:

means for assigning a value specifying the state of the program to
the variable.
The distributed system (10) as claimed in one of claims 19 to 29 wherein:

the managed component is a data processing resource; and
the distributed system (10) further comprises:

means for modeling the data processing resource as an object.
The distributed system (10) as claimed in claim 33 wherein:

the data processing resource comprises a hardware component.
The distributed system (10) as claimed in claim 33 or 34 wherein:

the data processing resource comprises a software component.
</CLAIMS>
</TEXT>
</DOC>
