<DOC>
<DOCNO>EP-0627684</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Specifying contexts in callback style programming.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F940	G06F940	G06F946	G06F948	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Apparatus and methods for specifying contexts for machine-executable instructions. 
Modern graphical user interface systems employ the callback programming style. In 

this style, a system event handler responds to an event by executing application-level 
callback code and providing event information concerning the event as part of the 

context of the execution. The technique disclosed herein uses callback information 
names to specify the relationship between the event information and the execution 

context. The callback information names are defined globally, but represent the 
event information for a single execution of the callback code. Using the callback 

information names, it is possible to define the callback code in the function which 
adds the callback code to the graphical user interface system. 


 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AT 
&
 T CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AT
&
T CORP.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BLEWETT CHARLES DOUGLAS
</INVENTOR-NAME>
<INVENTOR-NAME>
BLEWETT, CHARLES DOUGLAS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention concerns programming generally and is more specifically 
directed to techniques for defining a context in which code that is invoked in 
response to an asynchronous event is executed. When a computer executes a program, it uses data and code stored in the 
computer's memory system. When writing a program, a programmer uses names to 
specify the code and the data. When the program is executed on the computer, the 
execution of the program provides a context for the names. What the names mean in 
a given execution depends on the context for that execution. In the prior art, the 
context for a given part of a program has been defined by means of declarations for 
names of variables and procedures and functions and of invocations of procedures 
and functions. The following pseudo-code fragment, which shows parts of two 
procedures, a and b provides an example of such context definition: 
There are six names of interest in the above fragment: static_1, a_auto_1, 
a_auto_2, form_1, form_2, and b_auto. static_1 is the name of a 
global static variable. The name of the variable is known everywhere in the program 
containing the functions a and b. static_1 further represents only a single 
location in the memory of the computer upon which the program is executing. Thus, 
static_1 always represents the current value of that location. a_auto_1, 
a_auto_2, and b_auto are names of automatic variables. The name of each of 
these variables is known only within the function where it is declared and each name 
further represents a given location in memory only during a given execution of the 
function in which the variable is declared. Consequently, a change in the value of 
one of these variables during one execution of the function has no effect whatever on 
its value during a different execution. form_1 and form_2 are names of formal arguments. These names 
are known only within the function where they are declared. In that function, they 
represent values which the function receives as actual arguments when it is executed. 
For example, in the code fragment above, the function b is invoked as follows:
 
   b(a_auto_1,a_auto_2)
 
In this invocation, a_auto_1 and a_auto_2 are actual arguments. When the 
invocation is executed, the function b is executed, and during that execution, 
form_1 represents the value of a_auto_1 and form_2 represents the value of 
a_auto_2. The context of a given execution of the function b is thus the global 
static variable static_1 the values of the actual arguments a_auto_1
</DESCRIPTION>
<CLAIMS>
Apparatus for specifying a context for machine-executable instructions 
comprising: 

   means for establishing a definition of a name in the context, the 
definition having global scope and specifying a value which is specific to each 

execution of the instructions; 
   a context specification specifying how the name is to be used in the 

context; and 
   means responsive to the definition and the context specification for 

generating the instructions such that in a given execution of the instructions, the 
value for the given execution which is specified by the name is provided to the given 

execution as specified by the context specification. 
The apparatus set forth in claim 1 wherein: 
   the instructions are callback code; and 

   the context is actual arguments for the callback code. 
The apparatus set forth in claim 2 wherein: 
   there is a plurality of callback codes which are specified in a list thereof; 

and 
   there is an operation for adding a callback code to the list thereof; and 

   the context specification is part of a specification of the operation for 
adding the callback code to the list thereof. 
The apparatus set forth in any of claims 1 through 3 wherein: 
   the means for generating instructions is a compiler. 
The apparatus set forth in any of claims 1 through 3 wherein: 
   the means for generating instructions is an interpreter. 
Apparatus for generating instructions comprising: 
   means for establishing a definition of a name of a value in a context, the 

definition having global scope and specifying a value which is specific to a given 
execution of the instructions;

 
   means for establishing a context specification specifying how the name 

is to be used in the context; and 
   means responsive to the definition and the context specificat
ion for 
generating the instructions such that in a given execution of the instructions, the 

value for the given execution which is specified by the name is provided to the given 
execution as specified by the context specification. 
The apparatus set forth in claim 6 wherein: 
   the instructions are callback code; and 

   the context is actual arguments for the callback code. 
The apparatus set forth in claim 7 wherein: 
   there is a plurality of callback codes which are specified in a list thereof; 

and 
   there is an operation for adding a callback code to the list thereof; and 

   the context specification is part of a specification of the operation for 
adding the callback code to the list thereof. 
The apparatus set forth in any of claims 6 through 8 wherein: 
   the means for generating instructions is a compiler. 
The apparatus set forth in any of claims 6 through 8 wherein: 
   the means for generating instructions is an interpreter. 
A method of generating machine-executable instructions comprising 
the steps of: 

   establishing a definition of a name of a value in a context, the definition 
having global scope and specifying a value which is specific to a given execution of 

the instructions; 
   establishing a context specification specifying how the name is to be 

used in the context; and 
   generating the instructions in response to the definition and the context 

specification such that in a given execution of the instructions, the value for the 
given execution which is specified by the name is provided to the given execution as 

specified by the context specification. 
The method set forth in claim 11 wherein: 
   the instructions are callback code; and 

   the step of establishing a context specification specifies how the name is 
to be used as an actual argument for the callback code. 
The method set forth in claim 12 wherein: 
   there is a plurality of callback codes which are specified in a list thereof; 

and 
   there is an operation for adding a callback code to the list thereof; and 

   the step of specifying a context is done as part of a specification of the 
operation for adding the callback code to the list thereof. 
The method set forth in any of claims 11 through 13 wherein: 
   the method is practiced in a compiler. 
The apparatus set forth in any of claims 11 through 13 wherein: 
   the method is practiced in an interpreter. 
</CLAIMS>
</TEXT>
</DOC>
