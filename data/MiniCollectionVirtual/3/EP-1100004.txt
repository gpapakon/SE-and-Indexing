<DOC>
<DOCNO>EP-1100004</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A method for generating localizable message catalogs for java-based applications
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F945	G06F945	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method for generating localizable message catalogs for Java-based
applications is disclosed. Message catalogs that are automatically flagged for

what needs to be manually translated are generated from a given Java source
code file (46, 78), which can then be used for translation (Figure 5, 80).

ListResourceBundle data structures that are compatible with Java's
internationalization model are also generated from the message catalogs that

were previously generated (82) and manually translated into desired local
language(s) (64, 80). This provides a more efficient means of maintaining a

language-specific version of Java software after if has been released.

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KOFF CAROLINE NAN
</INVENTOR-NAME>
<INVENTOR-NAME>
MCCOLLOM WILLIAM GIRARD
</INVENTOR-NAME>
<INVENTOR-NAME>
KOFF, CAROLINE NAN
</INVENTOR-NAME>
<INVENTOR-NAME>
MCCOLLOM, WILLIAM GIRARD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to windows-based computer
applications, and more particularly to localizable message catalogs for Java-based
applications.The increasing use of the Internet and other distributed networks for a
variety of purposes, including international commercial, scientific and cultural
discourse, makes the ability to readily and reliably produce and support global
software increasingly important. Global software, or applications, refers to
software that is developed independently of specific languages or geographic
regions and capable of being translated into any desired language or region of
an end user at run-time.The internationalization process implies that the software consists of a
single set of binaries that operates under all languages, and that the language-sensitive
areas in the source code, referred to as the "localizable areas", such
as end-user visible strings, data and numeric formats, are stored in external
files. The C/C++ programming language, for instance, uses this
internationalization model by storing the language-sensitive areas in external
files called "message catalogs". Message catalogs are based on the standard 
defined by the X/Open Portability Guide (XPG) and are thus very attractive for
localization. These message catalogs are not source code but are text files,
designed for localizability, that allow easy translation of texts into native
languages, such as French, Italian, Russian, German or Japanese. The
C/C++ programming language "loads" the appropriate language versions of
these message catalogs based on the end-user's language at run-time. When
a user starts up an internationalized application, the application first checks to
see which locale is in use by the user. For instance, when a user runs an
application on a German NT server, the user is using the German locale. The
locale in use by the user, determined at run-time, will be used by the
application for the display text and other user interface elements. If the user
changes the locale in use, such as by restarting the desktop environment
under another locale, the application will use that other locale to display the
texts and other user interface elements.This internationalization approach is not available for software written in
the portable Java programming language by Sun Microsystems because the
Java programming language does not store language-sensitive areas in the
source code in message catalogs. The Java programming language provides
a framework for developing global applications
</DESCRIPTION>
<CLAIMS>
A method for generating localizable message catalogs for Java-based
applications, comprising:


identifying one or more localizable strings of a Java source code
(42);
marking the one or more localizable strings to produce one or more
marked localizable strings by inserting a marker into each localizable string

of the one or more localizable strings (44);
extracting the one or more marked localizable strings (74);
storing the one or more marked localizable strings into an external
text file (46); and
generating one or more ListResourceBundle data structures from the
one or more marked localizable strings stored in the external text file (82).
The method of claim 1, wherein extracting and storing the one or
more marked localizable strings into one or more text files and generating

the one or more ListResourceBundle data structures occurs when the Java
source code is compiled (84).
The method of claim 1, wherein generating one or more
ListResourceBundle data structures from the one or more marked

localizable strings comprises for each marked localizable string of the one
or more marked localizable strings:


determining a current locale language in which the Java source code
is running (52);
determining whether the current locale language is a default
language (54);
if the current locale language is the default language, returning a
marked localizable string of the one or more marked localizable strings

(55);
if the current local language is not the default language, determining
whether a language-specific version of the marked localizable string that

corresponds to the current locale language exists in a ListResourceBundle
data structure of the one or more ListResourceBundle data structures that

corresponds to the marked localizable string (58); and
if the language-specific version exists, opening the
ListResourceBundle that corresponds to the marked localizable string and

returning the language-specific version of the marked localizable string
from the ListResourceBundle (59).
The method of claim 1, further comprising translating the one or
more marked localizable strings of the Java source code, wherein

translating the one or more localizable strings comprises:

obtaining the external text file containing the one or more marked
localizable strings (62);
translating the one or more marked localizable strings stored in the
external text file (64); and
generating a ListResourceBundle data structure for the translated
one or more marked localizable strings (66).
A method for generating localizable message catalogs for Java-based
applications, comprising:


identifying one or more localizable strings of a Java source code
(42);
marking the one or more localizable strings to produce one or more
marked localizable strings by inserting a marker into each localizable string

of the one or more localizable strings (44);
extracting the one or more marked localizable strings (46);
storing the one or more marked localizable strings into an external
text file in a first directory (46, 72);
generating a new version of the Java source code in a second
directory from which an internationalization tool is run (74);
retrieving the marked localizable strings from a ListResourceBundle
class (76);
generating a merged external text file containing the one or more
marked localizable strings in the first directory and the second directory

(78);
generating one or more ListResourceBundle files corresponding to
the merged external text file with each ListResourceBundle file of the one

or more ListResourceBundle files corresponding to a desired language
(82); and
compiling the one or more ListResourceBundle files and the Java
source code (84).
The method of claim 5, wherein retrieving the marked localizable
strings from a ListResourceBundle class comprises:


determining a current locale language in which the Java source code
is running (52);
determining whether the current locale language is a default
language (54);
if the current locale language is the default language, returning a
marked localizable string of the one or more marked localizable strings

(55);
if the current local language is not the default language, determining
whether a language-specific version of the marked localizable string that

corresponds to the current locale language exists in a ListResourceBundle
data structure of the one or more ListResourceBundle data structures that

corresponds to the marked localizable string (58); and
if the language-specific version exists, opening up the
ListResourceBundle that corresponds to the marked localizable string and

returning the language-specific version of the marked localizable string
from the ListResourceBundle (59).
The method of claim 5, wherein after generating a merged external
text file, further comprising:


translating the one or more marked localizable strings in the merged
external text file into one or more desired languages (80).
A method for generating localizable message catalogs for Java-based
applications, comprising:


opening an original Java source code file that is stored in a first
directory (92);
opening a first message catalog file (94);
copying the first message catalog file to a second message catalog
file (95);
creating a modified Java source code file from the original Java
source code file in a second directory (96);
reading the contents of the original Java source code file into a
buffer (98);
if the buffer contains one or more marked localizable strings (100),
for each marked localizable string of the one or more marked localizable

strings comprising:
determining if the marked localizable string is stored in the first
message catalog file (102);
if the marked localizable string is stored in the first message
catalog file, comprising:


obtaining a message number corresponding to the
marked localizable string (108); and
replacing the marked localizable string in the buffer with
a method call that can obtain the marked localizable string (110);
if the marked localizable string is not stored in the first
message catalog file, comprising:


appending the marked localizable string to the second
message catalog file (104); and
removing a marker from the marked localizable string in
the buffer to convert the marked localizable string to a default localized

string (106);
writing to the modified Java source code file from the buffer (112);
and
closing the original Java source code file, the first message catalog
file, the second message catalog file, and the modified Java source code

file (116, 118, 120).
A method for generating localizable message catalogs for Java-based
applications, comprising:


generating a plurality of modified Java source code files (96);
generating a message catalog file having one or more localizable
strings for a Java package (42, 44);
translating the message catalog file manually (64, 80);
generating a plurality of ListResourceBundle data structure files for
the one or more localizable strings of the translated message catalog file

(66, 82); and
compiling the plurality of modified Java source code files and the
plurality of ListResourceBundle data structure files (46, 84).
</CLAIMS>
</TEXT>
</DOC>
