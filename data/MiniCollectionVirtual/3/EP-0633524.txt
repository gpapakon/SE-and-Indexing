<DOC>
<DOCNO>EP-0633524</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and system for sharing a utility function between operating systems.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F9445	G06F9445	G06F946	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method and system for sharing a utility between 
operating systems in a computer system containing more than 

one operating system is provided. The utility performs a 
utility function and comprises functional instructions. The 

utility function is for controlling and managing a computer 
system and the functional instructions, when invoked, perform 

the utility function. Upon receiving a request from a user, 
an operating system loads the functional instructions into 

memory and invokes the functional instructions to perform the 
utility function. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HENSLEY JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
JAIN NAVEEN
</INVENTOR-NAME>
<INVENTOR-NAME>
HENSLEY, JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
JAIN, NAVEEN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the field of 
operating systems and, more specifically, to operating 
system utilities. The modern computer system provides users with 
the ability to run a large variety of application 
programs. Such a computer system contains, as shown in 
Figure 1, a computer 100 which has a central processing 
unit (CPU) 102, a memory 104 and an input/output (I/O) 
unit 106. The computer system also includes various 
peripheral devices, such as a keyboard 110, a mouse 115, a 
monitor 120 and a disk 130, all of which are connected to 
the computer 100 via the I/O unit 106. The computer 
system also contains an operating system which manages and 
executes the application programs. The operating system 
is stored in the memory 104 and executed by the CPU 102. 
The operating system controls the allocation and use of 
the central processing unit 102, the memory 104 and the 
peripheral devices. An example of such an operating system is the 
MS-DOS® operating system, created by Microsoft 
Corporation. The MS-DOS operating system is widely used 
for controlling the operation of various personal 
computers. In addition to performing management of the 
computer system, the MS-DOS operating system also provides 
a number of "utilities." A utility is a computer program 
which performs, upon request by the user, a specific 
function, called herein a utility function, relating to 
the operating system's management and control of the 
computer system. For example, when a user of the MS-DOS  
 
operating system enters the command "DIR" at the MS-DOS 
user prompt, the operating system outputs to the display 
120 a list of all files stored in a relevant directory on 
the disk 130 and the amount of memory used by each file. A more recent example of an operating system is 
the Windows™ operating system by Microsoft Corporation. 
Technically speaking, the Windows system is implemented as 
an application running on top of the MS-DOS operating 
system. Once executing, however, the Windows system 
performs essentially as an operating system providing 
management and control of the computer system and 
completely controlling interaction between the computer 
system and the user. The Windows operating system 
provides its own set of utilities which are designed 
specifically for the Windows environment and which 
interface with the user in a fashion unique to the Windows 
operating system. For example, a user of the Windows 
operating system would obtain directory information 
similar to that provided by the
</DESCRIPTION>
<CLAIMS>
In a computer system, the computer system 
having a utility and a memory containing a plurality of 

operating systems, the utility for performing a utility 
function and comprising functional instructions executable by 

all of the operating systems, the utility function for 
managing and controlling the computer system, a method in the 

computer system for sharing a utility between operating 
systems, the computer-implemented method comprising the steps 

of: 
   receiving a request from a user to an operating 

system for the operating system to perform the utility; 
   loading the functional instructions of the requested 

utility into the memory by the operating system; and 
   invoking the loaded functional instructions of the 

requested utility to perform the utility function by the 
operating system. 
A distributed system comprising: 
   a utility component comprising functional 

instructions for performing a utility function, the utility 
function for managing and controlling the distributed system; 

and 
   a memory containing: 

   a first operating system for receiving requests 
from a user and invoking the functional instructions of the 

utility component in response to receiving a request from the 
user for the first operating system to perform the utility 

function; and 
   a second operating system for receiving 

requests from the user and invoking the functional 
instructions of the utility component in response to receiving 

a request from the user for the second operating system to 
perform the utility function. 
The distributed system of claim 2 wherein the 
first operating system is stored in memory of a first computer 

system and the second operating system is stored in memory of 
a second computer system. 
In a computer system, the computer system 
having a utility function and a memory containing an active 

operating system and an external operating system, the utility 
function for managing and controlling the computer system, the 

utility function performed by a utility executable by the 
external operating system, the utility comprising a utility 

engine containing functional instructions for performing the 
utility function executable by the external operating system 

and the active operating system and external user interface 
instructions for interfacing with a user executable by the 

external operating system, a method for performing the utility 
function by the active operating system, the computer-implemented 

method comprising the steps of: 
   storing in the memory the utility engine by the 

active operating system; and 
   invoking the functional instructions contained 

within the stored utility engine by the active operating 
system. 
The method of claim 4 wherein the step of 
storing in the memory the utility engine includes the step of 

loading a dynamic link library containing the utility engine. 
into the memory by the active operating system. 
The method of claim 4 wherein the step of 
storing in the memory the utility engine includes the step of 

retrieving the utility engine from an executable file. 
In a computer system, the computer system 
having a utility function and a memory containing an 

application program, an active operating system and an 
external operating system, the utility function for managing 

 
and controlling the computer system and being performed by a 

utility executable by the external operating system, the 
utility comprising a utility engine containing functional 

instructions for performing the utility function executable by 
the external operating system and the active operating system 

and external user interface instructions for interfacing with 
a user executable by the external operating system, a method 

for performing the utility function by the application 
program, the computer-implemented method comprising the steps 

of: 
   storing in the memory the utility engine by the 

application program; and 
   invoking the functional instructions contained 

within the stored utility engine by the application program. 
The method of claim 7 wherein the step of 
storing in the memory the utility engine includes the step of 

loading a dynamic link library containing the utility engine 
into the memory by the application program. 
The method of claim 7 wherein the step of 
storing in the memory the utility engine includes the step of 

retrieving the utility engine from an executable file. 
A distributed system comprising: 
   a utility comprising functional instructions 

executable by a first operating system and a second operating 
system when performing a utility function and user interface 

instructions executable by the first operating system when 
interfacing with a user, the utility function for managing and 

controlling the distributed system; 
   the first operating system for invoking the 

functional instructions and the user interface instructions; 

   the second operating system for invoking the 
functional instructions; 

   means for requesting invocation of the utility by 
the first operating system and the second operating system;

 
   means, responsive to the requested invocation of the 

utility by the second operating system, for invoking the 
functional instructions to perform the utility function; and 

   means, responsive to the requested execution of the 
utility by the first operating system, for executing the user 

interface instructions and the functional instructions to 
perform the utility function. 
The distributed system of claim 10 wherein the 
first operating system is stored in memory of a first computer 

and the second operating system is stored in memory of a 
second computer. 
In a computer system, the computer system 
having a storage device containing a utility and a memory 

containing a plurality of operating systems, the utility for 
performing a utility function and comprising user interface 

instructions executable by a first of the operating systems 
and functional instructions executable by all of the operating 

systems, the utility function for managing and controlling the 
computer system, a method in the computer system for sharing a 

utility between operating systems comprising the computer-implemented 
steps of: 

   when a user requests execution of the utility by the 
first operating system, 

   loading the utility into the memory by the 
first operating system; 

   invoking the user interface instructions of the 
loaded utility by the first operating system; and 

   invoking the functional instructions of the 
loaded utility to perform the utility function by the first 

operating system; and 
   when the user requests execution of the utility by a 

second of the operating systems, 
   loading the functional instructions into the 

memory by the second operating system; and
 

   invoking the loaded functional instructions to 
perform the utility function by the second operating system. 
The method of claim 12 wherein the step of 
loading the utility into the memory includes the step of 

retrieving the utility from an executable file by the first 
operating system. 
The method of claim 12 wherein the step of 
loading the functional instructions into the memory includes 

the step of retrieving the functional instructions from an 
executable file by the second operating system. 
The method of claim 12 wherein the step of 
loading the functional instructions into the memory includes 

the step of storing the functional instructions into a data 
structure in the memory. 
The method of claim 12 wherein the functional 
instructions are contained within a dynamically linked 

library, wherein the step of loading the functional 
instructions into the memory includes the step of loading the 

dynamically linked library into the memory. 
The method of claim 16 wherein the dynamically 
linked library has an entry point, wherein the step of loading 

the dynamically linked library includes the step of retrieving 
the entry point of the dynamically linked library to provide 

access to the functional instructions. 
</CLAIMS>
</TEXT>
</DOC>
