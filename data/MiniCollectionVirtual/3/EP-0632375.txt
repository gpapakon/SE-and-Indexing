<DOC>
<DOCNO>EP-0632375</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Multiple-execution method of multiple-version programs and computer system therefor
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1100	G06F1100	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A distributed processing system includes a 
plurality of processors (11, 12, 13, 14) connected 

through a network (1), at least two first processors 
(12, 13) executes multiple-version programs
 (52a, 52b) 
which perform the same function, and messages 

(520a, 520b) which contain data outputted as execution 
results of the programs and attribute information 

indicating the versions of the executed programs are 
sent from the first processors (12, 13) to the network. 

The messages containing the results of processing by the 
multiple-version programs sent from the first processors 

(12, 13) are received by a second processor (14), which 
selects one message from the received messages based on 

the attribute information contained in the received 
messages and executes a program in the second processor 

(14) by using the data contained in the selected 
message. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HITACHI LTD
</APPLICANT-NAME>
<APPLICANT-NAME>
HITACHI, LTD.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FUJISE HIROSHI
</INVENTOR-NAME>
<INVENTOR-NAME>
HIRASAWA SHIGEKI
</INVENTOR-NAME>
<INVENTOR-NAME>
KAWANO KATSUMI
</INVENTOR-NAME>
<INVENTOR-NAME>
MORI KINJI
</INVENTOR-NAME>
<INVENTOR-NAME>
NAKAMURA TOMOAKI
</INVENTOR-NAME>
<INVENTOR-NAME>
ORIMO MASAYUKI
</INVENTOR-NAME>
<INVENTOR-NAME>
SUZUKI HITOSHI
</INVENTOR-NAME>
<INVENTOR-NAME>
FUJISE, HIROSHI
</INVENTOR-NAME>
<INVENTOR-NAME>
HIRASAWA, SHIGEKI
</INVENTOR-NAME>
<INVENTOR-NAME>
KAWANO, KATSUMI
</INVENTOR-NAME>
<INVENTOR-NAME>
MORI, KINJI
</INVENTOR-NAME>
<INVENTOR-NAME>
NAKAMURA, TOMOAKI
</INVENTOR-NAME>
<INVENTOR-NAME>
ORIMO, MASAYUKI
</INVENTOR-NAME>
<INVENTOR-NAME>
SUZUKI, HITOSHI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a multiple-execution
method of programs in a distributed processing
system having a plurality of processors connected
through a network, and more particularly to a multiple-execution
method of multiple-version programs executed
parallelly and a computer system therefor, and still
further particularly to a multiple-execution method of
multiple-version programs and a computer system for
implementing the same which can reduce a burden of a
user, maintain the independence between the programs and
effectively utilize an execution result which is not
finally selected.In the present specification, the term of
multiple-version programs is meant by a plurality of
programs for performing the same function but having
different program structures. The execution results of
the programs may be either the same or not the same.
For example, a simulation program for an event having a
low calculation precision and a short calculation time
and a simulation program for the same event having a
high calculation precision and a long calculation time
are multiple-version programs.In the system having a plurality of processors
connected through a transmission line, the following DRB 
system and N version have been known as a multiple-execution
method of the multiple-version programs.In the DRB system, as disclosed in IEEE
Transactions on Computers, Vol. 38, No. 5, 1989, pp 626-636,
the multiple-version programs are prioritized and
an execution result of the first priority version
program is tested by a predetermined test logic called
an acceptance test, and if the test result is correct,
it is selected. If the test result is incorrect, an
execution result of the second priority version program
is selected.On the other hand, in the N version system, as
disclosed in IEEE Computer, Vol. 17, No. 8, 1984, pp 67-80,
the multiple-version programs are executed in
parallel by a plurality of processors and execution
results of the respective programs are compared by a
processor for checking an output and one execution
result is selected based on a majority logic. In the
DRB system, since the user must prepare the acceptance
test and the preparation of the acceptance test is not
easy, the burden to the user is large. On the other
hand, in the N version system, since the output results
of the respective programs are simply compared, it is
required that the outputs are identical for the
multiple-version programs. As a result, the independency
among the programs is low and it is difficult to
prepare the
</DESCRIPTION>
<CLAIMS>
A program execution method in a distributed
processing system having a plurality of processors (11,

12, 13, 14) connected through a network (1), comprising
the steps of:


executing multiple-version programs (52a, 52b)
performing the same function with different program structures by at least two first

processors (12, 13);
transmitting messages (Fig. 2, 520a, 520b),
including execution results of said

programs and
attribute information indicating the versions of the

executed programs, from said first processors (12, 13) to said network (1);
receiving the messages transmitted from said
first processors(12, 13) by a second processor (14);
selecting one of the received messages by said second processor, based
on the attribute information contained in the received

messages; and
executing a program (54) in said second
processor (14) by using the execution resu
lt contained in the
selected message.
A program execution method according to Claim
1 wherein said selection step selects those messages

(Fig. 2) of the messages transmitted from said first
processors (12, 13) which are received in a predetermined

permitted time period, as candidates for the
selection.
A program execution method according to Claim 
2 wherein said selection step discriminates, from said

candidate messages, the message which has been transmitted
by the program of the version having the highest

priority, and selects said discriminated message.
A program execution method according to Claim
1 wherein said multiple-version programs executed by said

first processors (12, 13) are programs of different
calculation precisions.
A program execution method according to Claim
1 wherein said step of executing the programs by said

first processors (12, 13) executes programs
developed in different time frames.
A program execution method according to claim 1, wherein

   said selecting of one of the received messages is further based 
on the execution results contained in the

received messages.
A program execution method according to Claim
6 wherein said selection step recognizes the priority of

the programs (52a, 52b) that transmitted the messages based
on the attribute information, determines the validity of

the execution result based on a relation among the execution results contained in the
respective messages having a predetermined relation with

respect to the priority, in accordance with the recognition
result, and selects the message transmitted from

the program having the highest priority version of the
messages containing the data determined to be valid in

said determination step.
A computer system comprising:

a network (1) for transmitting a
message (Fig. 2);
a plurality of first processors (12, 13)
connected to said network, for executing

programs (52a, 52b) of different versions performing the
same function with different program structures by at least two first processors;
each of said first processors (12, 13)
including program execution means (302) for executing a said

program, message preparation means (302) for
preparing a message including an execution result of the executed

program and
attribute information indicating a version of the 

program that generated said execution result, and an interface (301) for
sending the message prepared by said message preparation

means to said network (1); and
a second processor (14) connected to said
network, for executing a program (54) which uses

an execution result contained in a message sent from said first
processors (12, 13);
said second processor including an interface
(301) for reading in the messages from said network,

and means (302) for extracting the execution results
and the attribute information from the messages read by

said interface, for selecting the
execution result contained in one message from the execution results of the

read messages based on their attribute information, and
for executing the program (54)

by using the execution result selected.
</CLAIMS>
</TEXT>
</DOC>
