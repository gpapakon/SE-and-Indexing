<DOC>
<DOCNO>EP-0645705</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Testing and monitoring of programmed devices.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F948	G06F1128	G06F1128	G06F1130	G06F1130	G06F1134	G06F1134	G06F1136	G06F1136	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A monitoring apparatus includes a programmable event filter 
(18) which identifies the occurrence of a predetermined signal (such as 

a memory address location) on a signal path of a programmed device 
such as a CD-i player. On detection, one or more successive bus 

signals are captured in a buffer (20) and subsequently written to storage 
(14) for processing by an internal processor (10) or sending over a 

bidirectional communications link (16) to a host device implementing 
suitable data processing algorithms. A particular use for the monitoring 

apparatus is in non-intrusive debugging of programmed devices taking 
account of their operating systems. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
PHILIPS ELECTRONICS NV
</APPLICANT-NAME>
<APPLICANT-NAME>
PHILIPS ELECTRONICS UK LTD
</APPLICANT-NAME>
<APPLICANT-NAME>
PHILIPS ELECTRONICS N.V.
</APPLICANT-NAME>
<APPLICANT-NAME>
PHILIPS ELECTRONICS UK LIMITED
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CLARKE PAUL ANDREW
</INVENTOR-NAME>
<INVENTOR-NAME>
PIESING JONATHAN RICHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
CLARKE, PAUL ANDREW
</INVENTOR-NAME>
<INVENTOR-NAME>
PIESING, JONATHAN RICHARD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a method and apparatus for the 
monitoring of operation of programmed processor-based devices. Such 
monitoring facilitates debugging, that is to say the identification of 
coding errors in a program and facilitates a 'profiling' capability which 
is the analysis of software timing and performance. When writing computer programmes, a software engineer will 
frequently make use of a debugging tool. This tool provides the 
programmer with a great deal of control over the running of a program, 
by enabling the execution of individual processor instructions or 
sections of instructions such that the correct operation of individual 
parts of a program may be verified. The traditional (intrusive) method of debugging is to use an 
interactive debugging utility allowing breakpoints to be placed at 
predefined points in a program. On reaching a breakpoint, program 
execution is suspended and examination of the state of the system may 
be made. It is this suspension which can cause problems: stopping 
execution of a program can cause a break in a long sequence of time 
critical operations. Nevertheless, analysis of processor activity within 
these operations may be required. Traditional debugging tools allow the values of registers within the 
processor to be examined and modified, together with the manipulation 
of other subsystems (such as I/O ports or memory) within the computer 
system. The presence of an operating system running on the computer 
is however completely ignored. Operating systems frequently contain  
 
timing-critical sections of code, together with codes that may be 
executed on the unpredictable occurrence of an external interrupt. The 
execution of these types of code cannot be considered by traditional 
debugging tools which only trace operation within a program and 
themselves use facilities of the operating system such as keyboard 
entry or screen display. Debugging tools have not changed since their conception when 
computer systems were first designed. Although new variants support 
high level languages such as C, they still approach the task of program 
debugging along the lines of a "program" which defines a sequence of 
actions that a "processor" executes in turn. An example of a high level 
language debugging system is described in US Patent 5,127,103 (Hill 
et al). High level language debugging systems require knowledge of 
the compiler in addition to knowledge of the processor monitored. 
Additionally, they will still encounter problems when events
</DESCRIPTION>
<CLAIMS>
A method of monitoring the operation of a programmed 
processor-based device comprising the steps of; 


determining an electronic signal of the device 
representative of a predetermined processor operating 

system event; 
monitoring, from a position external to the processor 
operating system, for occurrence of the said 

representative signal on a signal path of the device; and 
on detection of occurrence of the said representative 
signal, capturing and reporting predetermined details of 

the processor operating system event. 
A method according to Claim 1, in which the step of 
capturing and reporting includes, where the detected event or events 

comprise access to a predetermined memory location, reporting 
information as to what was read from or written to said memory 

location. 
A method according to Claim 1 or Claim 2, in which the 
step of capturing and recording includes adding a time stamp to the 

captured data to indicate the point of event occurrence. 
A method according to Claim 1, in which it is a data bus 
of the processor based device which is monitored, and the said 

electronic signal is a predetermined data word. 
A method according to Claim 1, in which it is an address 
bus of the process based device which is monitored, and the said 

electronic signal is a predetermined memory address. 
A method according to Claim 4 or Claim 5 in which, on 
detection of an event, all bus signals for a predetermined period 

following the event are captured. 
Apparatus for monitoring the operation of a programmed 
processor-based device comprising: 

   filter means connectable to a signal path of the processor-based 
device and operable to detect occurrence of at least one 

predetermined electronic signal of the device representative of a 
particular processor operating system event; 

   an event cache memory connected to the filter means, the filter 
means being operable to write preselected event details to the cache 

memory on detection of an event; 
   an event data storage memory connected to the filter means 

and operable to store captured event details read from the cache 
memory via the filter means; and 

   processor circuitry connected to, and controlling operation of, 
the filter means and event data storage memory. 
Apparatus according to Claim 7, in which the filter 
means is a programmable device controllably configurable to detect at 

least one from an array of predetermined device signals. 
Apparatus according to Claim 8, further comprising filter 
configuration file storage means connected to the filter means and 

storing information defining one or more filter configurations. 
Apparatus according to any of Claims 7 to 9, in which 
the processor circuitry is operable to read captured event details from 

a first area of the event data storage memory, process the data, and 
write the processed event data to a further area of the event storage 

memory. 
Apparatus according to any of Claims 7 to 10, further 
comprising debugging means connectable to said signal path and 

operable to interrupt operation of said processor-based device. 
Apparatus according to any of Claims 7 to 11, further 
 

comprising a bidirectional communications port connected with the 
processor, filter means and event data storage memory. 
Debugging apparatus comprising a programmed host 
device operating data processing algorithms, said algorithms being 

determined by knowledge of the monitored device operating system, 
and apparatus according to Claim 11 connected thereto by bidirectional 

communications link. 
</CLAIMS>
</TEXT>
</DOC>
