<DOC>
<DOCNO>EP-0653704</DOCNO> 
<TEXT>
<INVENTION-TITLE>
System and method for configuring expansion cards in a computer.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1314	G06F1314	G06F1320	G06F1328	G06F1340	G06F1340	G06F1516	G06F15177	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F13	G06F13	G06F13	G06F13	G06F13	G06F13	G06F15	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for allocation 
of address locations (e.g. DMA channels, etc.) to 

expansion cards within a personal computer. A series of accesses are 
made to a particular address, the data at said address being compared 

with expected data values, the data of the final access being used to 
determine the addressing information for the card in question. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ADVANCED MICRO DEVICES INC
</APPLICANT-NAME>
<APPLICANT-NAME>
ADVANCED MICRO DEVICES INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FISCHER MATTHEW
</INVENTOR-NAME>
<INVENTOR-NAME>
GIBSON GLEN
</INVENTOR-NAME>
<INVENTOR-NAME>
FISCHER, MATTHEW
</INVENTOR-NAME>
<INVENTOR-NAME>
GIBSON, GLEN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the direct memory access (DMA) of a 
card placed in the expansion slot of a personal computer and more particularly 
to an improved system for selecting a particular DMA channel for a card. Most desktop personal computer (PC) systems contain "expansion bus" 
slots. These slots are physical connectors that allow printed circuit board 
(PCB) cards containing additional resources to be connected to the PC. 
Examples of typical expansion card functions are: disk drive controller, video 
graphics controller, serial port controller, parallel port controller and network 
controller. Each expansion card that is inserted into the system is connected 
to the PC's main resources (such as memory and the central processing unit 
(CPU)) through the expansion bus. Since the expansion bus is shared by all 
cards in the system, any card that wishes to utilize the PC's main resources 
must first indicate its intentions by asserting a "DMA request" signal. 
Alternatively, whenever the PC's CPU wishes to access resources on board an 
expansion bus card, it must uniquely indicate this to insure that only one card 
responds. This is done through unique "I/O and memory addressing." Any 
expansion card may request attention from the CPU by asserting an "interrupt" 
signal. When several expansion cards have been installed in a system, then 
there should not be conflicts between cards with respect to the DMA request, 
the I/O and memory addresses, and the interrupt signaling. If conflicts do 
arise, the system will fail. To avoid this problem, the system provides multiple  
 
DMA request lines, or channels, and each card that wishes to utilize the DMA 
resources must be connected to a separate DMA request channel to avoid 
conflicts. The system also provides multiple interrupt channels, and again, 
each card that wishes to utilize an interrupt must be connected to a separate 
interrupt channel. For I/O and memory addressing, expansion cards typically 
contain a fixed set of possible addresses, and the address for each card must 
be set to a value that does not conflict with the address of any other resource 
in the system. The most common method for selecting a particular DMA channel for a 
card (or for selecting interrupt channels and addresses) is to build "jumpers" 
onto each expansion card. The jumpers are manually moved in order to vary 
the selected DMA request and interrupt channel selection and also to select 
different I/O and memory addresses for the card to respond to. Physically, 
each
</DESCRIPTION>
<CLAIMS>
A method for assigning a first plurality (m) of addresses to a 
peripheral devices coupled to a computer
 system, the computer system 
having a second plurality of addresses, the method comprising the steps of: 


(a) providing a command from the computer to make an 
access to a specific address; 
(b) determining if access to the specific address has been 
made; 
(c) determining if a first specific data is located in the 
specific address if access has been made to the specific address; 
(d) repeating sequence of step (a) to (c) for a predetermined 
number (n) of time, each time determining if a specific data is located in the 

specific address if the first specific data and the subsequent specific data 
are located in the specific address; and 
(e) assigning a first address to the peripheral device 
according to the nth specific data located in the specific address determined 

during the nth sequence of step (a) to (d). 
The method as recited in Claim 1 in which if access has not 
been made to the specific address, the method further comprises the step 

of: 

(c1) repeating step (a) to (b). 
The method as recited in Claim 2 in which if the first specific 
 

data is not located in the specific address, the method further comprises the 
step of: 


(d1) repeating step (a), (b), (c), and (d). 
The method as recited in Claim 3 in which if during one of the 
sequence of step (d), the specific address has not been accessed or the 

specific data for that sequence is not located in the specific address, the 
method further comprises the step of: 


(d2) repeating step (a), (b), (c), and (d) 
The method as recited in Claim 1 which comprises an 
additional step 


(f) repeating step (a) to (e) for assigning the rest of the first 
plurality (m) of addresses to the peripheral device according to the nth 

specific data located in the specific address determined during each of the 
successive nth sequence of step (a) to (d). 
The method as recited in Claim 1, wherein n in step (d) equals 
to four. 
A method for assigning a first plurality (m) of addresses to a 
peripheral device coupled to a computer system, the computer system 

having a second plurality of addresses, the method comprising the steps of: 

(a) providing a command from the computer to make an 
access to a specific address; 
(b) determining if access to the specific address has been 
made; 
(c) determining if a first specific data is located in the 
specific address if access has been made to the specific address; 
(c1) repeating step (a) to (b) if access has not been made to 
the specific address; 
(d) repeating sequence of step (a) to (c) for a predetermined 
number (n) of time, each time determining if a specific data is located in the 

specific address if the first specific data and the subsequent specific data 
are located in the specific address; and 
(d1) repeating step (a), (b), (c) and (d) if the first specific data 
is not located in the specific address; 
(d2) repeating step (a), (b), (c) and (d) if during one of the 
sequence of step (d), the specific address has not been accessed or the 

specific data for that sequence is not located in the specific address; 
(e) assigning a first address to the peripheral device 
according to the nth specific data located in the specific address determined 

during the nth sequence of step (a) to (d); and 
(f) repeating step (a) to (e) for assigning the rest of the first 
plurality (m) of addresses to the peripheral device according to the nth 

specific data located in the specific address determined during each of the 
successive nth sequence of step (a) to (d). 
The method as recited in Claim 7, wherein n in step (d) equals 
to four. 
A peripheral controller for assigning a first plurality (m) of 
 

addresses to a peripheral device coupled to a computer system, the 
computer system having a second plurality of addresses in a register, the 

peripheral controller comprising: 
   a data buffer responsive to the computer system for directing 

the computer to provide a command for making an access to a specific 
address in the register; 

   means for 
   determining if access to the specific address has been 

made and for determining if a first specific data is located in the specific 
address if access has been made to the specific address, and 

   repeating the access for a predetermined number (n) of 
time, each time determining if a specific data is located in the specific 

address if the first specific data and the subsequent specific data are located 
in the specific address; and 

   register means for 
   assigning a first address to the peripheral device 

according to the nth specific data located in the specific address, and 
   assigning the rest of the first plurality (m) of addresses 

to the peripheral device according to the nth specific data located in the 
specific address determined during each of the successive nth determination 

that a specific data is located in the specific address. 
The peripheral controller as recited in Claim 9 further 
comprises:

 
   means for 

   directing the computer to provide another command for 
making an access to a specific address in the register if access has not 

been made to the specific address. 
The peripheral controller as recited in Claim 10 further 
comprises: 

   means for 
   directing the computer to provide another command for 

making an access to a specific address in the register if the first specific 
data is not located in the specific address. 
The peripheral controller as recited in Claim 11 further 
comprises: 

   means for 
   directing the computer to provide another command for 

making an access to a specific address in the register if during one of the n 
access, a specific data is located in the specific address. 
The peripheral controller as recited in Claim 12, wherein n 
equals to four. 
A peripheral controller for assigning a first plurality (m) of 
addresses to a peripheral device coupled to a computer system, the 

computer system having a second plurality of addresses in a register, the 
peripheral controller comprising: 

   a data buffer responsive to the computer system for directing 
 

the computer to provide a command for making an access to a specific 
address in the register; 

   means for 
   determining if access to the specific address has been 

made and for determining if a first specific data is located in the specific 
address if access has been made to the specific address, and 

   repeating the access for a predetermined number (n) of 
time, each time determining if a specific data is located in the specific 

address if the first specific data and the subsequent specific data are located 
in the specific address; 

   means for 
   directing the computer to provide a command for making 

an access to a specific address in the register if access has not been made 
to the specific address. 

   means for 
   directing the computer to provide a command for making 

an access to a specific address in the register if the first specific data is not 
located in the specific address, 

   means for 
   directing the computer to provide a command for making 

an access to a specific address in the register if during one of the n access, 
a specific data is located in the specific address, 

   register means for
 

   assigning a first address to the peripheral device 
according to the nth specific data located in the specific address, and 

   assigning the rest of the first plurality (m) of addresses 
to the peripheral device according to the nth specific data located in the 

specific address determined during each of the successive nth determination 
that a specific data is located in the specific address, 
The peripheral controller as recited in Claim 14, wherein n 
equals to four. 
</CLAIMS>
</TEXT>
</DOC>
