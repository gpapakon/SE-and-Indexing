<DOC>
<DOCNO>EP-0651895</DOCNO> 
<TEXT>
<INVENTION-TITLE>
SEQUENTIAL INFORMATION INTEGRATION SERVICE FOR INTEGRATING TRANSFER OF FILES OR OTHER DATA ENTITIES BETWEEN A PLURALITY OF PROGRAM MODULES AND A STORAGE IN A COMPUTER
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1721	G06F1721	G06F3048	G06F1200	G06F944	G06F944	G06F314	G06F314	G06F3048	G06F1200	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	G06F17	G06F3	G06F12	G06F9	G06F9	G06F3	G06F3	G06F3	G06F12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A number of program modules (32, 34, 36) are sequentially controlled by a procedural user interface (PUI) (38) and an operating system (40) to perform tasks. Transfer of files or other data entities between the modules (32, 34, 36) and a storage (13) is seamlessly integrated by a sequential information integration service (SIIS) (50). For reading a file from the storage (13), the PUI (38) or the operating system (40) generates a read command including a filename designation which can include a pathname, complete filename or wildcard characters. The read command can also include one or more arguments such as a user or group access code and an error message to display if the required file is not found. In an automatic mode, the service (50) automatically selects the most recent file corresponding to the filename designation and arguments, or displays the error message if a file meeting these criteria is not found. In a manual mode, the read command includes a manual selection argument which controls the service (50) to display a list of files (64) corresponding to the filename designation and arguments in a dialog box or window (60) for manual selection. The read command can further include a prompt message (62) for display in the window (60) together with the list of files (64).
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
RAYTHEON CO
</APPLICANT-NAME>
<APPLICANT-NAME>
RAYTHEON COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BARRETT WILLARD H
</INVENTOR-NAME>
<INVENTOR-NAME>
NGUYEN HA T
</INVENTOR-NAME>
<INVENTOR-NAME>
BARRETT, WILLARD, H.
</INVENTOR-NAME>
<INVENTOR-NAME>
NGUYEN, HA, T.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention generally relates to the art of
computers, and more specifically to a sequential information
integration service for integrating transfer of files
and other data entities between a plurality of program
modules and a storage in a computer.Software developers have conventionally designed
programs for commercial and personal use which perform a
single function such as word processing. Integrated
software packages are also available which include, for
example, a word processor, a data base and a spreadsheet.However, it is often desired to perform functions
which are not found in a single software package, such as
creating and editing a document, and faxing the document to
a remote location. The conventional method for performing
this task is to use a word processor to create and edit the
document, and the save the document as a file on a hard
disk or other storage media. A fax program is then called
to read the stored file from the hard disk and fax it to
the desired location. The prior art method is complicated, and requires
substantial technical expertise on the part of the user.
This is inefficient, and is especially undesirable in the
majority of business applications in which the users are
not computer experts and cannot spare time from their
primary jobs for in-depth computer training.Another problem involved in sequentially using several
different programs is transferring the proper data files
between the different applications. For example,. a user
might utilize a word processor to create, edit and save
several different documents with different filenames at
different times. At a later time, the user might have to
fax one of the files to another location. In order to
accomplish this, the user has to search the storage to
locate the proper file, and select it for transmission by
the fax program.This is disadvantageous in that the user must have
technical knowledge of the directory structure of an
operating system, and also in that a large number of files
of different types might be stored by a number of users in
a particular directory. Locating the desired file can be
unacceptably time consuming.Although in some applications a file name can be
"hard-coded" and unambiguously identifiable, this is
impractical in an application such as word processing since
only one data file can be saved with a particular filename.IBM Technical Disclosure Bulletin, vol. 30, no.10, March 1988 describes a solution where a utility file is employed in which there is stored the file name most recently
</DESCRIPTION>
<CLAIMS>
A computer system including a computer (10),
a storage (13), a control system (38,40) and a sequential

information integration service (50) for integrating data
entity transfer between a plurality of program modules

(32,34,36) and the storage (13), characterized by comprising:

a command parser (76) for parsing a read command
from the control system (38,40) specifying a data entity to

be read from the storage (13) into one of the program modules
(32,34,36), said read command including at least one of a

data entity designation and a data entity argument; and
an automatic data entity selector (78) for
automatically selecting a most recent data entity in the

storage (13) corresponding to any data entity designation
and any data entity argument in said read command as parsed

by the command parser (76) for reading into said program module
(32,34,36).
A computer system as in claim 1, in which:

said read command further includes a manual
selection argument; and
the service further includes:

a display controller (80,82) for disabling
the automatic data entity selector (78) and displaying all

specifiers in the storage (13) corresponding to any data
entity designation and any data entity argument in said

read command as parsed by the command parser (76) in
response to said manual selection argument; and
a manual data entity selector (84) for
enabling manual selection of one of said displayed specifiers

for reading the data entity having said selected
specifier from the storage (13) into said program module (32,34,36).
A computer system as in claim 2, in which:

data entities are stored in the storage (13) in
accordance with access codes;
said read command includes a data entity argument
that specifies one of said access codes; and
the display controller (80,82) displays only
specifiers of data entities which are stored in the storage

(13) in accordance with said specified access code.
A computer system as in claim 2, in which:

said read command further includes a prompt
message; and
the display controller (80,82) displays said
prompt message together with said specifiers.
A computer system as in claim 2, in which:

said read command can further include a prompt
message;
the display controller (80,82) displays said
prompt message together with said specifiers if said read

command includes said prompt message; and
the display controller (80,82) displays a default
prompt message together with said specifiers if said read

command does not include a prompt message.
A computer system as in claim 1, in which:

data entities are stored in the storage (13) in
accordance with access codes;
said data entity argument specifies one of said
access codes; and
the automatic data entity selector (78) selects
said most recent data entity only from data entities which

are stored in the storage (13) in accordance with said
specified access code.
A computer system as in claim 1, in which the
automatic data entity selector (78) displays an error

message if no data entities in the storage (13) correspond
to any data entity designation and any data entity argument

in said read command.
A computer system as in claim 1, in which:

said read command further includes an error
message; and
the automatic data entity selector (78) displays
an error message if no data entities in the storage (13)

correspond to any data entity designation and any data
entity argument in said read command.
A computer system as in claim 1, in which:

said read command can further include an error
message;
the automatic data entity selector (78) displays
said error message if said read command includes said error

message and if no data entities in the storage (13)
correspond to said data entity designation and said data

entity argument; and
the automatic data entity selector (78) displays
a default error message if said read command does not

include an error message and if no data entities in the
storage (13) correspond to said data entity designation and

said data entity argument.
A computer system as in claim 1, in which:

   the control system (38,40) comprises:

an operating system (40) which is capable of
generating said read command; and
a procedural user interface (38) which
interacts with the operating system (40) for controlling

the program modules and is also capable of generating said 
read command.
</CLAIMS>
</TEXT>
</DOC>
