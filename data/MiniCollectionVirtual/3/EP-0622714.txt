<DOC>
<DOCNO>EP-0622714</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Integrated automation development system and method
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F946	G06F1500	G06F1500	G05B19418	G05B19418	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G05B	G05B	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F15	G06F15	G05B19	G05B19	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An integrated automation development system (10) for controlling and 
coordinating manufacturing equipment (24) employs a plurality of server 

processes (14, 16, 22, 28, 34, 36). Each server process includes a messaging 
manager (45) for receiving ASCII messages, and an interpreter (43) for 

evaluating the received ASCII messages and identifying commands within 
the messages. The server process further includes a command manager (41) 

for receiving and executing the commands, and a logic controller (47) for 
managing the logic flow of the command execution by the command manager 

(41). The servers may include additional commands (48) that enable them to 
serve as queue servers (34), terminal servers (28), and other application-specific 

server processes. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
TEXAS INSTRUMENTS INC
</APPLICANT-NAME>
<APPLICANT-NAME>
TEXAS INSTRUMENTS INCORPORATED
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BYRD THOMAS E
</INVENTOR-NAME>
<INVENTOR-NAME>
MOORE STEPHEN F
</INVENTOR-NAME>
<INVENTOR-NAME>
BYRD, THOMAS E.
</INVENTOR-NAME>
<INVENTOR-NAME>
MOORE, STEPHEN F.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates in general to the field of automation systems.
More particularly, the present invention relates to an integrated automation
development system and method.The task of automation characteristically requires the coordinated
control of numerous entities to reach a common goal. This task is complex
because of the nature of the automation environment and requirements. The
automation entities may be real, such as factory equipment, local area
networks, databases and user terminals, or abstract, such as data, control
software, and communication messages and protocols.A first difficulty in automation integration is communication.
Typically, the automation entities cannot communicate directly with one
another and require interfaces for inter-entity communications. However, it
is apparent that the solution is not to formulate interface α for
communications between entities X and Y, interface β for communications
between entities Y and Z, and interface γ for communications between
entities Z and X, and so on. Such a system would require duplicitous efforts
for initial system configuration and subsequent reconfigurations.The task of automation integration must also facilitate frequent
system reconfigurations and modifications. Equipment are often added or
omitted from a processing line or cell, the automated processing lines or cells
may be frequently reconfigured, etc. Therefore, the automation system must
easily accommodate these changes. 
Also typical of automation systems is that the tasks performed by many of the
entities are done in parallel. Therefore, the automation system must also
accommodate parallel executions to satisfy this requirement.EP-A-0 162 670 discloses an automated industrial processing or
manufacturing installation including a series of computer controlled facilities such
as machine tools, workpiece and tool conveyors, and storage devices is controlled
by a computer system wherein the control software is structured as a series of
elemental function modules which intercommunicate by way of a high level
communication interface. The functions are structured so as to fall into one of the
categories job-route sequencer, activity managers, controllers and servers with a
route-sequencing module controlling the sequence in which various activities are
performed in relation to a processing or manufacturing job being carried out by the
installation, each activity manager distributing activities to a group of controllers for
which it is responsible, and the controllers being
</DESCRIPTION>
<CLAIMS>
An integrated automation development system (10) for controlling and
co-ordinating manufacturing equipment, said system comprising a plurality of server

processes (16, 22, 28), each server process (16, 22, 28) comprising:

a messaging manager (45) for receiving ASCII messages from said plurality of server processes, the messaging manager
(45) comprising means to perform communications-related tasks;
a language interpreter (43) comprising means for evaluating said received
ASCII messages for a variable number of said server processes including commands expressed in a text-based programming language,

said interpreter (43) including means to recognize said commands in said ASCII messages;
a command manager (41) for receiving and executing said commands, the
command manager (41) comprising means for managing and controlling the

execution of command requests, means for data storage, and means for event
logging; and
a logic controller (47) for managing the logic flow of said command
execution by said command manager (41).
The integrated automation development system, as set forth in claim
1, wherein said interpreter (43) recognizes dynamic variables in said

received ASCII messages, said dynamic variables being structured
hierarchically and used to store data values during command

execution by said command manager (41) or supplying values needed by
said command manager (41) for command execution.
The integrated automation development system, as set forth in claim 1
or claim 2, wherein said logic controller (47) directs said command manager (41)

to check for incoming messages, parse said messages, find the
commands in said messages, check the syntax of the commands,

execute the commands, generate a reply message and wherein said logic
controller (47) further directs said messaging manager to send said reply

message. 
The integrated automation development system, as set forth in any
preceding claim, wherein said command manager (41)

is an application-specific command manager to execute application-specific commands for controlling and interfacing
with said manufacturing equipment, and wherein said logic controller (47) directs

said application-specific command manager to check for incoming messages, parse said
messages, identify the format of said messages as being SECS (SEMI Equipment Communications Standard), process

said SECS messages, and continue checking for messages.
The integrated automation development system, as set forth in any
preceding claim, wherein said command manager (41)

is an application-specific command manager to execute application-specific commands for managing message routing
between said server processes.
The integrated automation development system, as set forth in claim
5, wherein said application-specific

command manager (41) maintains a list of existing server process names
and corresponding message queue addresses.
The integrated automation development system, as set forth in any
preceding claim, wherein said command manager (41)

executes application-specific commands for interfacing with a user
terminal.
The integrated automation development system, as set forth in any of
claims 1 to 6, wherein said command manager (41)

executes application-specific commands for interfacing with a host
manufacturing computer system. 
The integrated automation development system as set forth in any
preceding claim further comprising a control client (14) for generating

messages;

a terminal server (28) coupled to a developer interface terminal for
receiving developer input and displaying system status, said terminal

server (28) generating and receiving messages; and
a queue server (34) for enabling the routing of said messages between said
control client (14), equipment server (22), and terminal server (28).
The system, as set forth in any preceding claim, wherein said
interpreter (43) further recognizes dynamic variables in said ASCII messages,

said dynamic variables being structured hierarchically and used
to store data values during command execution by said command

manager (41) or supplying values needed by said command manager (41) for
command execution.
The system, as set forth in claim 9 or claim 10, wherein each client and
each of said server processes further comprises a message queue for receiving ASCII

messages, and wherein said logic controller (47) directs said command manager (41) to
check said message queue for incoming messages, parse said messages,

identify the format of said messages, process said messages in
response to said identified format of solid messages, and continue checking said

message queue for messages.
A method for integrating an automation development system for
controlling and coordinating manufacturing equipment using

a plurality of server processes, each server process (16, 22, 28) comprising:

a messaging manager (45) for receiving ASCII messages from said plurality of server processes, the messaging manager
(45) comprising means to perform communications-related tasks;
a language interpreter (43) comprising means for evaluating said received
ASCII messages for a variable number of said server processes including commands expressed in a text-based programming language,

said interpreter (43) including means to recognize said commands in said ASCII messages;
a command manager (41) for receiving and executing said commands, the
command manager (41) comprising means for managing and controlling the

execution of command requests, means for data storage, and means for event
logging; and
a logic controller (47) for managing the logic flow of said command
execution by said command manager (41).

the method comprising the
steps of:


checking for and receiving ASCII messages from other server processes;
evaluating said received messages for a variable number of said server processes including at least one command
expressed in a text-based programming language, and recognizing said

commands in said ASCII messages;
executing said commands; and
continuing to check for additional ASCII messages.
The method, as set forth in claim 12, further comprising the steps of
recognizing dynamic variables in said received ASCII messages, structuring said

dynamic variables hierarchically, and using said dynamic variables to
store data values during command execution or to supply values

needed for command execution.
The method, as set forth in claim 12 or claim 13, further comprising
the steps of parsing said ASCII messages, finding the commands in said

ASCII messages, checking the syntax of the commands, executing the
commands, generating a reply message, and directing said reply

message to a proper destination.
The method, as set forth in any of claim 12 to 14, further comprising
the steps of checking a message queue for incoming messages, parsing

said messages, identifying the format of said messages, processing said
messages in response to said identified message forma
t, and
continuing to check said message queue for messages.
The method, as set forth in any of claims 12 to 15, further comprising
the steps of executing application-specific commands for controlling

and interfacing with said manufacturing equipment, checking for
incoming messages, parsing said messages, identifying the format of

said messages as being SECS (SEMI Equipment Communications Standard) messages, processing said SECS messages, and
continuing to check for messages.
The method, as set forth in any of claims 12 to 16, further comprising
the steps of executing application-specific commands for managing

message routing between said server processes, and maintaining a list
of existing server process names and corresponding message queue

addresses.
</CLAIMS>
</TEXT>
</DOC>
