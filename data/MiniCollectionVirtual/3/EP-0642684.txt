<DOC>
<DOCNO>EP-0642684</DOCNO> 
<TEXT>
<INVENTION-TITLE>
SOFTWARE FAULT LOCATION METHOD
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1136	G06F1136	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In an arrangement for locating faults in software, a history file (4) is created during running of the software, which file contains values for variables in the software which can then be reviewed in the event of system failure. Review can be carried out in a forwards, backwards or search mode, in the manner of conventional video-tape controls by means of a video type interface between a debugger (5) and the history file (4) created during running of the software.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
BRITISH TELECOMM
</APPLICANT-NAME>
<APPLICANT-NAME>
BRITISH TELECOMMUNICATIONS PUBLIC LIMITED COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DAVIDSON COLIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HOLLETT RAYMOND MICHAEL
</INVENTOR-NAME>
<INVENTOR-NAME>
DAVIDSON, COLIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HOLLETT, RAYMOND
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to fault location in
software.Fault location and analysis is an important aspect of
writing software. It is extremely difficult to create a
program or system of any complexity which has no faults or
errors. These may not appear when the software is first
run but at some later time when a particular set of
circumstances arises and an expected result is not
achieved. A program might crash or there might be total
system failure.Clearly, it is important to analyse what went wrong so
that it can be corrected, and this analysis can be done in
more than one way. For instance, fault checking can be
done as a "post mortem" exercise, an operating system being
designed automatically to copy memory onto disk when the
software fails. The data stored at the time of failure
then provides a "snap shot" of the prevailing circumstances
from which an attempt can be made to find out what caused
the failure. Alternatively, dedicated debugging software
can be written into the main software such that when
compiled after a system failure, and run under the
debugging software, a faulty program or piece of software
can be stopped, allowing a problem to be pinpointed perhaps
at an earlier stage.In use, there are disadvantages with each of these
types of fault checking system. With the post mortem type,
it is only possible to look at a snapshot of information at
the time the system goes down. This may not be sufficient
for fault analysis. In taking the alternative approach and
using specially created debugging software, however, the
extra software can make a major contribution to the size of
a system overall. It is necessary for the debugger to know
where the relevant variables are in memory. This type of 
debugger is therefore expensive in that the program
incorporating it becomes much larger, and there is a big
expense in memory in having to flag where the variables are
located. Further, although the debugger is more flexible
in that it is possible to re-run the program, it still can
only be re-run in one direction. This is a significant
limitation particularly in big systems since re-running
whole programs can be unwieldy and time-consuming.An object of the present invention is to provide a
system or arrangement for fault location in software which
is not particularly expensive in terms of memory or
software complexity but which gives more information about
events leading up to a system problem than simply data at
the time of system failure.According to the present invention as defined in claim 1,
</DESCRIPTION>
<CLAIMS>
A method of fault location in software created by flow chart coding on a
visual display, said flow chart coding comprising the selection of flow chart

elements from the visual display and the configuration of said flow chart elements
to provide coded software, said method comprising the steps of:


(ii) storing multiple values for each of one or more variables, during
running of the flow chart coded software, in a memory;
(iii) storing identifiers in association with each of said selected flow
chart elements;
(iv) in the event of a fault occurrence in said running of the flow chart
coded software, displaying values for at least one variable for

review together with the flow chart element associated with the or
each said variable; and
(v) selectively setting a variable to control the display of said values for
review in a forwards or a backwards direction whereby triggering

sequential display of stored multiple values.
A method according to Claim 1 wherein said forwards or backwards
direction is forwards or backwards with respect to the values relative storage

locations in said memory.
A method as claimed in claim 1 wherein said forwards or backwards

direction is forwards or backwards with respect to the values chronological order
of storage in said memory.
A method as claimed in any of claims 1 to 3 which further comprises the
step of:


selecting a point or event during the running of the software and searching
said multiple values to select the value or values relevant to said point or event for

display.
A method as claimed in any one of the preceding claims which further
comprises the step of:


selecting a display interval so as to display said values for review at a
predetermined rate.
A method as claimed in any one of the preceding claims wherein said
storing step comprises the insertion of print statements in a commands file such

that any changed value for a variable is automatically stored in said memory on
running of the commands file.
</CLAIMS>
</TEXT>
</DOC>
