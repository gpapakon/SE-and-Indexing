<DOC>
<DOCNO>EP-0624964</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Database access.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1200	G06F1200	G06F1300	G06F1300	H04L1224	H04L1224	H04M342	H04M342	H04Q300	H04Q300	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	H04L	H04L	H04M	H04M	H04Q	H04Q	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F12	G06F12	G06F13	G06F13	H04L12	H04L12	H04M3	H04M3	H04Q3	H04Q3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A Generic Database Agent (G-DBA), provides the database access component of 
a Service Logic Execution Environment (SLEE). The G-DBA provides for online 

deployment of new data objects to a relational database (RDBMS) in a high availability 
real-time system, requiring conversion between CCITT's Common Management 

Information Protocol (CMIP), and Structured Query Language. 
A database access component provides a transform between a Common 
Management Information Protocol and Structural Query Language. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
PLESSEY TELECOMM
</APPLICANT-NAME>
<APPLICANT-NAME>
GPT LIMITED
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
COOK JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
TAVANYAR SIMON EDWIN
</INVENTOR-NAME>
<INVENTOR-NAME>
COOK, JOHN
</INVENTOR-NAME>
<INVENTOR-NAME>
TAVANYAR, SIMON EDWIN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a Generic Database Agent (G-DBA), the database 
access component of a Service Logic Execution Environment (SLEE). The G-DBA 
provides for online deployment of new data objects to a relational database (RDBMS) in 
a high availability real-time system, requiring conversion between CCITT's Common 
Management Information Protocol (CMIP), and Structured Query Language (SQL). The 
heart of the design is a transform for each CMIP operation which distributes CMIP 
parameters to a series of dynamic SQL Statements in accordance with updateable 
dictionary tables in the RDBMS. The invention is to be employed in an Advanced Intelligent Networks (AIN) 
Service Logic Execution Environment (SLEE), which itself forms a part of an Adjunct 
and Service Control Point (SCP) System. The requirements for SLEE were set out in the following documents issued by 
Bellcore:- 
1. FR-NWT-001132, AIN Release 1 Service Logic Program Framework Generic 
Requirements. 2. TA-NWT-001124, AIN Release 1 SLEE Generic Requirements. The SLEE is further described together with a Switch Control therefor in 
copending application GB 9307647.9 imported herein by reference. The SLEE provides a higher-level layer of functionality above the Operating 
System (OS) protecting the service implementations above the SLEE from changes in the  
 
OS, and providing them with more telecommunications oriented functionality than a 
general-purpose OS. Services are implemented above the SLEE as a number of Service Logic Programs 
(SLPs) which make use of the Bellcore defined Application Programming Interface (API) 
presented by the SLEE. According to the present invention there is provided a telecommunications Service 
Logic Execution Environment, a database access component (DBA) which provides a 
transform between a Common Management Information Protocol (CMIP) and Structured 
Query Language (SQL). The present invention will now be described by way of example, with reference 
to the accompanying drawings, in which:- 
Figure 1 is a context diagram for the Generic Database Agent; Figure 2 is a diagrammatic example of a Database Agent design; Figure 3 is a diagrammatic example of an Initialisation Handler of the Database 
Agent of Figure 2; Figure 4 is a diagrammatic example of an Interface Handler of the Database Agent 
of Figure 2; and Figure 5 is a diagrammatic example of a Database Access Handler of the Database 
Agent of Figure 2. An important part of the SLEE capability is to provide dynamic (i.e., online) 
creation and
</DESCRIPTION>
<CLAIMS>
In a telecommunications Service Logic Execution Environment, a database access 
component (DBA) provides a transform between a Common Management Information 

Protocol (CMIP) and Structured Query Language (SQL). 
A DBA as claimed in Claim 1, providing a CMIP interface for Service Logic 
Programs (SLPs). 
A DBA as claimed in Claim 2, wherein new objects are created dynamically by 
modification of dictionary table structures and entries using a Table Creation Tool (TCT) 

interpreting CMIP requests according to the dictionary description supplied by the TCT. 
A DBA as claimed in any preceding claim, wherein a transformation mechanism 
is provided to map CMIP objects and their operations dynamically onto tables defined 

in SQL. 
A DBA as claimed in any preceding claim, comprising 

(i) Input and Output Buffers to decompose and construct a CMIP message; 
(ii) Transfer Buffers to model the input data required by the SQL commands; 
(iii) Execution Buffers, one each for input and output to contain the data for each SQL 
command. 
A DBA as claimed in Claim 5, further comprising a Interface Handler which 
transfers data from a CMIP message received via the input buffer into Transfer Buffers. 
A DBA as claimed in Claim 6, comprising a Database Handler invoked by the 
Interface Handler, to pass a reference to the Transfer Buffers and to apply a sequence of 

SQL commands. 
</CLAIMS>
</TEXT>
</DOC>
