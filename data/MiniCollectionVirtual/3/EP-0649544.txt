<DOC>
<DOCNO>EP-0649544</DOCNO> 
<TEXT>
<INVENTION-TITLE>
VIRTUAL DATA SOURCE FOR RADIO TRANSCEIVER
</INVENTION-TITLE>
<CLASSIFICATIONS>H04B140	G06F946	H04B138	G06F1300	G06F1300	G06F946	H04B138	H04L2906	H04B140	H04L2906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04B	G06F	H04B	G06F	G06F	G06F	H04B	H04L	H04B	H04L	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04B1	G06F9	H04B1	G06F13	G06F13	G06F9	H04B1	H04L29	H04B1	H04L29	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In a radio transceiver having a microcomputer (11) that controls various hardware-dependent components (220) and functions (240) that form a plurality of radio control processes, a method and apparatus for executing the radio control processes includes providing the microcomputer (11) with a plurality of virtual sources (272). The virtual sources (272) are for collecting and distributing data (440) generated by the hardware-dependent components (220) and functions (240) in the radio transceiver. A plurality of hardware-independent tasks (292, 392) for executing the radio control processes are also provided by the microcomputer. A distribution controlling interface standard (228) for controlling which hardware-independent task (292, 392) will receive from which virtual source (272) is further provided by the microcomputer (11).
 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
MONAHAN-MITCHELL TIMOTHY A
</INVENTOR-NAME>
<INVENTOR-NAME>
WEISS KARL R
</INVENTOR-NAME>
<INVENTOR-NAME>
MONAHAN-MITCHELL, TIMOTHY, A.
</INVENTOR-NAME>
<INVENTOR-NAME>
WEISS, KARL, R.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to microcomputer controlled radio 
communication devices, and in particular to applications, operating system, 
and architecture suitable for use in processing tasks as necessary in these 
devices. Computers typically execute a series of tasks suitable for the intended 
application. A "task" is defined as a self-contained package of data and 
executable procedures which operate on that data, perform logical functions, 
and are comparable to "processes" in other known systems. In an operating 
system environment, the operating system provides housekeeping, or direct 
control of the processes or tasks within the software package. The process, 
or task, is typically made up of one or more subroutines. Within a process, it is desired that the data be accessible to that 
process and cannot be accessed from the outside, i.e., by other processes. 
Processes can be used to implement "objects", "modules", or other higher-level 
data abstractions. Data abstraction is only one element of a good 
design and of portability, or flexibility, for reuse in changing applications. As 
is known, the other design and reuse objectives are structure, modularity, 
information hiding, and hierarchy. Correspondingly, in radio applications, a need exists to reduce design 
time and increase design efficiency by utilizing a common software platform, 
capable of reuse, or portability, for all new radio products. To implement 
some of these design objectives, a tri-level microprocessor radio operating 
system, in one known system, provided a background executive to allow 
processing of time-insensitive tasks, a foreground routine to allow 
processing of real-time sensitive tasks, and a mid ground executive to allow 
processing of time-sensitive tasks. In a two-way radio having radio functions 
controlled via a microprocessor, some examples of time-insensitive tasks are 
tasks that respond to an operator input. Examples of real-time sensitive 
tasks are signal encoding and decoding, serial bus data reception, and tone  
 
generation. On the other hand, examples of time-sensitive tasks are bus 
command interpretation, channel scanning, audio routing, and synthesizer 
programming. Instead of being based on time sensitivity implemented by interrupts, 
operating systems based on message passing for system communication 
were developed. A "message" is a buffer containing data which controls a 
process, or a task, and/or supplies it with information required to carry out its 
operation. Hence, messages are
</DESCRIPTION>
<CLAIMS>
A radio transceiver, comprising: 

a plurality of hardware-dependent components (220); 
a plurality of hardware-independent components (292) and functions; 
a plurality of hardware-dependent tasking means (240) for collecting 
asynchronous data generated by the hardware-dependent components (220) 

and functions; 
a plurality of drivers (440) for providing the plurality of tasking means 
with information; 
a plurality of virtual sourcing means for distributing asynchronous data 
generated by the plurality of hardware-dependent tasking means (240) and 

the plurality of drivers (440); 
a plurality of hardware-independent tasking means (292, 392) for 
executing radio control processes of the hardware-[dependant]
 components 
(220); and 
a virtual source manager (272) for copying and sending messages to 
the hardware-independent tasking means (292). 
The radio transceiver of claim 1, wherein the distribution controlling 
means comprises an operating system scheduler. 
The radio transceiver of claim 1, wherein the distribution controlling 
means comprises a subscription manager. 
The radio transceiver of claim 1, wherein the distribution controlling 
means comprises an interface standard (228) between the virtual sourcing 

means located in a first level and located in another level of task hierarchy 
based on functionality. 
The radio transceiver of claim 4, wherein the interface standard 
(228) comprises a plurality of function calls (227) to allow one-way 

communication from the tasking means (292, 392) to the virtual sourcing 
means and a plurality of buffered messages to allow one-way communication 

from the virtual sourcing means to the tasking means.  
 
The radio transceiver of claim 5, wherein the plurality of function 
calls (227) comprises subscription calls for the tasking means (292, 392) to 

subscribe to the virtual sourcing means for selectively receiving distributed 
data from the virtual sourcing means. 
The radio transceiver of claim 5, wherein the plurality of function 
calls (227) comprise calls that enable the hardware-independent tasking 

controllers (292, 392) to selectively cause the plurality of hardware (240) 
tasking means to collect data. 
The radio transceiver of claim 5, wherein the plurality of function 
calls (227) comprises calls that enable hardware-independent tasking means 

(292) (392) to selectively cancel the subscription to the virtual sourcing 
means to selectively stop receiving distributed data from the virtual sourcing 

means. 
The radio transceiver of claim 5, wherein the plurality of function 
calls (227) comprise calls that enable the hardware-independent tasking 

means (292) to selectively cause the plurality of hardware-dependent tasking 
means (240) to finish collecting data.  

 
In a radio transceiver having a plurality of operating hardware-dependent 
components (220) and functions (240), a method for coordinating 

the operation of the operating hardware-dependent components (220) and 
functions (240), the method comprising the steps of: 


separating radio control processes in a plurality of tasks; 
partitioning the plurality of tasks into a plurality of hardware-dependent 

data sourcing tasks (272) and a plurality of hardware-independent data 
receiving tasks (392); 
designating the data sourcing task for selectively receiving data from 
the sourcing task; 
collecting data generated by the hardware-dependent components 
(220) using highly time critical interrupt software routine drivers (440); 
translating the data in the plurality of hardware-dependent tasking 
means (240); 
transferring the translated data from the hardware-dependent tasking 
means (240) to the virtual sourcing means; 
distributing the translated data from the virtual sourcing means to the 
designated hardware-independent tasking means (292, 392); and 
executing hardware-independent radio control processes in the 
designated hardware-independent tasking means (292). 
</CLAIMS>
</TEXT>
</DOC>
