<DOC>
<DOCNO>EP-1374044</DOCNO> 
<TEXT>
<INVENTION-TITLE>
LAZY COMPILATION OF TEMPLATE-GENERATED CLASSES IN DYNAMIC COMPILATION EXECUTION ENVIRONMENTS
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F940	G06F942	G06F9445	G06F9445	G06F945	G06F945	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Template-generated classes in program code are compiled efficiently through a process of lazy compilation resulting in improved compilation times. Lazy compilation includes the generation of objects representing a class template and a template-generated class as well as the selective compilation of class methods that are invoked in the program code. Code sharing is a further enhancement for increasing compilation speed by providing a system and method for sharing executable object code for compatible methods among different classes generated from the same class template.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
CURL CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
CURL CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HOSTETTER MATHEW J
</INVENTOR-NAME>
<INVENTOR-NAME>
KRANZ DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
HOSTETTER, MATHEW, J.
</INVENTOR-NAME>
<INVENTOR-NAME>
KRANZ, DAVID
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 LAZY COMPILATION OF TEMPLATE-GENERATED CLASSES IN DYNAMIC COMPILATION EXECUTION ENVIRONMENTSBACKGROUND OF THE INVENTIONCompilers typically convert source code into object code or some other intermediate code representation, such as byte codes. Source code is a set of instructions written in a programming language by a software developer. Object code, in general, is machine code or other low level code, translated from source code toward execution by a system's central processing unit (CPU). Compilation of source code can occur either statically or dynamically. Statically compiled programs are compiled once and the resulting binary object code is used repeatedly. Typically, static compilation occurs prior to shipping the program to the end user. Therefore, the time required to compile a program in static compilation environments does not effect the performance of the program when executed by the end user. Dynamic compilation execution environments, such as web browsers, involve the compilation of source code simultaneously or time-sharing with the execution of a program. Dynamic compilation is advantageous because code is shipped in a platform independent form and the compilation can use information about the target machine and security environment. However, the time required to dynamically compile the source code directly impacts the speed of the program execution. 

 Programming and scripting languages provide the software developer with a set of features and tools for organizing source code within a program. Class templates and classes generated from class templates (hereinafter template-generated classes) are examples of tools provided by some programming and scripting languages within static compilation environments.In object-oriented programming, a class is a descriptive tool used in source code for characterizing an object as a set of data structures (i.e. fields) or a set of routines (i.e. methods). For example, an array of integers can be represented in a class, IntegerArray. Such a class may include a field for storing the size of the array and another field comprising a data structure for representing the integers stored in an IntegerArray. In addition, the IntegerArray class may include methods for accessing the contents of the array, such as "get" and "set" methods.Once compiled, the class is represented as an object defining storage allocation for the class fields and specifying the types of data that can be stored within them. In addition, the class object provides access to executable
</DESCRIPTION>
<CLAIMS>
CLAIMS
What is claimed is:
1. A method of compiling program code including a class template and a template-generated class comprising: creating a representation of the class template from a definition of the class template in the program code, the class template representation including methods; creating a representation of a class generated from the class template, the class being declared in the program code, the class representation including a pointer to the class template representation; and generating method bindings associated with the class representation for methods referenced in the program code, the method bindings being substantially limited to those methods referenced in the program code.
2. The method of claim 1 further comprising: delaying compilation of method bodies of the methods referenced in the program code until the method is invoked.
3. The method of claim 1 wherein the class template representation includes a source code representation of a type signature and a source code representation of a body, the source code representations of the type signature and the body being associated with a method.
4. The method of claim 3 wherein the source code representations are associated with a method descriptor.
5. The method of claim 3 wherein generating method bindings comprises: creating a method binding; 


 compiling the source code representation of the type signature for the method resulting in a type signature object; and associating the type signature object and a method offset with the method binding.
6. The method of claim 5 further comprising: associating the method binding with the class representation.
7. The method of claim 6 wherein method bindings are associated with the class representation as elements of a linked list.
8. The method of claim 5 further comprising: compiling a method call instruction using the type signature object and the method offset of the method binding, the method call instruction referencing the method of the class representation.
9. The method of claim 5 further comprising: scanning the class representation for a previously generated method binding for one of the referenced methods, the scanning occurring prior to creating the method binding.
10. The method of claim 9 further comprising: scanning the class template representation for a source code representation of the type signature for the referenced method, the scanning occurring if the method binding is not found in the class representation.
11. The method of claim 3 wherein the class template representation includes a method table, the method table mapping the methods to stub code, the stub code initiating the compilation of the source code representation of the method body when executed. 

12. The method of claim 11 wherein the class template representation includes a method table array, the method table array containing a reference to the method table.
13. The method of claim 11 wherein the class representation includes a copy of the method table of class template representation.
14. A method of compiling the body of a method comprising: providing a class template representation including a source code representation of the body of a method; providing a class representation including a method table, the method table storing an address of stub code for the method; executing the stub code, the stub code initiating compilation of the source code representation of the method body; compiling the method body resulting in executable code; and replacing the address of the stub code in the method table with an address of the executable code for the method.
15. The method of claim 14 further comprising: instantiating an instance of the class representation; invoking the method on the instance; and referencing the method table of the class representation for the address of the stub code associated with the invoked method, the referencing of the method table occurring prior to executing the stub code.
16. The method of claim 14 wherein compilation of the method body comprises the stub code invoking a compiler with an address of the source code representation of the method body.
17. The method of claim 14 wherein compilation of the method body comprises: 


 referencing a cache of the class template representation for cached executable code for the invoked method; determining whether the cached executable code is compatible with the invoked method; replacing the address of the stub code in the method table with an address of the cached executable code if compatible.
18. The method of claim 17 wherein the cache is associated with a method descriptor.
19. The method of claim 17 wherein the cache includes the address of the cached executable code.
20. The method of claim 17 wherein the cache includes the address of a table mapping rules to cached executable code, the rules providing criteria for determining whether the cached executable code is compatible with the invoked method.
21. The method of claim 1 in a dynamic compilation execution environment.
22. A system for compiling program code including a class template and a template-generated class comprising: a representation of the class template, the class template representation being generated from a definition of the class template in the program code, the class template representation including methods; a representation of a template-generated class, the template-generated class being declared in the program code, the class representation including a pointer to the class template representation; and method bindings, the method bindings being generated from the methods of the class template representation, the method bindings being associated with the class representation for methods referenced in the program code, the method 


bindings being substantially limited to those methods referenced in the program code.
23. The system of claim 22 wherein method bodies of methods referenced in the program code are not compiled until invoked.
24. The system of claim 22 wherein the class template representation includes a source code representation of a type signature and a source code representation of a body, the source code representations of the type signature and the body being associated with a method.
25. The system of claim 24 wherein the source code representations are associated with a method descriptor.
26. The system of claim 24 wherein method bindings associated with a type signature object and a method offset, the type signature object resulting from compiling the source code representation of the type signature.
27. The system of claim 26 wherein method bindings are associated with the class representation.
28. The system of claim 27 wherein method bindings are associated with the class representation as elements of a linked list.
29. The system of claim 26 wherein the type signature obj ect and the method offset are used to compile a method call instruction, the method call instruction referencing the method of the class representation. 

30. The system of claim 26 wherein the class representation is scanned for a previously generated method binding representing one of the referenced methods, the class representation being scanned prior to the method binding being created.
31. The system of claim 30 wherein the class template representation is scanned for a source code representation of the type signature for the referenced method, the class template representation being scanned if the method binding is not found within the class representation.
32. The system of claim 24 wherein the class template representation includes a method table, the method table mapping the methods to stub code, the stub code initiating the compilation of the source code representation of the method body when executed.
33. The system of claim 32 wherein the class template representation includes a method table array, the method table array containing a reference to the method table.
34. The system of claim 32 wherein the class representation includes a copy of the method table of the class template representation.
35. A system of compiling the body of a method comprising: a class template representation, the class template representation including a source code representation of the body of a method; a class representation, the class representation including a method table, the method table storing an address of stub code for the method; and stub code, the stub code initiating compilation of the source code representation of the method body, the compilation of the method body resulting in executable code, an address of the executable code replacing the address of the stub code in the method table with the address of the executable code for the method. 

36. The system of claim 35 further comprising: an instance of the class representation, a method being invoked on the instance, the method table of the class representation being referenced for the address of the stub code associated with the invoked method, the method table being referenced prior to executing the stub code.
37. The system of claim 35 wherein the stub code invokes compilation of the method body with an address of the source code representation of the method body.
38. The system of claim 35 further comprises : a cache, the cache stored within the class template representation, the cache being referenced during compilation of the method body of the invoked method for cached executable code for the invoked method, an address of the cached executable code replacing the address of the stub code if compatible with the invoked method.
39. The system of claim 38 wherein the cache is associated with a method descriptor.
40. The system of claim 38 wherein the cache includes the address of the cached executable code.
41. The system of claim 38 wherein the cache includes the address of a table mapping rules to cached executable code, the rules providing criteria for determimng whether the cached executable code is compatible with the invoked method.
42. The system of claim 22 in a dynamic compilation execution environment.
43. A computer program product comprising: a computer usable medium for compiling program code including a class template and a template-generated class; 


 a set of computer program instructions embodied on the computer usable medium, including instructions to: create a representation of the class template from a definition of the class template in the program code, the class template representation including methods; create a representation of a class generated from the class template, the class being declared in the program code, the class representation including a pointer to the class template representation; and generate method bindings stored in the class representation for methods referenced in the program code, the method bindings being substantially limited to those methods referenced in the program code.
44. The computer program product of claim 43 further including instructions to: delay compilation of method bodies of the methods referenced in the program code until the method is invoked.
45. The computer program product of claim 43 wherein the class template representation includes a source code representation of a type signature and a source code representation for a body, the source code representations of the type signature and the body being associated with a method.
46. The computer program product of claim 45 wherein the source code representations are associated with a method descriptor.
47. The computer program product of claim 45 wherein the instruction to generate method bindings iήfludes instructions to: create a method binding; compile the source code representation of the type signature for the method resulting in a type signature object; and 


 associate the type signature object and a method offset with the method binding.
48. The computer program product of claim 47 further including instructions to: associate the method binding with the class representation.
49. The computer program product of claim 48 wherein method bindings are associated with the class representation as elements of a linked list.
50. The computer program product of claim 47 further including instructions to: compile a method call instruction using the type signature object and the method offset of the method binding, the method call instruction referencing the method of the class representation.
51. The computer program product of claim 47 further including instructions to: scan the class representation for a previously generated method binding for one of the referenced methods, the scanning occurring prior to creating the method binding.
52. The computer program product of claim 51 further including instructions to: scan the class template representation for a source code representation of the type signature for the referenced method, the scanning occurring if the method binding is not found in the class representation.
53. The computer program product of claim 45 wherein the class template representation includes a method table, the method table mapping the methods to stub code, the stub code initiating the compilation of the source code representation of the method body when executed. 

54. The computer program product of claim 53 wherein the class template representation includes a method table array, the method table array containing a reference to the method table.
55. The computer program product of claim 53 wherein the class representation includes a copy of the method table of the class template representation.
56. A computer program product comprising: a computer usable medium for compiling the body of a method; a set of computer program instructions embodied on the computer usable medium, including instructions to: provide a class template representation including a source code representation of the body of a method; provide a class representation including a method table, the method table storing an address of stub code for the method; execute the stub code, the stub code initiating compilation of the source code representation of the method body; compile the method body resulting in executable code; and replace the address of the stub code in the method table with an address of the executable code for the method.
57. The computer program product of claim 56 further including instructions to: instantiate an instance of the class representation; invoke the method on the instance; and reference the method table of the class representation for the address of the stub code associated with the invoked method, the referencing of the method table occurring prior to executing the stub code. 

58. The computer program product of claim 56 wherein the instructions to compile the method body includes the instructions to execute stub code that invokes a compiler with an address of the source code representation of the method body.
59. The computer program product of claim 56 wherein the instructions to compile the method body includes instructions to: reference a cache of the class template representation for cached executable code for the invoked method; determine whether the cached executable code is compatible with the invoked method; and replace the address of the stub code in the method table with an address of the cached executable code if compatible.
60. The computer program product of claim 59 wherein the cache is associated with a method descriptor.
61. The computer program product of claim 59 wherein the cache includes the address of the cached executable code.
62. The computer program product of claim 59 wherein the cache includes the address of a table mapping rules to cached executable code, the rules providing criteria for determining whether the cached executable code is compatible with the invoked method.
63. A computer data signal embodied in a carrier wave comprising a code segment for compiling program code that includes a class template and a template- generated class, the code segment comprising instructions for: creating a representation of the class template from a definition of the class template in the program code, the class template representation including methods; 


 creating a representation of a class generated from the class template, the class being declared in the program code, the class representation including a pointer to the class template representation; and generating method bindings stored in the class representation for methods referenced in the program code, the method bindings being substantially limited to those methods referenced in the program code.
64. The code segment of the computer data signal of claim 63 further comprising instructions for: delaying compilation of method bodies of the methods referenced in the program code until the method is invoked.
65. The code segment of the computer data signal of claim 63 wherein the class template representation includes a source code representation of a type signature and a source code representation of a body, the source code representations of the type signature and the body being associated with a method.
66. The code segment of the computer data signal of claim 65 wherein the source code representations are associated with a method descriptor.
67. The code segment of the computer data signal of claim 65 wherein the instruction for generating method bindings comprises: creating a method binding; compiling the source code representation of the type signature for the method resulting in a type signature object; and associating the type signature object and a method offset with the method binding.
68. The code segment of the computer data signal of claim 67 further comprising instructions for: 


 associating the method binding with the class representation.
69. The code segment of the computer data signal of claim 68 wherein method bindings are associated with the class representation as elements of a linked list.
70. The code segment of the computer data signal of claim 67 further comprising instructions for: compiling a method call instruction using the type signature object and the method offset of the method binding, the method call instruction referencing the method of the class representation.
71. The code segment of the computer data signal of claim 67 further comprising instructions for: scanning the class representation for a previously generated method binding for one of the referenced methods,, the scanning occurring prior to creating the method binding.
72. The code segment of the computer data signal of claim 71 further comprising instructions for: scanning the class template representation for a source code representation of the type signature for the referenced method, the scanning occurring if the method binding is not found in the class representation.
73. The code segment of the computer data signal of claim 65 wherein the class template representation includes a method table, the method table mapping the methods to stub code, the stub code initiating the compilation of the source code representation of the method body when executed. 

74. The code segment of the computer data signal of claim 73 wherein the class template representation includes a method table array, the method table array containing a reference to the method table.
75. The code segment of the computer data signal of claim 73 wherein the class representation includes a copy of the method table of the class template representation.
76. A computer data signal embodied in a carrier wave comprising a code segment for compiling the body of a method, the code segment comprising instructions for: providing a class template representation including a source code representation of the body of a method; providing a class representation including a method table, the method table storing an address of stub code for the method; executing the stub code, the stub code initiating compilation of the source code representation of the method body; compiling the method body resulting in executable code; and replacing the address of the stub code in the method table with an address of the executable code for the method.
77. The code segment of the computer data signal of claim 76 further comprising instructions for: instantiating an instance of the class representation; invoking the method on the instance; and referencing the method table of the class representation for the address of the stub code associated with the invoked method, the referencing of the method table occurring prior to executing the stub code. 

78. The code segment of the computer data signal of claim 76 wherein compilation of the method body comprises the stub code invoking a compiler with an address of the source code representation of the method body.
79. The code segment of the computer data signal of claim 76 wherein compilation of the method body comprises : referencing a cache of the class template representation for cached executable code for the invoked method; determining whether the cached executable code is compatible with the invoked method; replacing the address of the stub code in the method table with an address of the cached executable code if compatible.
80. The code segment of the computer data signal of claim 79 wherein the cache is associated with a method descriptor.
81. The code segment of the computer data signal of claim 79 wherein the cache includes the address of the cached executable code.
82. The code segment of the computer data signal of claim 79 wherein the cache includes the address of a table mapping rules to cached executable code, the rules providing criteria for determimng whether the cached executable code is compatible with the invoked method. 

</CLAIMS>
</TEXT>
</DOC>
