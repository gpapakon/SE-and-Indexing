<DOC>
<DOCNO>EP-0651514</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Programmable dedicated FPGA functional blocks for multiple wide-input functions.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F748	G06F7575	H03K19173	H03K19173	H03K19177	H03K19177	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	H03K	H03K	H03K	H03K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	H03K19	H03K19	H03K19	H03K19	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
According to the present invention, a plurality of 
programmable multi-bit output functional block modules, each 

capable of assuming the functionality of one of the set of 
adders, subtracters, magnitude comparators, identity comparators, 

up/down counters, registers, multi-bit ANDs, and similar devices, 
are placed in predetermined locations of the FPGA chip. The 

number of functional blocks is much fewer than the number of FPGA 
modules on the chip. Each of the functional blocks has a 

plurality of inputs and outputs, each of which is capable of 
being connected to the neighboring programmable interconnect 

resources. Communication between and amongst functional blocks 
is carried out with the standard programmable resources available 

on board the FPGA chip. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ACTEL CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
ACTEL CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KAPTANOGLU SINAN
</INVENTOR-NAME>
<INVENTOR-NAME>
KAPTANOGLU, SINAN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to the field of Field 
Programmable Gate Arrays (FPGAs). More particularly, it relates 
to a method and apparatus for improving the efficiency of FPGAs 
by inclusion of programmable dedicated multi-bit output 
functional blocks within FPGAs. FPGAs comprise a multitude of FPGA logic modules (the 
smallest programmable functional blocks on an FPGA) which in turn 
comprise a plurality of FPGA gates. FPGAs are user programmed to 
carry out desired functions. Examples of FPGAs are described in 
U.S. Patent 4,758,745 to Elgamal et al. and U.S. Patent 4,870,302 
to Freeman. Logic modules of FPGAs generally comprise multi-bit 
input, single-bit output devices which are programmable to create 
any desired output from a given input. This is accomplished in  
 
the prior art with multiplexer structures, look-up tables and 
logic gates, Logic modules are generally not programmable on the 
fly but are usually programmed by the user in a substantially 
permanent way. While FPGAs present an excellent and extremely flexible 
method of dealing with the processing of various digital signals, 
a relatively large number of FPGA logic modules are typically 
required in order to fashion such typical multi-bit functional 
blocks as adders, subtracters, magnitude comparators, identity 
comparators, up/down counters, registers, and multi-bit AND 
gates. Typically, several of these functional blocks are used 
for every few thousand FPGA gates. Using current technology, 
this can require a great number of FPGA modules to be dedicated 
to providing the functionality of these predictably required 
functional blocks. There are two major drawbacks to building these 
functional blocks out of FPGA logic modules: first, it uses more 
surface area or "real estate" on the chip than is absolutely 
necessary; second, the performance of functional blocks built out 
of FPGA logic modules is much lower than the performance of even 
corresponding ASIC standard cells configured to do the same 
thing. Another method of providing the functionality of the 
aforementioned functional blocks is to provide some additional 
distributed capability which resides in each of (or at least in a  
 
large number of) the individual FPGA logic modules. These 
enhancements can then be combined with the basic capabilities of 
the FPGA logic module itself to construct functional blocks which 
deliver higher performance in a smaller area than permitted by 
simply configuring standard FPGA modules to perform these 
functions. The drawback here
</DESCRIPTION>
<CLAIMS>
A user programmable FPGA architecture disposed on 
an integrated circuit, said architecture comprising: 

   a general interconnect structure; 
   a plurality of FPGA logic modules, each of said FPGA 

logic modules including I inputs and J outputs; 
   a plurality of functional block modules, each of said 

functional block modules including K inputs and L outputs, 
wherein K
>
I and L
>
J. 
A user programmable FPGA architecture disposed on 
an integrated circuit, according to claim 1, wherein said 

functional block modules are adapted for performing 
combinatorial operations on a first N-bit data word and a 

second N-bit data word, for N ≧ 2, provided by a 
corresponding first N-bit input data bus and a second N-bit 

input data bus, each of said functional block modules being 
independently programmable to perform one of the functions 

selected from the group of adder, counter, comparator, and 
AND gate. 
The user programmable FPGA architecture according 
to claim 2, wherein said functional block modules are 

programmable to perform one of the functions selected from 
the group of adder, counter, comparator, and AND gate based 

upon the states of a subset of said K inputs. 
A user programmable FPGA architecture according to 
 

claim 1, wherein said functional block modules are adapted 
for performing combinatorial operations on a first N-bit 

data word and a second N-bit data word, for N ≧ 2, provided 
by a corresponding first N-bit input data bus and a second 

N-bit input data bus, each of said functional block modules 
being independently programmable to perform one of the 

functions selected from the group of adder and AND gate. 
A user programmable FPGA architecture disposed on 
an integrated circuit, said architecture comprising: 

   a general interconnect structure; 
   a plurality of FPGA logic modules; 

   a plurality of functional block modules for 
performing combinatorial operations on a first N-bit data 

word and a second N-bit data word, for N ≧ 2, provided by a 
corresponding first N-bit input data bus and a second N-bit 

input data bus, each of said functional block modules 
independently programmable to perform one of the functions 

selected from the group of adder, subtracter, up-counter, 
down-counter, magnitude comparator, identity comparator, 

register, inverting register, AND gate, and decoder, said 
functional block modules including 

   an N-bit adder operatively connected to said first N-bit 
input data bus and said second N-bit input data bus, 

and 
   an N-bit adder output bus operatively connected to 

 
both an N+1 bit adder and an array of N 2-bit multiplexers. 
A user programmable FPGA architecture according to 
claim 5, wherein said functional block modules further 

include: 
   a first array of N 2-bit multiplexers having an input 

connected to said first N-bit input data bus and an output 
connected to a first N-bit multiplexer output; and 

   a second array of N 2-bit multiplexers having an 
input connected to said second N-bit input data bus and an 

output connected to a second N-bit multiplexer output; 
wherein said N-bit adder is operatively connected to said 

first N-bit multiplexer output and said second N-bit 
multiplexer output, and 

   said N-bit adder output bus is operatively connected 
to both an N+1 bit adder and a third array of N-2-bit 

multiplexers. 
A user programmable FPGA architecture according to 
claim 6, said functional block modules further include: 

   an N-bit inverter having an inverter input and an 
inverter output, said inverter input operatively connected 

to said second N-bit multiplexer output; and 
   a third array of N 2-bit multiplexers having a first 

input connected to said inverter output, a second input 
connected to said second N-bit multiplexer output, and an 

N-bit output; wherein
 

   said N-bit adder is operatively connected to said 
first N-bit multiplexer output and said N-bit output of 

said third array of N 2-bit multiplexers, and 
   said N-bit adder output bus is operatively connected 

to both an N+1 bit adder and a fourth array of N 2-bit 
multiplexers. 
</CLAIMS>
</TEXT>
</DOC>
