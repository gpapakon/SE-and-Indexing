<DOC>
<DOCNO>EP-0650278</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Network call management.
</INVENTION-TITLE>
<CLASSIFICATIONS>H04L1218	H04L1218	H04M356	H04M356	H04Q364	H04Q366	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04L	H04L	H04M	H04M	H04Q	H04Q	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04L12	H04L12	H04M3	H04M3	H04Q3	H04Q3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A network comprises a set of nodes (A-I), each comprising a computer
workstation in a computer network and including means responsive to

messages from other computers in the network to join or leave a call. Each
node (A-I) maintains a list of calls in which that node is participating, an

entry in the list for a call including the identities of all the other
nodes in that call. In order to split a single call one node sends messages

to a subset of nodes to join a second call, and leave the original call.
The remaining parties in the original call then continue in a call of

reduced scope. In order to merge two calls together, a node that is common
to both calls sends messages to all the nodes in both calls, instructing

them to leave the existing call and join a new call.

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ALDRED BARRY K
</INVENTOR-NAME>
<INVENTOR-NAME>
BONSALL GORDON W
</INVENTOR-NAME>
<INVENTOR-NAME>
LAMBERT HOWARD S
</INVENTOR-NAME>
<INVENTOR-NAME>
MITCHELL H DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
ALDRED, BARRY K.
</INVENTOR-NAME>
<INVENTOR-NAME>
BONSALL, GORDON W.
</INVENTOR-NAME>
<INVENTOR-NAME>
LAMBERT, HOWARD S.
</INVENTOR-NAME>
<INVENTOR-NAME>
MITCHELL, H. DAVID
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the management of calls over a 
computer network, and in particular the merging and splitting of such 
calls. Telephone conference calls are well-known in the art. Such calls are 
arranged so that a new party can be added to the conference by an existing 
person dialing out, and any of the existing parties can leave by hanging 
up. Some systems allow a new party to dial in to a call, but do not allow 
two existing multi-way calls to be merged into one, nor allow a single 
existing multi-way call to be split into two. These restrictions are partly 
due to the nature of existing PSTN equipment, and in particular the very 
limited degree of control information that can be exchanged with a 
conventional telephone. Furthermore merging and splitting have to be very 
carefully coordinated across the various nodes if they are to be 
successful. More recently, multi-media conferencing facilities have been 
developed, which provide both video and voice connections (see eg 
"Distributed Multiparty Desktop Conferencing System: MERMAID", by K Watabe, 
S Sakata, K Maeno, H Fukuoka, T Ohmori, in "CSCW '90: Proceedings of the 
Conference on Computer-Supported Cooperative Work", 1990). A CCITT proposal 
(part of the T.12x draft standards) for a Multi-media Control Unit to 
handle multi-media conferencing imposes many of the same restrictions as 
currently exist for telephone conferences. This is partly due to the 
adoption of a relatively fixed, hierarchical structure, which centralises 
control at a single node. A need exists for a call management system which 
does not suffer from such limitations. Accordingly, the invention provides a method of splitting an initial 
call that exists across an initial set of nodes into first and second calls 
across two disjoint subsets of the initial set, each node comprising a 
computer workstation in a computer network and including means responsive 
to messages from other computers in the network to join or leave a call, 
and each node maintaining a list of calls in which that node is 
participating, an entry in the list for a call including the identities of 
all the other nodes in that call, the method comprising the steps of:
 
 
   producing at one node in said initial set a list of the subset of 
nodes to be included in said first call, whereby the second call is to be 
between nodes in the initial set but not in said subset;
 
   said one node sending a message to each node in said subset of nodes 
including instructions to leave said initial
</DESCRIPTION>
<CLAIMS>
A method of splitting an initial call that exists across an initial 
set of nodes into first and second calls across two disjoint subsets of the 

initial set, each node comprising a computer workstation in a computer 
network and including means responsive to messages from other computers in 

the network to join or leave a call, and each node maintaining a list of 
calls in which that node is participating, an entry in the list for a call 

including the identities of all the other nodes in that call, the method 
comprising the steps of: 

   producing at one node in said initial set a list of the subset of 
nodes to be included in said first call, whereby the second call is to be 

between nodes in the initial set but not in said subset; 
   said one node sending a message to each node in said subset of nodes 

including instructions to leave said initial call and join said first call; 
   each node upon receipt of said message performing the necessary 

actions to leave the initial call and join the first call. 
A method of splitting a call as claimed in claim 1, wherein each call 
has a name, and no node may participate in two calls having the same name, 

the method further comprising the steps of producing at said one node a 
name for said first call, and including the name for said first call in the 

messages sent to each node of said subset. 
A method of splitting a call as claimed in claim 2, further 
comprising the step of including the name of the initial call in the 

messages sent to each node in said subset. 
A method of splitting a call as claimed in any preceding claim, 
wherein as each node of said subset receives said message from said one 

node, it sends back a confirmation message to said one node, which then 
forwards the message to the other nodes that have so far joined said 

subset. 
A method of merging first and second calls that exist across first 
and second initial sets of nodes into a single call across a superset of 

said first and second initial sets, each node comprising a computer 
workstation in a computer network and including means responsive to 

messages from other computers in the network to join or leave a call, and 
each node maintaining a list of calls in which that node is participating, 

 
an entry in the list for a call including the identities of all the other 

nodes in that call, the method comprising the steps of: 
   one node sending a message to each node in said first initial set of 

nodes including instructions to leave said first call and join said single 
call; 

   said one node sending a message to each node in said second initial 
set of nodes including instructions to leave said second call and join said 

single call; 
   each node upon receipt of said message performing the necessary 

actions to leave the first or second initial call as appropriate and join 
the single call. 
A method of merging a call as claimed in claim 5, wherein each call 
has a name, and no node may participate in two calls having the same name, 

the method further comprising the steps of producing at said one node a 
name for said single call, and including the name for said single call in 

the messages sent to each node in said first and second sets. 
A method of merging a call as claimed in claim 6, further comprising 
the step of including the name of the first call in the message sent to 

each node in said first set, and the name of the second call in the message 
sent to each node in said second set. 
A method of merging a call as claimed in any of claims 5 to 7, 
further comprising the initial step of selecting said one node, and if the 

selected node is not already included in both the first and second calls, 
adding said one node to the first or second call as appropriate. 
A method of merging or splitting a call as claimed in any preceding 
claim, wherein a node cannot be remotely compelled to leave a call, but 

wherein nodes are responsive to requests from other nodes to perform such 
an action. 
</CLAIMS>
</TEXT>
</DOC>
