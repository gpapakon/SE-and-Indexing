<DOC>
<DOCNO>EP-0657808</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method of associating objects on different pages of a notebook window.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Provided is a method and apparatus for aiding a program builder in 
linking objects (123, 124) in a visual application builder where the 

objects are on different pages (121, 125) of the application builder 
notebook. When the target object (124) is on another page (125) of the 

notebook, the user selects the source object (123). The user then flips 
the notebook page. During the page flipping, the selected source object 

is shown as an outline shadow with a page number (P1) under it. If the 
new page is shown with the desired target object on it, the user drags 

and drops a link (127) between the shadow source object and the target 
object to make a connection. If the user flips to the source object page, 

then the target object will become the shadow object with a page number 
label next to it. If the shadow object is too big and covers the target 

object completely or for any other reason, the user may want to 
optionally use the outside page connector technique. This can be done by 

dragging and dropping the link from the source object to any point 
outside the notebook. The ending point of the link (outside the notebook) 

will have an outside page connector ICON appear. The user flips the 
notebook to find the target object. After the target object page is 

displayed, the user draws a link from the outside page connector to the 
target object. The user may navigate between the source and target pages 

by clicking on the page connector ICON. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BERRY RICHARD E
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG JOHN S
</INVENTOR-NAME>
<INVENTOR-NAME>
BERRY, RICHARD E.
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG, JOHN S.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention generally relates to the art of object 
oriented programming in the field of computer science and, more 
particularly, to a technique for logically associating objects on 
different pages of a paginated graphical user interface (GUI) program 
representation. The field of computer science known as object oriented programming 
(OOP) is now the preferred environment for building user-friendly, 
intelligent computer software. Key elements of OOP are data 
encapsulation, inheritance and polymorphism. These elements may be used 
to generate a graphical user interface (GUI), typically characterized by 
a windowing environment having icons, mouse cursors and menus. While 
these three key elements are common to OOP languages, most OOP languages 
implement the three key elements differently. Examples of OOP languages are Smalltalk, Object Pascal and C++. 
Smalltalk is actually more than a language; it might more accurately be 
characterized as a programming environment. Smalltalk was developed in 
the Learning Research Group at Xerox's Palo Alto Research Center (PARC) 
in the early 1970s. In Smalltalk, a message is sent to an object to 
evaluate the object itself. Messages perform a task similar to that of 
function calls in conventional programming languages. The programmer 
does not need to be concerned with the type of data; rather, the 
programmer need only be concerned with creating the right order of a 
message and using the right message. Object Pascal is the language used 
for Apple's Macintosh® computers. Apple developed Object Pascal with the 
collaboration of Niklaus Wirth, the designer of Pascal. C++ was 
developed by Bjarne Stroustrup at the AT&T Bell Laboratories in 1983 as 
an extension of C, which is the language in which the Unix® operating  
 
system is written. The key concept of C++ is class, which is a user-defined 
type. Classes provide object oriented programming features and 
typically has two kinds of clients called instances and subclasses. C++ 
modules are compatible with C modules and can be linked freely so that 
existing C libraries may be used with C++ programs. The preferred 
embodiment of the invention is written in C++. The most widely used object based and object oriented programming 
languages trace their heritage to Simula developed in the 1960s by O-J. 
Dahl, B. Myhrhaug and K. Nygard of Norway. Further information on the 
subject of Object Oriented Programming may be had by reference to Object 
Oriented Design with Applications by Grady Booch, The
</DESCRIPTION>
<CLAIMS>
A method of linking objects on different pages of a visual program 
builder comprising the steps of: 

   responding to a user command to link objects by switching to a link 
mode of operation; 

   responding to a user selection of a source object on a first page 
of the visual program builder by generating a link line extending from 

the source object to a pointing cursor; 
   responding to a user tab to a second page of the visual program 

builder by displaying said second page with a target object; and 
   responding to a user selection of the target object by extending 

the link line to the target object, completing the logical link of the 
source object to the target object in the visual program builder. 
A method according to claim 1 wherein, upon displaying said second 
page, the source object is displayed in shadow form on the second page, 

and the step of completing the link includes generating a link line from 
the shadow form of the source object to the target object. 
A method recited in claim 2 further comprising the step of 
responding to a user tab to the first page of the visual program builder, 

after the step of completing the link, by displaying said first page with 
the target object in shadow form. 
A method according to any one of the preceding claims, wherein, in 
response to a user moving the pointing cursor off the first pa
ge starting 
from the source object, a page connector icon is generated off the first 

page, said page connector icon including a page number corresponding to 
said first page, and wherein the step of extending the link line upon 

selecting the target object on the second page is done by drawing the 
link line from the page connector icon off the page to the target object. 
A method according to claim 4, further comprising the step of 
responding to a user tab to the first page of the visual program builder, 

after the step of completing the link, by displaying said first page with 
 

the page connector icon off the page but with a page number corresponding 
to said second page. 
A method according to claim 5, further comprising the step of 
navigating between the first and second pages of the visual program 

builder by responding to a user selection of the page connector icon and 
flipping to a page corresponding to the page number in the page connector 

icon. 
A method according to any one of the preceding claims, further 
comprising, after the step of completing the logic link of the source 

object to the target object, the step of responding to a user command to 
hide the link by not displaying the link line between the source and 

target objects. 
An apparatus for linking objects on different pages of a visual 
program builder comprising: 

   an input device for receiving a user command to link objects by 
switching to a link mode of operation; 

   a pointing cursor device controlled by a user to select a source 
object on a first page of the visual program builder by generating a link 

line extending from the source object to a pointing cursor; and 
   page selection means responsive to a user tab to a second page of 

the visual program builder for displaying said second page with a target 
object; 

   said pointing cursor device further being controlled by a user to 
select the target object by extending the link line to the target object, 

thereby to actuate means for completing the logical link of the source 
object to the target object in the visual program builder. 
Apparatus according to claim 8, wherein the page selection means 
includes means for displaying on said second page the source object in 

shadow form, and said pointing cursor device is associated with means for 
completing the link in response to the cursor device generating a link 

line from the shadow form of the source object to the target object. 
</CLAIMS>
</TEXT>
</DOC>
