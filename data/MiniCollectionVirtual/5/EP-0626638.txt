<DOC>
<DOCNO>EP-0626638</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A one's complement adder and method of operation.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F738	G06F738	G06F748	G06F750	G06F7505	G06F7508	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A one's complement adder (18) has a plurality of adder cells 
(20 through 35) and generate propagate circuitry (36 through 40) for 

adding a first and a second operand. Each of the adder cells logically 
adds a selected differing set of input bits. Each set of input bits has 

a first bit, a second bit and a third bit. The output of each of the 
adder cells generates a sum bit that is logically equivalent to the 

least significant bit of a mathematical sum of the three bits. The 
generate-propagate circuitry generates a generate signal and a 

plurality of carry bit signals. The generate signal is coupled to one 
of the adder cells to generate one of the third bits. The plurality of 

carry bits generates the remaining third bits. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HO YING-WAI
</INVENTOR-NAME>
<INVENTOR-NAME>
HO, YING-WAI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention generally relates to digital computing 
systems, and more specifically to a one's complement adder. Several protocols exist for the representation of binary 
numbers in digital computing systems. One of these protocols is 
known as "one's complement." In a one's complement representation, 
the negation operation of a number is generated by inverting each bit 
of the number. For instance, the binary representation of the 
decimal number two and negative two is (0010) and (1101), (from 
most significant to least significant bit) respectively. The most 
significant bit indicates the sign of the number. A logic one in the 
most significant bit indicates that the number is a negative number. 
A logic zero in the most significant bit indicates that the number is 
a positive number. This format is obviously convenient to use when 
the sign of a number is material to a calculation. Also, the same 
adder can easily perform an add operation of all four sign 
permutations (A+B, A-B, -A+B, -A-B) of two operands. One's complement representation has at least one 
disadvantage: after an addition operation, an additional step is 
necessary to obtain the correct result. The most significant carry 
bit must be added to the least significant result or sum bit. This 
"wrap-around" carry may cause other bits to change also. For 
instance the sum of three (0011) and negative two (1101) is one. 
However, a straight bit add of (0011) and (1101) is (10000), where 
the leading one corresponds to the carry bit from the fourth bit add. 
In one's complement representation, four zeros correspond to a  
 
(positive) zero. As described above, if the most significant carry bit 
is added to the least significant bit add result, then the correct 
result is obtained: (0001). FIG.s 1 and 2 depict a first and a second one's complement 
adder known in the art. Both adders add two input operands, labeled 
A and B, and generate a sum result, labeled S. A, B and S are 
represented in one's complement notation. In the adder 10 depicted 
in FIG. 1, a carry-look-ahead adder 12 (hereafter simply CLA adder) 
generates a generic bit add of the two operands A and B and a most 
significant carry bit, COUT. The generic bit add result and most 
significant carry bit are input to an incrementer 14. Incrementer 14 
adds its two inputs in a subsequent clock cycle. As depicted, the 
least significant carry bit input, CIN, to CLA adder 12 is always a 
logic zero. In the adder 16 depicted in FIG. 2, the most significant 
carry bit of a
</DESCRIPTION>
<CLAIMS>
A one's complement adder (18) comprising: 
   a plurality of adder cells (20 through 35) logically adding 

a plurality of sets of input bits, each of the 
plurality of sets comprising a first bit and a second 

bit, each of the plurality of adder cells comprising: 
   a first input terminal for receiving the first bit (A) 

of a selected one of the plurality of sets; 
   a second input terminal for receiving the second bit 

(B) of the selected one of the plurality of 
sets; 

   a third input terminal for receiving a third bit (CiN) 
of the selected one of the plurality of sets; 

   result circuitry (46, 48) coupled to the first, 
second and third input terminals for 

generating a sum bit, the sum bit being 
logically equivalent to a least significant bit 

of a mathematical sum of the first, second 
and third bits of the selected set; and 

   generate-propagate circuitry (42, 44) coupled to each of 
the first and second input terminals, the generate-propagate 

circuitry generating a generate signal 
and a plurality of carry bit signals, the generate 

signal coupled to the third terminal of a selected 
one of a plurality of adder cells, each of the 

plurality of carry bit signals coupled to the third 
terminal of a selected differing one of the 

remaining adder cells of the plurality of adder 
cells. 
A one's complement adder (18) for adding a first operand, A, 
and a second operand, B, the first operand and second operand 

each comprising a plurality of n bits, where n is an integer, the 
one's complement adder comprising: 

   a plurality of n bit means (20 through 35), each of the plurality 
of n bit means adding a selected ith one of a plurality of 

sets of received bits, where i is an integer index ranging 
from 0 to n-1, the selected ith set of the plurality of 

sets of received bits comprising an ith one of the first 
operand bits, A, and an ith one of the second operand bits, 

B, a selected first one of the plurality of sets of received 
bits comprising a generate bit, G'', the remaining ones of 

the plurality of sets of received bits comprising an ith 
one of a plurality of carry bits, C, an ith
 one of the 
plurality of n bit means generating an ith one of a 

plurality of sum bits, S, an ith one of a plurality of 
generate bits, G, and an ith one of a plurality of 

propagate bits, P, whereinS₀ = A₀ ⊕ B₀ ⊕ G'' for i=0, Si = Ai ⊕ Bi ⊕ Ci for i≠0, Gi = AiBi, and Pi = Ai + Bi; 
 

   a group generate means (50) coupled to the plurality of n bit 
means, the group generate means generating the group 

generate bit, G'', wherein 
 

and
 

   a plurality of n-1 carry bit means (60, 68, 74) respectively 
coupled to (n-1) ones of the plurality of n bit means, an 

ith one of the plurality of n-1 carry bit means 
generating the ith one of the plurality of carry bits, 

whereinCi+1 = Gi + PiGi-1 + PiPi-1Gi-2 +...+PiPi-1...P₀G'' for 0≦ i
<
 n-1. 
A method of adding a first operand, A, and a second operand, B, 
in one's complement representation, each operand comprising n 

bits, where n is an integer, the method comprising the steps of: 
   generating a plurality of sum bits, each sum bit 

generated by a selected differing one of a plurality 
of adder cells, each one of the plurality of sum bits 

logically equivalent to a least significant bit of a 
selected one of a plurality of mathematical sums, 

each one of the plurality of mathematical sums is a 
sum of: (1) a selected differing one of a plurality of 

first operand bits, (2) a selected differing one of a 
plurality of second operand bits and (3) a selected 

differing one of a plurality of third bits; and 
   generating the plurality of third bits in a generate-propagate 

circuit coupled to the plurality of adder 
cells comprising the steps of: 

   generating a group generate signal; 
   generating a plurality of carry bits; and 

   providing the group generate signal and the 
plurality of carry bits as the plurality of 

third bits. 
The method of claim 3 wherein the step of generating a 
plurality of sum bits further comprises the steps of: 

   generating a plurality of bit generate signals; and
 

   generating a plurality of bit propagate signals. 
The method of claim 4 wherein the step of generating a 
plurality of sum bits comprises the step of generating an ith 

sum bit of the plurality of sum bits, S, where i is an integer 
index ranging from 0 to n-1, according to the following 

expression:S₀ = A₀ ⊕ B₀ ⊕ G'' for i=0, Si = Ai ⊕ Bi ⊕ Ci for i≠0; and 
 

   wherein the step of generating a plurality of third bits comprises 
the step of generating the plurality of bit generate signals, G, 

the plurality of bit propagate signals, P, the plurality of carry 
bits, C, and the group generate signal, G'', according to the 

following expressions:Gi = AiBi, Pi = Ai + Bi; and Ci+1 = Gi + PiGi-1 + PiPi-1Gi-2+...+PiPi-1...P₀G'', 
</CLAIMS>
</TEXT>
</DOC>
