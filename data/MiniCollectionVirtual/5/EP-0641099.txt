<DOC>
<DOCNO>EP-0641099</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and circuit for intermediate storage of data packets and a node having such circuit
</INVENTION-TITLE>
<CLASSIFICATIONS>H04J324	H04L1256	H04J324	H04L1256	H04Q1104	H04Q300	H04Q300	H04Q1104	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04J	H04L	H04J	H04L	H04Q	H04Q	H04Q	H04Q	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04J3	H04L12	H04J3	H04L12	H04Q11	H04Q3	H04Q3	H04Q11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
During overload conditions, the probability of loss of data packets (D4-D8) is approximately of equal magnitude in all queues (QU1, QU2). The loss probability cannot be graded. Data packets (D4-D8) are temporarily stored in a number of logical queues (QU1, QU2) which are dynamically allocated the storage locations of a common buffer memory (MEM). The unavoidable loss of data packets is systematised by selective discarding of data packets. A data packet (D6-D8) stored in a low-priority queue (QU2) is deleted when an incoming data packet (D1) is allocated to a higher-priority queue (QU1) and the total length of queues has exceeded a certain length.   - A buffer with various adjustable access control or operating procedures can be implemented in a simple manner.   - Fast solution, suitable for ATM.   
<
IMAGE
>
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
CIT ALCATEL
</APPLICANT-NAME>
<APPLICANT-NAME>
ALCATEL
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SCHRODI KARL
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLMANN GERT
</INVENTOR-NAME>
<INVENTOR-NAME>
WIPPENBECK MATTHIAS
</INVENTOR-NAME>
<INVENTOR-NAME>
SCHRODI, KARL
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLMANN, GERT
</INVENTOR-NAME>
<INVENTOR-NAME>
WIPPENBECK, MATTHIAS
</INVENTOR-NAME>
</INVENTORS>
<CLAIMS>
Method for the intermediate storage of data packets, wherein the incoming data
packets (D1, D2, D3) are distributed to and intermediately stored in several

logical queues (QU1, QU2) on the basis of data (P1, P2) recorded in them,
wherein the overall length (n) of all logical queues (QU1, QU2) is determined and

data is determined concerning to which logical queue an incoming data packet
(D1, D2, D3) is allocated, and wherein individual data packets are rejected if

proper treatment is not ensured for all data packets, 
characterized in that
 all of
these logical queues (QU1, QU2) share a common buffer memory (MEM) whose

memory locations are dynamically assigned to the individual logical queues
(QU1, QU2) only when required, that a reference value (S1, S2) is assigned to

each logical queue, that the determined overall length (n) of all logical queues
(QU1, QU2) is compared with each of the reference values (S1, S2) assigned to

the logical queues (QU1, QU2) and that the data packets (D1, D2, D3) to be
rejected are selected on the basis of the results of these comparisons and on the

basis of the determined data on the allocation of data packets (D1, D2, D3) to
logical queues.
Method according to Claim 1, 
characterized in that
 data packets to be rejected are
rejected before they are entered into a logical queue (QU1, QU2).
Method according to Claim 1, 
characterized in that
 data packets to be rejected are
removed for a logical queue (QU1, QU2).
Method according to Claim 1, 
characterized in that
 there is recorded in each data
packet data (P1, P2) which assigns a priority class to this data packet, and that for

each priority class, a separate logical queue (QU1, QU2) is provided in which the
data packets (D5, D4; D8, D7, D6) assigned to this priority class
 are
intermediately stored. 
Method according to Claim 1, 
characterized in that
 incoming data packets (D1,
D2, D3) are rejected if the overall length (n) of the logical queues (QU1, QU2)

exceeds that reference value (S1, S2) which is assigned to that logical queue
(QU1, QU2) to which the incoming data packet (D1, D2, D3) is allocated.
Method according to Claim 1, 
characterized in that
 data (n
2
) on the length of one
of the logical queues is determined and that the data packets (D1, D2, D3) to be

rejected are additionally selected on the basis of this determined data.
Facility for the intermediate storage of data packets, with a buffer memory
(MEM) in which several logical queues (QU1, QU2) are formed for the

intermediate storage of the data packets, with a write device (WR) which is
designed to enter an incoming data packet (D1, D2, D3) into one of the logical

queues (QU1, QU2) on the basis of data (P1, P2) recorded in the said data packet,
and with a server (SER) for reading out data packets from the logical queues

(QU1, QU2), 
characterized in that
 the facility is provided with a memory
management device (MCONTR) for managing the logical queues (QU1, QU2)

which is designed to dynamically assign memory locations to the individual logic
queues (QU1, QU2) only when required, that the memory management device

(MCONTR) is provided with a device for determining the overall length (n) of all
logical queues (QU1, QU2) and that the write device (WR) is provided with an

access control device (ZUG) for rejecting data packets which is designed so that a
reference value (S1, S2) is assigned to each logical queue and that the determined

overall length (n) of all logical queues (QU1, QU2) is compared with each of the
reference values (S1, S2) assigned to the logical queues (QU1, QU2), and that the

access control device (ZUG) is further designed, for the decision on the rejection
of data packets, to link the results of these comparisons with data which indicates

to which logical queue (QU1, QU2) an incoming data packet (D1, D2, D3) is
allocated.
Facility according to Claim 7, 
characterized in that
 the write device (WR) is
provided with a device (DIV) for assigning a time stamp (TS) to each incoming 

data packet (D1, D2, D3), and that the server (SER) is designed so that the
sequence in which the logical queues (QU1, QU2) are serviced during read-out

can be influenced by the time stamps (TS).
Facility according to Claim 7, 
characterized in that
 the server (SER) is designed
so that it is possible to switch between several operating modes which determine

the sequence in which the individual queues are serviced.
Device according to Claim 7, 
characterized in that
 the access control device
(ZUG) is designed so that it is possible to switch between at least two operating

modes which relate to the rejection of data packets.
Switching centre for a communication network for the transportation of data
packets, with at least one facility for the intermediate storage of data packets

which is provided with a buffer memory (MEM) in which are formed several
logical queues (QU1, QU2) for the intermediate storage of the data packets, with

a write device (WR) which is designed to enter an incoming data packet (D1, D2,
D3) into one of the logical queues (QU1, QU2) on the basis of data (P1, P2)

recorded in the said data packet, and with a server (SER) for reading out data
packets from the logical queues (QU1, QU2), 
characterized in that
 the facility is
provided with a memory management device (MCONTR) for managing the

logical queues (QU1, QU2) which is designed to dynamically assign memory
locations to the individual logic queues (QU1, QU2) only when required, that the

memory management device (MCONTR) is provided with a device for
determining the overall length (n) of all logical queues (QU1, QU2) and that the

write device (WR) is provided with an access control device (ZUG) for rejecting
data packets which is designed so that a reference value (S1, S2) is assigned to

each logical queue and that the determined overall length (n) of all logical queues
(QU1, QU2) is compared with each of the reference values (S1, S2) assigned to

the logical queues (QU1, QU2), and that the access control device (ZUG) is
further designed, for the decision on the rejection of data packets, to link the 

results of these comparisons with data which indicates to which logical queue
(QU1, QU2) an incoming data packet (D1, D2, D3) is allocated.
</CLAIMS>
</TEXT>
</DOC>
