<DOC>
<DOCNO>EP-0634719</DOCNO> 
<TEXT>
<INVENTION-TITLE>
System and method for distributed computation based upon the movement, execution, and interaction of processes in a network.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F946	G06F946	G06F950	G06F1300	G06F1300	G06F1516	G06F1516	G06N500	G06N504	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06N	G06N	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	G06F13	G06F13	G06F15	G06F15	G06N5	G06N5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A distributed computing environment in which agent 
processes direct their own movement through a computer 

network. Place processes provide a computing context 
within which agent processes are interpreted. An agent 

process controls its movement from one place process to 
another within the network by using a ticket. An agent 

process which moves from one place process to another 
transports definitions of classes of which objects 

included in the agent process are members. An agent 
process which moves from one place process to a second 

place process avoids unnecessary transportation of objects 
included in the agent process by substituting equivalent 

objects which are found in the second place process. An 
agent process sends clones of the agent process to several 

place processes simultaneously. If two clones travel 
along paths which are coextensive for an initial portion 

thereof, a single clone is transported along the initial 
portion of the paths and other clones are formed from the 

single clone, thereby avoiding transferring redundant 
information along communications media. Two agent 

processes, which occupy a single place process, interact 
by exchanging references to one another. The single place 

process ensures that neither agent process receives a 
reference to the other agent process without 

simultaneously giving to the other agent process a 
reference to the former agent process. Unauthorized or 

inadvertent excessive use of network resources by an agent  
 

process, or a place process, is prevented by associating 
with each process a permit which defines various 

capabilities and resource allowances of the process. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
GEN MAGIC INC
</APPLICANT-NAME>
<APPLICANT-NAME>
GENERAL MAGIC, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HELGESON CHRISTOPHER S
</INVENTOR-NAME>
<INVENTOR-NAME>
STEEDMAN DOUGLAS A
</INVENTOR-NAME>
<INVENTOR-NAME>
WHITE JAMES E
</INVENTOR-NAME>
<INVENTOR-NAME>
HELGESON, CHRISTOPHER S.
</INVENTOR-NAME>
<INVENTOR-NAME>
STEEDMAN, DOUGLAS A.
</INVENTOR-NAME>
<INVENTOR-NAME>
WHITE, JAMES E.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
(copies of which have 
been filed with this application and form part of US 
application 08/090,521 which was filed at the United States 
Patent Office on 8 July 1993. Appendix E, which is incorporated herein by 
reference, describes the interchange of objects during the 
movement of a process through a network in one embodiment 
of the present invention, which is described more 
completely below. Appendix F, which is incorporated herein by 
reference, describes the transfer of data between computer 
systems interconnected via a network in one embodiment of 
the present invention. Appendix G, which is incorporated herein by 
reference, is a list of computer programs and related data 
in one embodiment of the present invention, which is 
described more completely below. A portion of the disclosure of this patent document 
contains material which is subject to copyright 
protection. The copyright owner has no objection to the 
facsimile reproduction by anyone of the patent document or 
the patent disclosure, as it appears in the Patent and 
Trademark Office patent files or records, but otherwise 
reserves all copyright rights whatsoever. This invention relates to a distributed computing 
environment and in particular, to an improved distributed 
computing environment wherein processes are created in an 
object oriented environment and direct their own movement 
throughout a computer network.  Many different computing systems are available today, 
but most of these systems are built around fundamental 
components such as those illustrated in Figure 1. 
Typically, a computer system 20 includes a central 
processing unit 10 (CPU), which is connected through an 
input bus 11 to an input module 12 and through an output 
bus 13 to an output module 14. CPU 10 is also connected 
through data buses 15, 16 to a memory unit 17. CPU 10 provides control and computing functions. 
Input and output modules 12, 14 are used to communicate 
between the computer user and CPU 10. Input module 12 
supplies information to CPU 10. Typical input devices are 
a keyboard and a mouse. Output module 14 displays 
information from central processing unit 10. Typical 
output modules include video display monitors, printers, 
plotters and other visual display means. Input unit 12 
and output unit 14 are frequently referred to as 
input/output (I/O) units. Memory unit 17 typically contains two general types 
of information, instructions and data. A computer program 
is a sequence of instructions that are executed by the 
computer to
</DESCRIPTION>
<CLAIMS>
A method for implementing remote programming in a 
computer network comprising the steps of: 

      defining a plurality of object-oriented classes 
including an agent class and a place class; 

      forming instructions for a computer process, said 
instructions including said object-oriented classes, 

subclasses of said object-oriented classes, and a go 
operation; and 

      interpreting said instructions on a processor in 
said computer network wherein, in response to said go 

operation, an agent process is transported to a place 
process and further wherein said agent process is a 

member of said agent class and said place process is a 
member of said place class. 
The method for implementing remote programming in 
a computer network as in Claim 1 further comprising forming 

said go operation within said agent process. 
The method for implementing remote programming in 
a computer network as in Claim 1 further comprising: 

      defining a class of class objects; 
      forming a class object, wherein said class object 

(i) is a member of said class of class objects, and (ii) 
defines a first class which is a subclass of a selected 

one of said object-oriented classes; and 
      forming an object, said object being a member of 

said first class; 
         wherein said agent process owns said object; 

and transportation of said agent process to said 
place process comprises transporting said object 

and said class object to said place process. 
A method for implementing remote programming in a 
computer network comprising the steps of:

 
      defining a plurality of object-oriented classes 

including an agent class and a place class; 
      forming instructions for a computer process 

including said object-oriented classes, subclasses of 
said object-or
iented classes, and a send operation; and 
      interpreting said instructions on a processor in 

said computer network wherein, in response to said send 
operation, a clone of an agent process is transported to 

a place process and further wherein said clone and said 
agent process are each a member of said agent class and 

said place process is a member of said place class. 
The method for implementing remote programming in 
a computer network as in Claim 4 further comprising forming 

said send operation within said agent process. 
The method for implementing remote programming in 
a computer network as in Claim 1, 2, 4 or 5 further comprising 

forming a subplace of said place wherein said subplace is a 
member of said place class and said place is a superplace of 

said subplace. 
The method for implementing remote programming in 
a computer network as in any one of Claims 1, 2 or 4 to 6 

further comprising designating said agent process as an owner 
of an object. 
The method for implementing remote programming in 
a computer network as in Claim 7 wherein transportation of 

said clone comprises transporting a copy of said object to 
said place process. 
The method for implementing remote programming in 
a computer network as in Claim 7 or 8 further comprising 

forming within said object a digest. 
The method for implementing remote programming in 
 

a computer network as in Claim 9 further comprising 
interchanging for said first-mentioned object a second object 

at said place process wherein said second object has a second 
digest equivalent to said first-mentioned digest and further 

wherein said first object is not transported to said place 
process. 
The method for implementing remote programming in 
a computer network as in Claim 8 or 9 when appended to claim 

4, 5 or 6 further comprising interchanging for said copy a 
second object, which is different from said first-mentioned 

object, at said place process wherein said second object has a 
second digest equivalent to said first-mentioned digest and 

further wherein said copy is not transported to said place 
process. 
The method for implementing remote programming in 
a computer network as in any one of Claims 1 to 11 further 

comprising specifying said place process by a ticket means. 
The method for implementing remote programming in 
a computer network as in Claim 12 further comprising forming 

said ticket means within said agent process. 
The method for implementing remote programming in 
a computer network as in Claim 12 or 13 further comprising 

forming within said ticket means an address of said place 
process. 
The method for implementing remote programming in 
a computer network as in Claim 14 wherein said address is a 

teleaddress 
The method for implementing remote programming in 
a computer network as in any one of Claims 12 to 15 further 

comprising forming within said ticket means a name of said 
place process. 
The method for implementing remote programming in 
a computer network as in Claim 16 wherein said name is a 

telename. 
The method for implementing remote programming in 
a computer network as in Claim 4 further wherein, in response 

to said send operation, a second clone of said agent process 
is transported to a second place process wherein said second 

clone is a member of said agent class and is distinct from 
said first-mentioned clone and further wherein said second 

place process is a member of said place class. 
The method for implementing remote programming in 
a computer network as in Claim 18 further comprising: 

      determining that transportation of said first 
clone to said first place process and of said second 

clone to said second place process requires 
transportation of said first and second clones to a 

single computer of a plurality of computers of said 
computer network; 

      transporting said first clone to said single 
computer; and 

      forming, in a single computer, said second clone 
from said first clone. 
The method for implementing remote programming in 
a computer network as in Claim 19 further comprising: 

      transporting said first clone from said single 
computer to said first-mentioned place process; and 

      transporting said second clone from said single 
computer to said second place process. 
A method for interprocess communication in a 
computer comprising the steps of: 

      defining a plurality of object-oriented classes 
including an agent class;

 
      forming instructions for a computer process 

including said object-oriented classes, subclasses of 
said object-oriented classes, and a meet operation; and 

      interpreting said instructions on a processor in 
said computer network wherein, in response to said meet 

operation, a meeting place process provides a first 
agent process access to a second agent process and 

provides said second agent process access to said first 
agent process and further wherein said first and second 

agent processes are members of said agent class. 
The method for interprocess communication in a 
computer as in Claim 21 wherein said meeting place process is 

a member of a place class in said plurality of object-oriented 
classes and further wherein said first and second agent 

processes occupy said meeting place process. 
The method for interprocess communication in a 
computer as in Claim 22 further comprising forming a second 

place process wherein: 
      said second place process is a member of said 

place class; 
      said second place process is a subplace of said 

meeting place process; and 
      said meeting place is a superplace of said second 

place. 
A method for controlling movement of processes in 
a computer network, said method comprising the steps of: 

      defining a plurality of object-oriented classes 
including an agent class, a place class, and a ticket 

class; 
      forming a plurality of place processes in said 

computer network wherein each of said plurality of place 
process is a member of said place class; 

      forming an agent process wherein said agent 
process is a member of said agent class and occupies a 

 
first place process in said plurality of place 

processes; and 
      forming a ticket wherein said ticket is a member 

of said ticket class and defines a trip involving the 
movement of said agent process from said first place 

process to a second place process in said plurality of 
place processes. 
A method for limiting capabilities of processes in 
a computer network, said method comprising: 

      defining a plurality of object-oriented classes 
including a process class and a permit class; 

      forming a process wherein said process is a member 
of said process class; and 

      forming a permit wherein said permit is a member 
of said permit class and specifies one or more 

capabilities of said process. 
The method as in Claim 25 further comprising: 
     
 defining within said process class a go operation; 
and 

      specifying within said permit whether said process 
is capable of performing said go operation. 
The method as in Claim 25 or 26 further 
comprising: 

      defining within said process class a send operation; and 
         specifying within said permit whether said process 

is capable of performing said send operation. 
The method as in Claim 25, 26 or 27 further 
comprising: 

      defining within said process class a charge 
operation; and 

      specifying within said permit whether said process 
is capable of performing said charge operation. 
The method as in any one of Claims 25 to 28 
further comprising: 

      defining within said process class a terminate 
operation; and 

      specifying within said permit whether said process 
is capable of performing said terminate operation. 
The method as in any one of Claims 25 to 29 
further comprising specifying within said permit whether said 

process is capable of creating a second process, different 
from said first-mentioned process, wherein said second process 

is a member of said process class. 
The method as in any one of Claims 25 to 30 
further comprising: 

      defining an object-oriented place class; and 
      specifying within said permit whether said process 

is capable to creating members of said place class. 
The method as in any one of Claims 25 to 31 
further comprising specifying within said permit whether said 

process is restarted upon failure of said process. 
The method as in any one of Claims 25 to 32 
further comprising specifying within said permit an amount of 

processing that is allotted to said process. 
The method as in any one of Claims 25 to 33 
further comprising specifying within said permit a time at 

which said process is terminated. 
The method as in any one of Claims 25 to 34 
further comprising: 

      defining within said process class a restrict 
operation; 

      forming instructions for a computer process, said 
instructions including said classes, subclasses and of 

 
said classes, and said restrict operation; 

      interpreting said instructions on a processor in 
said computer network wherein, in response to said 

restrict operation, a second permit, which is different 
from said first-mentioned permit, is formed and further 

wherein said second permit is a member of said permit 
class and specifies a group of one or more capabilities 

of said one or more capabilities of said process; and 
      restricting said process to said group of one or 

more capabilities specified by said second permit. 
In a computer, a method of interpreting processes 
of various versions of an instruction set, said method 

comprising: 
      defining a plurality of object-oriented classes 

including a class of classes and a class of citations; 
      forming one or more class objects wherein said 

class objects are members of said class of classes; 
      forming within a first of said class objects a 

citation wherein said citation specifies said first 
class object and specifies which of said class objects 

are backward compatible with said first class object. 
In a computer network having a plurality of 
computers, a communication process comprising: 

      providing a plurality of place processes within 
said computer network wherein each place process is a 

locale in one of said computers for zero or more agent 
processes; 

      specifying, by a ticket means, a trip for an agent 
process to a destination place process in said plurality 

of place processes; and 
      transporting, in response to a send operation 

within said agent process, a clone of said agent process 
to said destination place process. 
In a computer network having a plurality of 
 

computers, the communication process as in Claim 37 further 
comprising specifying, by a second ticket means, a second 

trip, which is different from said first-mentioned trip, for 
said agent process to a second destination place process in 

said plurality of place processes. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 further 

comprising: 
      determining that said first-mentioned clone, in 

taking said first trip, and a second clone, in taking 
said second trip, are both to be transported to a single 

computer of said computers; 
      moving to said single computer said first clone; 

and 
      forming within said single computer said second 

clone from said first clone. 
In a computer network having a plurality of 
computers, the communication process as in Claim 39 further 

comprising transporting said first clone to said first-mentioned 
destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 39 further 

comprising transporting said second clone to said second 
destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising transporting, in response to a go operation within 
said agent process, said agent process to said destination 

place process specified by said ticket means. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 further 

comprising specifying said destination place process by a name 
 

within said ticket means. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 further 

comprising specifying said destination place process by an 
address within said ticket means. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising specifying, within said ticket means, said 
destination place process by a citation of a class of which 

said destination place process is a member. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising specifying, within said ticket means, said 
destination place process by any combination of an address of 

said destination place process, a name of said destination 
place process, and a citation of a class of which said 

destination place process is a member. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 further 

comprising specifying, within said ticket means, a 
transportation means wherein said transportation means 

specifies a type of intercomputer communications means by 
which said clone is transported. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 further 

comprising controlling, with a destination permit contained in 
said ticket means, a deadline for said agent process at said 

destination place process. 
In a computer network having a plurality of 

computers, the communication process as in Claim 37further 
comprising controlling, with a destination permit contained in 

 
said ticket means, operations that said agent process is 

allowed to perform at said destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising controlling, with a destination permit contained in 
said ticket means, resources that said agent process is 

allowed to consume at said destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising specifying, with a destination permit contained in 
said ticket means, a priority for said agent process at said 

destination place process relative to other processes at said 
destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37further 

comprising controlling, via a permit means, a capability that 
a process is allowed to have. 
In a computer network having a plurality of 
computers, the communication process as in Claim 52wherein 

said capability comprises a priority for said process relative 
to other processes. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 wherein 

said agent process owns an object. 
In a computer network having a plurality of 
computers, the communication process as in Claim 53 wherein 

said step of transporting a clone of said agent process 
comprises transporting a copy of said object. 
In a computer network having a plurality of 
computers, the communication process as in Claim 55 further 

 
comprising interchanging for said copy a second object at said 

destination place process wherein said second object has a 
digest equivalent to said first-mentioned digest and further 

wherein said copy is not transported to said destination place 
process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 54 further 

comprising the step using an interchanged object for said 
object at said destination place process thereby eliminating 

the need to transport said object to said destination place 
process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 wherein 

said transporting step further comprises a step of entering 
said destination place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 wherein 

said transporting step further comprises a step of exiting 
said source place process. 
In a computer network having a plurality of 
computers, the communication process as in Claim 37 wherein 

said destination place process is a meeting place process and 
said meeting place arranges a meeting between a requestor 

agent process and a petitioned agent process. 
In a computer, a communication process comprising: 
      providing a first agent process and a second agent 

process; 
      specifying a meeting between said first and second 

agent processes by a petition means; and 
      arranging said meeting between said first and 

second agent processes as defined by said petition. 
In a computer, the communication process as in 
Claim 61 further comprising forming said petition means within 

said first agent process. 
In a computer, the communication process as in 
Claim 61 or 62 wherein said step of specifying a meeting 

comprises specifying within said petition means said second 
agent process. 
In a computer, the communication process as in 
Claim 63 wherein said step of specifying said second agent 

process comprises specifying, within said petition means, said 
second agent by a name. 
In a computer, the communication process as in 
Claim 63, wherein said step of specifying said second agent 

process comprises specifying, within said petition means, a 
class of which said second agent process is a member. 
In a computer, the communication process as in 
Claim 63 wherein said step of specifying said second agent 

process comprises specifying, within said petition means, a 
citation of a class of which said second agent process is a 

member. 
In a computer, the communication process as in 
Claim 61 wherein said step of specifying a meeting comprises 

specifying, within said petition means, a maximum time period 
for arranging said meeting. 
In a computer, the communication process as in 
Claim 61 wherein said step of arranging said meeting comprises 

providing to said first agent process a reference to said 
second agent process. 
In a computer, the communication process as in 
Claim 68 wherein said step of arranging said meeting further 

 
comprises providing to said second agent process a reference 

to said first agent process. 
In a computer, the communication process as in 
Claim 81 further comprising causing, in response to an 

instruction within said first agent process, performance of an 
operation within said second agent process. 
In a computer, the communication process as in 
Claim 70 wherein said first or second agent process owns an 

object. 
In a computer, the communication process as in 
Claim 71 further comprising providing to said second or to 

said first agent process respectively a reference to said 
object, or a reference to a copy of said object. 
In a computer, the communication process as in 
Claim 72 wherein said reference is a protected reference. 
In a computer network having a plurality of 
computers, a communication system comprising: 

      an agent means having a ticket means and a send 
operation; and 

      a plurality of place means wherein each place 
means is operable in one of said plurality of computers; 

         wherein said agent means is at a first place 
means in said plurality of place means; 

         said ticket means specifies a trip to said 
agent means to a destination place means in said 

plurality of place means; and 
         said send operation transports a clone of 

said agent means to said destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said agent means further comprises a second ticket means, 
 

different from said first-mentioned ticket means, that 
specifies a second trip to a second destination place means 

for said agent means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

performance of said send operation transports a second clone 
of said agent means to said second destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 76 wh
erein: 
      said first-mentioned trip and said second trip 

both include transportation to a single computer in said 
plurality of computer; and 

      further wherein, in transporting said first-mentioned 
clone to said first-mentioned destination 

place means and said second clone to said second 
destination place means, performance of said send 

operation: 

(a) transports said first clone to said 
single computer and 
(b) forms said second clone from said 
first clone within said single computer. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said agent means further comprises a go operation wherein said 
go operation transports said agent means to a third 

destination place means specified by a third ticket means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a name which identifies 
said destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

 
said ticket means further comprises an address for said 

destination place means. 
In a computer network having a plurality of 
computers, the communication process as in Claim 44 or the 

system as in Claim 80 wherein said address is a teleaddress. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a citation means which 
specifies a class of which said destination place means is a 

member. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises any combination selecting 
from the group consisting of an address of said destination 

place means, a name of said destination place means, and a 
citation means which specifies a class of which said 

destination place means is a member. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 or process 

of Claim 37 wherein said ticket means further comprises means 
for specifying a maximum time period for said trip. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 or a 

process of Claim 37 wherein said ticket means further 
comprises means for specifying a desired time period for said 

trip. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a way means for specifying 
a type of intercomputer communications means by which said 

trip is to be accomplished. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a permit means for 
controlling a deadline for said agent means at said 

destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a permit means for 
controlling operations that said agent means is allowed to 

perform at said destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a permit means for 
controlling resources that said agent means is allowed to 

consume at said destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said ticket means further comprises a permit means for 
specifying a priority for said agent means at said destination 

place means relative to other agent means at said destination 
place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 further 

comprising a permit means for controlling a capability that an 
agent means is allowed to have. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 or the 

process as in Claim 52 wherein said permit means is a native 
permit. 
In a computer network having a plurality of 
 

computers, the communication system as in Claim 91 or the 
process as in Claim 52 wherein said permit means is a local 

permit. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 or the 

process as in Claim 52 wherein said permit means is a 
temporary permit. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 or the 

process as in Claim 52 wherein said capability comprises 
resources that said agent means of Claim 91 or said process of 

Claim 52 respectively can consume. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 or the 

process as in Claim 52 wherein said capability comprises a 
deadline after which the agent means of Claim 91 or the 

process of Claim 52 respectively cannot proceed. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 further 

comprising other agent means wherein said capability comprises 
a priority for said agent means relative to said other agent 

means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 91 or the 

process of Claim 52 wherein said capability comprises 
permission for said agent means or said process respectively 

to perform selected operations. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said agent means owns an object. 
In a computer network having a plurality of 
computers, the communication system as in Claim 99 or the 

process of Claim 54 wherein said object has a digest. 
In a computer network having a plurality of 
computers, the communication system as in Claim 100 wherein a 

copy of said object is transported with said clone by 
performance of said send operation. 
In a computer network having a plurality of 
computers, the communication system as in Claim 101 wherein a 

second object at said destination place means is interchanged 
for said copy; and 

      further wherein said second object has a digest 
equivalent to said first-mentioned digest, thereby 

obviating transportation of said copy to said 
destination place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 101 wherein 

said send operation uses an interchanged object for said copy 
at said destination place means thereby eliminating the need 

to transport said copy of said object to said destination 
place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said place means further comprises means for entering said 

place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

said place means further comprises means for exiting said 
place means. 
In a computer network having a plurality of 
computers, the communication system as in Claim 74 wherein 

 
said place means further comprises meeting place means wherein 

said meeting place means arranges a meeting between a 
requestor agent means and a responder agent means. 
In a computer, a communication system comprising: 
      meeting place means having a meet operation 

wherein said meeting place is a locale for a plurality 
of agent means; 

      a petition means; 
      a first agent means in said plurality of agent 

means; and 
      a second agent means in said plurality of agent 

means wherein; 
         said first and second agent means can meet 

with any of said plurality of agent means; 
         said petition means specifies a meeting 

between said first and second agent means; and 
         in response to said meet operation, said 

meeting place means arranges said meeting. 
In a computer, the communication system as claimed 
in Claim 107 formed by a process according to any one of 

claims 61 to 73. 
In a computer, the communication system as in 
Claim 79 or 108 or the communication process as in Claim 43 or 

64 wherein said name is a telename. 
In a computer, the communication system as in 
Claim 107 further wherein said meet operation provides to said 

first agent means a reference to said second agent. 
In a computer, the communication system as in 
Claim 110 further wherein said meet operation provides to said 

second agent means a reference to said first agent means. 
In a computer, the communication system as in 
 

Claim 107 further wherein said first agent means can cause 
performance of an operation within said second agent means. 
In a computer, the communication system as in 
Claim 112 wherein at least one of said first agent means or 

said second agent means owns an agent. 
In a computer, the communication system as in 
Claim 113 further wherein said first or second agent means can 

provide to said second or first agent means respectively a 
reference to said object or to a copy of said object. 
In a computer, the communication system as in 
Claim 114 wherein said reference is a protected reference. 
In a computer network having one or more 
computers, a method for transferring data from a first engine 

process to a second engine process, said method comprising the 
steps of: 


(a) providing means for executing one or more 
agent processes wherein said executing means comprises 

said first and second engine processes and further 
wherein each said agent process comprises instructions 

from a computer instruction set and has an execution 
state; 
(b) providing within said computer instruction 
set a go instruction wherein said go instruction is 

contained within a first agent process executing within 
said first engine process and further wherein 

performance of said go instruction causes: 

(i) suspension of execution of said first 
agent process by said first engine process; 
(ii) representation of said first agent 
process such that said execution state of said 

first agent process is preserved; 
(iii) transfer of said representation of 
said first agent process from said first engine 

 
process to said second engine process; and 
(iv) resumption of execution of said first 
agent process by said second engine process; 
(c) causing execution of said agent process by 
said first engine process, thereby causing performance 

of said go instruction. 
The method of Claim 116 wherein said computer 
instruction set is object-oriented. 
The method of Claim 117 wherein said plurality of 
agent processes are objects of said object-oriented computer 

instruction set. 
The method of Claim 116 further comprising the 
step of adding data to said first agent process prior to 

causing performance of said go instruction; 
      wherein said representation of said first agent 

process includes said data; and 
      further wherein transfer of said representation of 

said first agent process to said second engine process 
includes transfer of said data. 
The method of Claim 116 wherein said first agent 
process comprises data representing a message to be 

transported from said first engine process to said second 
engine process; and 

      further wherein transfer of said first agent 
process resulting from execution of said go instruction 

causes transfer of said data from said first engine 
process to said second engine process. 
The method of Claim 116 wherein said first engine 
process executes on a first computer and said second engine 

process executes on a second computer wherein said first and 
second computers are part of said computer network. 
A method for transferring data from a first engine 
process to one or more engine processes, said method 

comprising the steps of: 

(a) providing means for executing a plurality of 
agent processes which comprise instructions from a 

computer instruction set wherein said agent process 
execution means comprises said first and one or more 

engine processes and further wherein each said agent 
process has an execution state; 
(b) providing within said computer instruction 
set a send instruction wherein said send instruction is 

contained within a first agent process in said plurality 
of agent processes and further wherein, execution of 

said send instruction, includes the steps of: 

(i) forming one or more copies of said 
first agent process wherein said copies preserve 

and include said execution state of said first 
agent process; 
(ii) transferring each of said copies of 
said first agent process from said first engine 

process to a respective one of said one or more 
engine processes; and 
(iii) effectuating execution of each of said 
copies of said first agent process by said 

respective one of said one or more engine 
processes so as to simulate the resumed execution 

of said first agent process. 
The method of Claim 122 wherein, upon a condition 
wherein two or more of said copies of said first agent process 

are to be transferred from said first engine process to a 
single second engine process, the transfer of said two or more 

copies of said first agent process comprises the steps of: 
      transferring to said second engine process a 

single copy of said first agent process; and 
      forming within said second engine process from 

said single copy said two or more copies of said first 
 

agent process. 
A method of transferring data from a first agent 

process which is executing within a computer system to a 
second agent process which is executing within said computer 

system wherein said first and second agent processes are 
occupants of a place process, said method comprising the steps 

of: 
      causing, in response to a meet instruction issued 

by said first agent process, execution of a procedure by 
said second agent process wherein said procedure is a 

portion of said second agent process and comprises a 
collection of computer instructions contained within 

said second agent computer process; and 
      providing to said first agent process, in response 

to a second instruction which is issued by said second 
agent process and which is part of said procedure, means 

for accessing said second agent process. 
The method of Claim 124 wherein said step of 
causing execution of a procedure by said second agent process 

comprises: 
      causing, in response to said meet instruction 

issued by said first agent process, execution of a 
second procedure by said place process wherein execution 

of said second procedure by said place process issues an 
instruction which causes said second agent process to 

execute said first-mentioned procedure. 
The method of Claim 124 wherein said means for 
accessing said second agent process is provided to said first 

agent process by said place process. 
The method of Claim 126 wherein, at approximately 
the time said place process provides to said first agent 

process said means for accessing said second agent process, 
said place process provides to said second agent process means 

 
for accessing said first agent process. 
A method for transferring a first computer process 
from a first computer system to a second computer system, said 

first computer system comprising a first CPU and a first 
memory and said second computer system comprising a second CPU 

and a second memory, said method comprising: 
      initiating execution of said first computer 

process within said first CPU wherein said computer 
process has an execution state; 

      suspending execution of said first computer 
process within said first CPU; 

      representing said first computer process as data 
in said first memory wherein said data includes said 

execution state of said first computer process at the 
time execution of said first computer process is 

suspended; 
      transferring said data from said first memory to 

said second memory; 
      forming a second computer process on said second 

computer system from said data wherein said second 
computer process has said state of execution represented 

in said data; and 
      causing execution of said second computer process, 

thereby effectively simulating resumption of execution 
of said first computer process within said second CPU. 
</CLAIMS>
</TEXT>
</DOC>
