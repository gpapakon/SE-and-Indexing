<DOC>
<DOCNO>EP-0652519</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Monitoring of data stream connections in a computer network.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1130	G06F1130	G06F1132	G06F1132	G06F1134	G06F1134	H04L1226	H04L1226	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	H04L	H04L	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	H04L12	H04L12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Provided are systems and methods for monitoring data stream 
connections in a parallel server network composed of multiple 

workstations. A user defined application task for the network is 
decomposed/ subdivided into multiple work units/subtasks individually 

distributed for relatively concurrent execution in selected 
workstations. The monitor detects and provides to the user data 

stream connection status information (29) about the complete system 
as the application is being executed. The monitor process is 

executed as a daemon on the coordinate workstation accessed by the 
user. Node registration requests from the subordinate workstations 

to the coordinate workstation provide the coordinate workstation 
daemon process with information regarding the status of data streams 

in subordinate workstations. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHANG DAVID YU
</INVENTOR-NAME>
<INVENTOR-NAME>
CHANG, DAVID YU
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to computer networks. 
More particularly, the invention is directed to systems and methods 
for monitoring the status of data stream connections in a parallel 
server network. The parallel server is a relatively new concept in the 
configuration of workstations or computers into networks. In 
general, the parallel server is a group of workstations connected and 
operated to execute in parallel a single application program, often 
referred to as a task. The application program is executed by 
decomposing the task represented by the program into numerous work 
units which are distributed to and executed in parallel by the 
interconnected group of workstations. The strategy used to execute the application task in the 
multiple work units is based upon an execution plan defined by the 
application compiler, in the form of an execution strategy for the 
parallel server system. The execution strategy defines the flow of 
control and the flow of data within the parallel server system during 
the execution of the application task. The information contained in 
the control flow defines how and when the application task is 
decomposed and distributed to the workstations in the parallel server 
system. On the other hand, the information in the data flow defines 
how and when the data is passed between the workstations in the 
system. In the parallel server system, the compiler defines the 
control flow and data flow within the system at the time the 
application task is compiled. Given the complexity of parallel server type networks, data 
flow models of the parallel server are commonly defined through the 
use of data port concepts. With this model of the parallel server, 
data is always transmitted through a data port in a parallel server. 
The data port can be used to send or receive data. In a further 
aspect of this model and convention, a data port can serve as the  
 
termination for one or more data streams. Thereby the data stream 
becomes the logical link between two data ports. An application task executing on a parallel server system will 
fail if any of its data streams do not connect to the appropriate 
data ports. Unfortunately, it has proven to be difficult to 
determine when a data stream has either failed to make, or has lost, 
a connection in the context of a complicated parallel server system. 
In part, this difficulty is attributable to the fact that data ports 
are created dynamically according to the execution strategy defined 
by the compiler, and
</DESCRIPTION>
<CLAIMS>
A connection monitor system, for a network of subordinate and 
coordinate workstations configured to execute a subdivided 

application, the connection monitor system comprising: 
   means for executing a monitoring process on a coordinate 

workstation; 
   means for determining the connection status of data streams in 

subordinate workstations; 
   means for transmitting the connection status in subordinate 

workstations to the monitor process in the coordinate workstation. 
A system according to Claim 1, further comprising; 
   means for selectively registering and deregistering subordinate 

workstations with the monitoring process in the coordinate 
workstation. 
A system according to Claim 2, wherein the means for 
selectively registering and deregistering subordinate workstations is 

respectively responsive to assignment of subtasks by the coordinate 
workstation and to completion of subtasks by the subordinate 

workstations. 
A system according to Claim 2 or Claim 3, wherein the means for 
executing a monitoring process is adapted to monitor the connection 

status of registered subordinate workstation data streams. 
A system according to any one of claims 1 to 4, wherein the 
means for determining connection status comprises a means for 

creating control blocks in subordinate workstations responsive to 
subtasks received from the coordinate workstation. 
A system according to Claim 5, wherein the means for creating 
control blocks in subordinate workstations is adapted to form the 

control blocks in a shared memory of the subordinate workstations. 
A method for monitoring the status of connections in a network 
of subordinate and coordinate workstations configured to execute a 

subdivided application, comprising the steps of; 
   executing a monitoring process on a coordinate workstation; 

   determining connection status of data streams in subordinate 
workstations; and 

   transmitting the connection status in subordinate workstations 
to the monitor process in the coordinate workstation. 
A method according to Claim 7, further including the step of; 
   selectively registering and deregistering subordinate 

workstations with the monitoring process in the coordinate 
workstation. 
A method recited according to Claim 8, wherein the step of 
selectively registering and deregistering subordinate workstations is 

selectively responsive to the assignment of subtasks by the 
coordinate workstation and the completion of subtasks by the 

subordinate workstations. 
A method according to Claim 8 or Claim 9, wherein the step of 
executing a monitoring process monitors the connection status of 

registered subordinate workstation data streams. 
A method according to any one of Claims 7 to 11, wherein the 
steps of determining connection status includes the creation of 

control blocks in subordinate workstations responsive to subtasks 
received from the coordinate workstation. 
A method according to Claim 11, wherein the step of creating 
control blocks in subordinate workstations forms the control blocks 

in a shared memory of the subordinate workstations. 
</CLAIMS>
</TEXT>
</DOC>
