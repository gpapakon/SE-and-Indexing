<DOC>
<DOCNO>EP-0646878</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for converting an existing expert system into one utilizing one or more neural networks.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F1518	G06F1518	G06N300	G06N300	G06N304	G06N500	G06N504	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06N	G06N	G06N	G06N	G06N	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F15	G06F15	G06N3	G06N3	G06N3	G06N5	G06N5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A technique for converting an existing expert system into 
one incorporating one or more neural networks (FIG. 12) includes 

the steps of separating (21, FIG. 3) the knowledge base and 
inference engine of the existing expert system, identifying (23) 

the external and internal inputs and outputs, identifying (27) 
subsystems from the inputs and outputs, using (33) a neural 

network for each subsystem, training (37) each neural network 
to learn the production rules of its associated subsystem, and 

computing (39) exact or interpolated outputs from a given set of 
inputs. Each neural network utilizes a training algorithm which 

does not require repetitive training and which yields a global 
minimum to each given set of inputs. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
WANG SHAY-PING THOMAS
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG, SHAY-PING THOMAS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention is related to the following 
inventions which are assigned to the same assignee as the 
present invention: 
(1) "Neural Network and Method of Using Same", having 
European Patent Application No. 94304234.1; (2) "Method for Structuring an Expert System Utilizing 
One or More Neural Networks", having US Serial No. 08/129,275 
(docket no. MNE00275N), filed concurrently herewith. This invention relates generally to expert systems and, in 
particular, to converting an existing expert system into one or 
more neural networks. In recent years, expert systems have been used in many 
applications which have traditionally been carried out using 
complex algorithmic approaches. These applications include 
medical diagnosis, financial analysis, electronics design, 
nuclear power plant monitoring and control, oil exploration, etc. 
Expert systems have also been used for interpretation, 
prediction, planning, monitoring, debugging, repair, and 
instruction. The surge in popularity of expert systems is mainly 
due to their simplicity in modeling complicated systems by 
Production Rules (i.e. IF/THEN rules) and to their capability in 
recommending appropriate actions by inference (or search). FIG. 1 shows a conceptual diagram illustrating a 
conventional expert system 1 which comprises two modules. A 
first module 2 is a Knowledge Base, which comprises a group of  
 
Production Rules (which typically are IF/THEN statements) and 
Facts. A second module 3 is an Inference Engine which makes 
decisions using the Production Rules and the given Facts. The 
expert system receives Inputs and generates Outputs using the 
Knowledge Base 2 and Inference Engine 3. To date, however, the success of known existing expert 
systems has been somewhat diminished because of the following 
reasons:
 
   First, known expert systems are too "brittle" for real-world 
applications which are noisy and uncertain. Specifically, 
the performance of an expert system rapidly degrades when the 
value of an Input is close to the Input bounds. Clearly, such brittleness is inappropriate for many 
applications (e.g. stock market investment, medical diagnosis, 
etc.). Although it is known to improve the robustness of an 
expert system by increasing the number of Production Rules, this 
slows down the decision-making process and aggravates 
maintenance problems (due to the sheer number of Production 
Rules to be kept track of). Secondly, existing expert systems are usually too slow in 
decision-making for high-speed dynamic systems.
</DESCRIPTION>
<CLAIMS>
A method for converting an existing expert system 
into an expert system having one or more neural networks, said 

existing expert system comprising a plurality of external inputs, 
a plurality of internal inputs, a plurality of internal outputs, at 

least one external output, a knowledge base, and an inference 
engine, said method comprising the steps of: 


(a) separating (21, FIG. 3) said knowledge base from said 
inference engine of said existing expert system; 
(b) identifying (23) said external inputs and said at least 
one external output of said existing expert system; 
(c) identifying (25) said internal inputs and said internal 
outputs of said existing expert system; 
(d) grouping (27) said inputs and outputs identified in 
steps (b) and (c) into related subsystems of said existing expert 

system; and 
(e) providing (33) a neural network for each of said 
subsystems. 
The method recited in claim 1 and further comprising 
the step of: 


(f) identifying (31) a set of existing production rules for 
each of said subsystems identified in step (d). 
The method recited in claim 2 and further comprising 

the step of: 

(g) training (37) each of said neural networks to learn 
the set of production rules associated with its respective 

subsystem. 
The method recited in claim 3 and further comprising 
the step of: 


(h) in response to a given set of external inputs, 
computing (39) at least one output from each neural network. 
The method recited in claim 2 and further comprising 
the steps of: 


(g) expressing (35) said neural network of each 
subsystem by a polynomial expansion. 
The method recited in claim 5 and further comprising 
the step of: 


(h) computing (39) at least one output from each neural 
network by substituting at least one of said inputs into the 

polynomial expansion. 
The method recited in claims 4 or 6 wherein said 
output is an interpolated value. 
The method recited in claim 1 and further comprising 
the step of: 


(f) identifying (29) a temporal or logical relationship 
among said subsystems identified in step (d). 
The method of claim 4, wherein step (h) further 
comprises the substep of normalizing said inputs. 
The method of claim 9, wherein said normalizing 
substep is performed by transforming the inputs into values 

between -1 and +1. 
The method of claim 9, wherein said normalizing 
substep is performed by transforming the inputs into absolute 

values between 0 and 1. 
The method of claim 4, wherein step (h) further 
comprises the substep of normalizing at least one of the outputs. 
The method of claim 12, wherein said normalizing 
substep is performed by transforming said at least one output 

into a value between -1 and +1. 
The method of claim 12, wherein said normalizing 
substep is performed by transforming said at least one output 

into an absolute value between 0 and 1. 
The method recited in claim 2 wherein at least one of 
said sets of production rules is provided in the form of a table. 
</CLAIMS>
</TEXT>
</DOC>
