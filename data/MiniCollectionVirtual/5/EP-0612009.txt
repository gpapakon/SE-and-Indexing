<DOC>
<DOCNO>EP-0612009</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Detection of exponent underflow and overflow in a floating point adder.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F700	G06F700	G06F738	G06F738	G06F748	G06F7485	G06F750	G06F7507	G06F776	G06F776	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An exponent subtractor system (226) for a floating point 
adder (200) generates an exponent result (EXP_low) and a rounded 

exponent result (EXP_high) for an addition operation performed on 
two floating point numbers and generates overflow (Overflow_low, 

Overflow_high) and underflow flags (Underflow_low, 
Underflow_high) for the exponent result and the rounded exponent 

result before the completion of the updating of the exponent result 
in an exponent subtractor (52, 72). 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
EINAV ALICK
</INVENTOR-NAME>
<INVENTOR-NAME>
HOREN YORAM
</INVENTOR-NAME>
<INVENTOR-NAME>
VOLPERT YEHUDA
</INVENTOR-NAME>
<INVENTOR-NAME>
EINAV,ALICK
</INVENTOR-NAME>
<INVENTOR-NAME>
HOREN, YORAM
</INVENTOR-NAME>
<INVENTOR-NAME>
VOLPERT, YEHUDA
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to floating point adders and more 
particularly to the detection of underflow and overflow of the 
exponent results generated by floating point adders. Floating point numbers comprise a mantissa part and an 
exponent part and are usually 32-bit ('single precision') or 64-bit 
('double precision') in size. The formats of floating point numbers 
depend on the standard implemented. For example, the widely 
implemented IEEE standard has the format 1.fff X 2e where 1.fff is 
the normalised mantissa and e is the exponent. A floating point addition operation (which may be a subtract 
operation depending on the sign of the floating point number(s)) for 
two floating point numbers typically comprises the following steps: 
1). Calculate the difference between the two exponents.  2). Shift the mantissa of the smaller number right by the absolute 
value of the exponent difference so as to align the smaller 
number to the greater number. 3). Add the two mantissas. 4). Normalise the addition result - 
a) Find the leading 'one' ('1') bit of the mantissa's 
addition result (result of step 3). b) Shift the mantissa's addition result to the left to 
discard all the leading zeros until the leading '1' bit becomes 
the Most Significant Bit (MSB) of the result (in case of subtract 
operation). c) Encode the number of left shifts required to a binary 
value for updating the exponent result. 5). Subtract the binary value from the exponent value in order to 
update the result of the floating point addition operation. This 
result is the exponent result (EXP_low). 6). Round the result. After rounding, the final exponent result 
may be one of two possible values: exponent result, EXP_low 
or rounded exponent result, EXP_high, where 
EXP_high = 
EXP_low + 1  
. 7). Check that the final exponent result has a value within a 
predetermined range and generate overflow and underflow 
flags accordingly. 8). Result is driven to an output of the floating point adder. The final exponent result is the rounded exponent result 
(EXP_high) only if the mantissa addition result comprises all '1's 
such that on rounding, the mantissa overflows. Otherwise, the final 
exponent result is the exponent result (EXP_low). The detection of underflow and overflow of the final exponent 
result and generation of corresponding flags occurs in the critical 
path of the floating point adder. Typically, the detection and 
generation of underflow and overflow occur after the exponent 
result has been updated and rounded as necessary. The
</DESCRIPTION>
<CLAIMS>
A method of generating an exponent result and a rounded 
exponent result for an addition operation performed on two 

numbers in a floating point adder and for generating overflow and 
underflow flags for the exponent result and the rounded exponent 

result, wherein each number comprises an exponent and an 
mantissa, the method comprising the steps of: 

   generating first and second exponent values using the greater 
exponent of the two numbers, each of the first and second exponent 

values comprising n bits; 
   providing a binary value which represents a number of bit 

shifts required to normalise a mantissa result produced by the 
addition operation, the binary value comprising m bits, where m is 

less than n; 
   dividing each one of the first and second exponent values into 

two groups of bits, a first group comprising m of the least significant 
bits of an exponent value and a second group comprising (n-m) of 

the most significant bits of the exponent value; 
   decrementing the second group of (n-m) bits of each of the 

first and second exponent values by one so as to provide a 
decremented most significant bit result for the each of the first and 

second exponent values; 
   detecting underflow of the exponent result and rounded 

exponent result by checking the decremented most significant bit 
result of the first exponent value and the second group of (n-m) bits 

of the first exponent value respectively and generating in response 
to the checking step first and second underflow flags respectively; 

   detecting overflow of the exponent result and rounded 
exponent result by checking the decremented most significant bit 

result of the second exponent value and the second group of (n-m) 
bits of the second exponent value respectively and generating in 

response to the checking step first and second overflow flags 
respectively;

 
   subtracting the binary value from the first group of m bits of 

each of the first and second exponent values so as to provide a least 
significant bit subtraction result and borrow flags for each of the 

first and second exponent values, the borrow flags indicating 
whether the subtraction step generates a borrow of one or the 

subtraction step generates a borrow of zero; 
   selecting for each of the first and second exponent values and 

in response to the borrow flags, the respective decremented most 
significant bit result for a borrow of one or the respective second 

group of (n-m) bits for a borrow of zero so as to provide a selected 
result for each of the first and second exponent values; 

   combining for each of the exponent values the respective 
selected result with the respective least significant bit subtraction 

result so as to generate the exponent result and the rounded 
exponent result; and 

   providing the exponent result and corresponding first 
underflow flag and first overflow flag and providing the rounded 

exponent result and corresponding second underflow flag and 
second overflow flag at outputs of the floating point adder. 
A method according to claim 1 wherein the subtracting step 
generates two borrow flags for each of the first and second exponent 

values, a first borrow flag representing the subtraction of the binary 
value from the first group of m bits of the respective exponent 

value decremented by one and a second borrow flag representing 
the subtraction of the binary value from the first group of m bits of 

the respective exponent value, the first and second borrow flags of 
each of the first and second exponent values having a first value if 

the subtraction step generates a borrow of one or a second value if 
the subtraction step generates a borrow of zero. 
A method according to claim 2 wherein the value of the 
second borrow flag of the first exponent value determines the 

selected result of the first exponent value and the value of the first 
 

borrow flag of the second exponent value determines the selected 
result of the second exponent value. 
A method according to claim 1, 2 or 3 wherein the checking 
for underflow step comprises the step of determining whether the 

value of the decremented most significant bit result and the value of 
the second group of (n-m) bits of the first exponent value are less 

than a minimum predetermined value, and the checking for 
overflow step comprises the step of determining whether the value 

of the decremented most significant bit result and the value of the 
second group of (n-m) bits of the second exponent value are greater 

than a maximum predetermined value. 
A method according to claim 2 and 4 or claim 3 and 4 wherein 
th
e underflow flag generating step comprises the steps of: 
   generating a first signal having a first value when the 

decremented most significant bit result of the first exponent value is 
less than the minimum predetermined value; 

   generating a second signal having the first value when the 
second group of (n-m) bits of the first exponent value is less than 

the minimum predetermined value; 
   selecting one of the first and second signals in response to the 

value of the first borrow flag of the first exponent value to provide 
the first underflow flag; and 

   selecting one of the first and second signals in response to the 
value of the second borrow flag of the first exponent value to 

provide the second underflow flag. 
A method according to claim 5, or claim 2 and 4, or claim 3 
and 4 wherein the overflow flag generating step comprises the steps 

of: 
   generating a first signal having a first value when the 

decremented most significant bit result of the second exponent 
value is greater than the maximum predetermined value;

 
   generating a second signal having the first value when the 

second group of (n-m) bits of the second exponent value is greater 
than the maximum predetermined value; 

   selecting one of the first and second signals in response to the 
value of the first borrow flag of the second exponent value to 

provide the first overflow flag; and 
   selecting one of the first and second signals in response to the 

value of the second borrow flag of the second exponent value to 
provide the second overflow flag. 
A method according to claim 4, 5 or 6 wherein the minimum 
predetermined value for single-precision format numbers is 895 

and for double-precision format numbers is -1 and the maximum 
predetermined value for single-precision format numbers is 1152 

and for double-precision format numbers is 2048. 
A method according to any preceding claim wherein the first 
exponent value is the value of the greater exponent of the two 

numbers and the second exponent value is the value of the greater 
exponent plus two. 
An exponent subtractor system (226) for generating an 
exponent result and a rounded exponent result for an addition 

operation performed on two numbers in a floating point adder and 
for generating overflow and underflow flags for the exponent result 

and the rounded exponent result, the system comprising: 
   means for generating first and second exponent values using 

the greater exponent of the two numbers, each of the first and 
second exponent values comprising n bits; 

   means for providing a binary value which represents a 
number of bit shifts required to normalise a mantissa result 

produced by the addition operation, the binary value comprising m 
bits, where m is less than n; 

   means for dividing each one of the first and second exponent 
values into two groups of bits, a first group comprising m of the 

 
least significant bits of an exponent value and a second group 

comprising (n-m) of the most significant bits of the exponent value; 
   decrementing means for decrementing the second group of (n-m) 

bits of each of the first and second exponent values by one so as 
to provide a decremented most significant bit result for the each of 

the first and second exponent values; 
   underflow detecting means (230) for detecting underflow of 

the exponent result and rounded exponent result by checking the 
decremented most significant bit result of the first exponent value 

and the second group of (n-m) bits of the first exponent value 
respectively and generating in response to the checking step first 

and second underflow flags respectively; 
   overflow detecting means (232) for detecting overflow of the 

exponent result and rounded exponent result by checking the 
decremented most significant bit result of the second exponent 

value and the second group of (n-m) bits of the second exponent 
value respectively and generating in response to the checking step 

first and second overflow flags respectively; 
   subtracting means for subtracting the binary value from the 

first group of m bits of each of the first and second exponent values 
so as to provide a least significant bit subtraction result and borrow 

flags for each of the first and second exponent values, the borrow 
flags indicating whether the subtraction step generates a borrow of 

one or the subtraction step generates a borrow of zero; 
   selecting means for selecting for each of the first and second 

exponent values and in response to the borrow flags, the respective 
decremented most significant bit result for a borrow of one or the 

respective second group of (n-m) bits for a borrow of zero so as to 
provide a selected result for each of the first and second exponent 

values; 
   combining means for combining for each of the exponent 

values the respective selected result with the respective least 
significant bit subtraction result so as to generate the exponent 

result and the rounded exponent result; and
 

   output means for outputting the exponent result and 
corresponding first underflow flag and first overflow flag and 

providing the rounded exponent result and corresponding second 
underflow flag and second overflow flag. 
An exponent subtractor system according to claim 9 wherein 
the subtracting means comprises a first carry select subtractor for 

the first exponent value and a second carry select subtractor for the 
second exponent value, each one of the carry select subtractors 

comprising means for generating two borrow flags for the respective 
exponent value, a first borrow flag representing the subtraction of 

the binary value from the first group of m bits of the respective 
exponent value decremented by one and a second borrow flag 

representing the subtraction of the binary value from the first 
group of m bits of the respective exponent value, the first and 

second borrow flags of each of the first and second exponent values 
having a first value if a borrow of one is generated or a second 

value if a borrow of zero is generated. 
An exponent subtractor system according to claim 10 wherein 
the selecting means comprises first (62) and second (64) 

multiplexers, the first multiplexer (62) being coupled to receive the 
decremented most significant bit result and the second group of (n-m) 

bits of the first exponent value, and the second borrow flag of 
the first exponent value, and the second multiplexer (64) being 

coupled to receive the decremented most significant bit result and 
the second group of (n-m) bits of the second exponent value and the 

first borrow flag of the second exponent value, the value of the 
second borrow flag of the first exponent value determining the 

selected result of the first exponent value and the value of the first 
borrow flag of the second exponent value determining the selected 

result of the second exponent value. 
An exponent subtractor system according to claim 10 or 11 
wherein the underflow detecting means comprises:

 
   underflow logic for determining whether the value of the 

decremented most significant bit result and the value of the second 
group of (n-m) bits of the first exponent value are less than a 

minimum predetermined value, and for generating a first signal 
having a first value when the decremented most significant bit 

result of the first exponent value is less than the minimum 
predetermined value and a second signal having the first value 

when the second group of (n-m) bits of the first exponent value is 
less than the minimum predetermined value; 

   first selecting means coupled to receive the first and second 
signals and the first borrow flag of the first exponent value, the first 

selecting means selecting one of the first and second signals in 

response to the value of the received first borrow flag so as to 
provide the first underflow flag; and 

   second selecting means coupled to receive the first and second 
signals and the second borrow flag of the first exponent value, the 

second selecting means selecting one of the first and second signals 
in response to the value of the received second borrow flag so as to 

provide the second underflow flag. 
An exponent subtractor system according to claim 10, 11, or 
12 wherein the overflow detecting means comprises: 

   overflow logic means for determining whether the value of the 
decremented most significant bit result and the value of the second 

group of (n-m) bits of the second exponent value are greater than a 
maximum predetermined value, and for generating a first signal 

having a first value when the decremented most significant bit 
result of the second exponent value is greater than the maximum 

predetermined value and a second signal having the first value 
when the second group of (n-m) bits of the second exponent value is 

greater than the maximum predetermined value; 
   first selecting means coupled to receive the first and second 

signals and the first borrow flag of the second exponent value, the 
first selecting means selecting one of the first and second signals in 

 
response to the value of the received first borrow flag so as to 

provide the first overflow flag; and 
   second selecting means coupled to receive the first and second 

signals and the second borrow flag of the second exponent value, the 
second selecting means selecting one of the first and second signals 

in response to the value of the received second borrow flag so as to 
provide the second overflow flag. 
An exponent subtractor system according to claim 12 wherein 
the minimum predetermined value for single-precision format 

numbers is 895 and for double-precision format numbers is -1. 
An exponent subtractor system according to claim 13 wherein 
the maximum predetermined value for single-precision format 

numbers is 1152 and for double-precision format numbers is 2048. 
An exponent subtractor system according to any one of the 
claims 9-15 wherein the first exponent value is the value of the 

greater exponent of the two numbers and the second exponent 
value is the value of the greater exponent plus two. 
A floating point adder (200) for performing addition 
operations on two floating point numbers, each number comprising 

a mantissa and an exponent, the floating point adder comprising: 
   means for calculating the difference (210) between the 

exponents of the two floating point numbers and for providing the 
difference result at an output thereof; 

   mantissa shifting means (212) for determining which floating 
point number is smaller and for shifting the mantissa of the smaller 

floating point number right by the difference result; 
   a mantissa addition system (214) for adding the shifted 

smaller mantissa with the greater mantissa so as to provide a 
normalised addition result and shift information which shift 

information represents the number of bit shifts required to 
normalise the mantissa addition result;

 
   an exponent subtractor system (226) as claimed in any one of 

claims 9-16 for generating an exponent result and a rounded 
exponent result for the addition operation in dependence on the 

shift information generated by the mantissa addition system and for 
generating overflow and underflow flags for the exponent result and 

the rounded exponent result, the means for providing a binary 
value using the shift information to generate the binary value; 

   rounding (228) logic coupled to receive the normalised 
addition result and the exponent result and the rounded exponent 

result, the rounding logic for rounding the normalised addition 
result and for selecting one result of the exponent result and the 

rounded exponent result in dependence on the rounded addition 
result; and 

   output means for outputting the rounded addition result and 
the selected exponent result. 
</CLAIMS>
</TEXT>
</DOC>
