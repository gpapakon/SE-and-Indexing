<DOC>
<DOCNO>EP-0650118</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and apparatus for displaying hierarchical information of a large software system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F3023	G06F3023	G06F3033	G06F3033	G06F3041	G06F3041	G06F3048	G06F3048	G06F906	G06F906	G06F944	G06F944	G06F1132	G06F1132	G06F1136	G06F1136	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F3	G06F3	G06F3	G06F3	G06F3	G06F3	G06F3	G06F3	G06F9	G06F9	G06F9	G06F9	G06F11	G06F11	G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An interactive method and apparatus for displaying structure, statistics, 
and characteristics of a large software systems, i.e of more than one million lines of 

code. This method and apparatus displays important structure and statistics in a 
manner where the entire software system can be visualized as an entity. The 

visualization technique is to present similar subdivisions of the code in similar 
geometric shapes of having a substantially equal reference frames, such as a 

substantially constant row heights, so relative sizes of the subdivisions can be 
understood. In addition to the sizes, different shading and coloring modes can be 

used to display changes, software errors and software fixes. Further, if data of the 
various releases of a software system are available, the evolution of the system 

through its releases can be animated to provide a greater understanding of the history 
of a large software system. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AT 
&
 T CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AT
&
T CORP.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BAKER MARIA JEAN
</INVENTOR-NAME>
<INVENTOR-NAME>
EICK STEPHEN GREGORY
</INVENTOR-NAME>
<INVENTOR-NAME>
BAKER, MARIA JEAN
</INVENTOR-NAME>
<INVENTOR-NAME>
EICK, STEPHEN GREGORY
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to computer systems and more particularly to an 
apparatus and method for graphically displaying key characteristics of a large 
software system. Large software systems of over one million lines of source code are 
major developments requiring the industrious efforts of many highly trained 
specialists over a long period of time. Software systems have an overall architecture, 
just as a large building has an overall architecture. Within the overall architecture of 
a large software system are subsystems, directories and files that provide the 
particular functionality of the system, just as the stories, wings and rooms of a large 
building provide the functionality of the building. Subsystems, directories and files 
of a system may also evolve over time as the functionality required of them evolves, 
just as wings and rooms of a building may be added, removed and renovated as the 
requirements of a building change. A large building has its original architecture and 
structure displayed in a series of easily visualized technical illustrations called 
blueprints. To assist later construction and renovation of a building, the blueprints 
are revised such that both the original architecture and structure and any later 
changes to the original architecture and structure are shown in a visually 
recognizable and readily understandable manner. Unfortunately, a method for 
displaying the original architecture and structure of a large software system, 
including the subsystems, directories and files thereof, and all of subsequent changes 
in a visually recognizable and readily understandable manner does not currently 
exist. The known displaying and visualization techniques for small software 
systems have not been successfully scaled up for use with large software systems. 
Source code listings of large software systems overwhelm the mind with too much 
fine grain detail. Flow charts and structure diagrams not only become overloaded 
with details, but latter changes to the software system may render the original flow, 
structure and abstractions irrelevant to the current version of the system. 
Additionally, the emerging displaying and visualization techniques for large 
systems, such as the tree-map technique presented in the article "Tree-Maps: A 
Space-Filling Approach to the Visualization of Hierarchical Information Structures"  
 
by Johnson and Shneiderman, Proceedings Visualization '91; produce displays that 
are difficult to understand. The tree-map technique fills a display area
</DESCRIPTION>
<CLAIMS>
Apparatus for displaying at least one statistic about a hierarchy of 
entities to which the statistical information applies in a display in a computer system, 

the apparatus comprising: 
   a first region in the display which corresponds to a topmost entity in the 

hierarchy; and 
   a plurality of contained regions contained in the first region arranged in 

at least one row with each row height being substantially the same for all rows, each 
contained region corresponding to an entity other than the topmost entity, the area of 

each of the contained regions representing the statistic for the corresponding entity, 
each of the contained regions being contained in a region corresponding to an entity 

at the next highest level of the hierarchy, and the contained regions immediately 
contained in a containing region having shapes such that the relative sizes of the 

immediately contained regions are easily perceived from the display. 
The apparatus set forth in claim 1 wherein: 
   the apparatus displays another statistic which applies to the entities; and 

   each of the contained regions corresponding to entities at a given level 
of the hierarchy is visibly divided into subregions according to a value of the other 

statistic for the entity to which the region corresponds. 
The apparatus set forth in claim 2 wherein: 
   all of the regions belong to the same class of polygon. 
The apparatus set forth in claim 3 wherein: 
   the class of polygon is the rectangle. 
The apparatus set forth in claim 4 wherein: 
   each contained region has a designation, respectively; and 

   each designation at least partially is positioned within the region that 
corresponds to its respective entity. 
The apparatus set forth in claim 1, further comprising: 
   a second region in the display which contains an interactive control 

region for adjusting the number of rows into which said first region is divided. 
The apparatus set forth in claim 1, further comprising: 
   means for adjusting a height of each row to keep each row height 

substantially the same and yet fill each row with an integer number of geometric 
shapes. 
A method for displaying at least one statistic about a hierarchy of 
entities to which the statistical information applies in a display in a computer system, 

the method comprising the steps of: 
   allocating a first region in the display which corresponds to a topmost 

entity in the hierarchy; and 
   dividing the first region into a plurality of contained regions contained 

in the first region that are arranged in at least one row with each row height being 
substantially the same for all rows, each contained region corresponding to an entity 

other than the topmost entity, the area of each of the contained regions representing 
the statistic for the corresponding entity, each of the contained regions being 

contained in a region corresponding to an entity at the next highest level of the 
hierarchy, and the contained regions immediately contained in a containing region 

having shapes such that the relative sizes of the immediately contained regions are 
easily perceived from the display. 
The method set forth in claim 8, further comprising the steps of: 
   determining a designation for each contained entity, respectively; and 

   displaying each designation with a center of each designation located 
within the region corresponding to its contained entity, respectively. 
A method for displaying information of a software system having a 
plurality of subsystems, comprising the steps of: 

   determining a total amount of source code of the software system; 
   determining for each subsystem of the plurality of subsystems a 

respective amount of source code; 
   dividing a display into a plurality of rectangular regions with each 

rectangular region representing a respective subsystem of the plurality of 
subsystems; 

   sizing each rectangular region such that each of the rectangular regions 
representing a subsystem has a first dimension which is substantially the same as all 

of the other rectangular regions representing subsystems and an area that is the same 
 

proportion with respect to the display as the amount of source code in its respective 
subsystem is to the total amount of source code of the software system. 
The method set forth in claim 10, further comprising the steps of: 
   determining a name for each subsystem, respectively; and 

   displaying at least part of each name within the rectangular region that 
represents its respective subsystem. 
The method set forth in claim 11, further comprising the steps of: 
   determining for each subsystem a ratio of the amount of source code 

that has been revised to the total amount of source code and a ratio of the amount of 
source code that has not been revised to the total amount of source code; and 

   displaying in each rectangular region a first colored region proportional 

to the size of its respective region as the ratio of the amount of source code that has 
been revised is to the total amount of source code, and a second colored region 

proportional to the size of its respective region as the ratio of the amount of source 
code that has not been revised to the total amount of source code. 
The method set forth in claim 11, further comprising the steps of: 
   determining for each subsystem a ratio of the amount of source code 

that has been revised to the total amount of source code and a ratio of the amount of 
source code that has not been revised to the total amount of source code; and 

   displaying in each rectangular region a first shaded region proportional 
to the size of its respective region as the ratio of the amount of source code that has 

been revised is to the total amount of source code, and a second shaded region 
proportional to the size of its respective region as the ratio of the amount of source 

code that has not been revised to the total amount of source code. 
A method for displaying information of a software system having a 
plurality of releases and a plurality of subsystems, comprising the steps of: 

   determining for each subsystem of the plurality of subsystems a 
respective maximum amount of source code for any release of said plurality of 

releases; 
   determining a total maximum amount of source code of the software 

system by totaling said subsystem maximum amounts of source code;
 

   dividing a display into a plurality of rectangular regions with each 
rectangular region representing a respective subsystem maximum amount of source 

code; 
   sizing each rectangular region such that each of the rectangular regions 

representing a subsystem has a first dimension which is substantially the same as all 
of the other rectangular regions representing subsystems and an area that is the same 

proportion with respect to the display as the maximum amount of source code in its 
respective subsystem is to the total maximum amount of source code of the software 

system. 
The method set forth in claim 14, further comprising the steps of: 
   displaying for each release of the software system within each rectangle 

a shading that represents the ratio of the amount of source code in the displayed 
release to the maximum amount of source code for the respective subsystem; and 

   sequentially displaying said rectangles and said shadings for each 
release of the software system at a rate such that changes in the relative sizes of the 

shadings are easily perceived from the display. 
The method set forth in claim 14, further comprising the steps of: 
   displaying for each release of the software system within each rectangle 

a colored area that represents the ratio of the amount of source code in the displayed 
release to the maximum amount of source code for the respective subsystem; and 

   sequentially displaying said rectangles and said colored areas for each 
release of the software system at a rate such that changes in the relative sizes of the 

colored areas are easily perceived from the display. 
The method set forth in claim 16, further comprising the steps of: 
   displaying an intermediate size of each colored area that changes size 

from one release to another release to animate the changes in the relative sizes of the 
colored areas to aid perception of the evolution of the software system. 
The method according to claim 17, further comprising the step of: 
   adjusting the rate of animation according to a user selection. 
</CLAIMS>
</TEXT>
</DOC>
