<DOC>
<DOCNO>EP-0658848</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for communicating safely with untrusted servers
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1200	G06F1200	G06F2100	G06F946	G06F946	G06F2100	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F12	G06F12	G06F21	G06F9	G06F9	G06F21	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An apparatus and a method are disclosed whereby a client application can use a trusted 
"Deputy" application to execute operation calls on several servers on behalf of the client, the Deputy 

application being able to convince the servers that the deputy application is representing the original 
client application, and the client thereby reducing the risk of being contaminated by uncontrolled 

access to an unknown server, while at the same time being able to obtain the desired processing 
results regardless of the number or location of servers involved in providing the results. 
A distributed operating system is disclosed which contains a client application, a number of 
servers and a deputy application. The deputy application can be trusted by the client application to 

act on behalf of the client application in executing a call on a target program, the call on the target 
program requiring access to program implementations on one or more of the servers, and the deputy 

application being able to prove to the servers that it is acting in behalf of the client application. 
The process requires that the client locate a Deputy application which can support the client 
application and which can be trusted by the client, and establish this Deputy application on a trusted 

machine. The client then executes all calls on a target object via this trusted Deputy which can then 
invoke calls on several objects which may be subservient to the target object, and which several 

subservient objects may be located on different servers. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
SUN MICROSYSTEMS INC
</APPLICANT-NAME>
<APPLICANT-NAME>
SUN MICROSYSTEMS, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HAGMAN ROBERT B
</INVENTOR-NAME>
<INVENTOR-NAME>
HAMILTON GRAHAM
</INVENTOR-NAME>
<INVENTOR-NAME>
HAGMAN, ROBERT B.
</INVENTOR-NAME>
<INVENTOR-NAME>
HAMILTON, GRAHAM
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the fields of distributed computing systems,
client-server computing and object oriented programming. Specifically, the present invention is
a method and apparatus for providing client programs the ability to communicate with objects on
unknown and untrusted servers in a safe and secure manner.In an object oriented system, an object is a component comprising data and
operations which can be invoked to manipulate the data. The operations (also called "methods")
are invoked on the object by sending calls to the object. Each object has an object type that
defines the operations that can be performed on objects of that type. One object type may inherit
the object operations defined and implemented for other object types. For further description of
object oriented design and programming techniques see "Object-oriented Software
Construction" by Bertrand Meyer, Prentice-Hall 1988.In client-server computing, typically there is a set of computers that can
communicate with one another through a network connecting the computers. Some of these
computers act as providers of services or functionality to other computers. The providers of a
service or functionality are known as "servers", and the consumers of the service or functionality
are called "clients". The client-server model also generalizes to the case where distinct
programs running on the same computer are communicating with one another through some
protected mechanism and are acting as providers and consumers of functionality.In object oriented distributed systems based upon the client-server model, there
exist servers that provide object oriented interfaces to their clients. These servers support objects
consisting of data and the associated software for manipulating the data according to the
operations permitted by this type of object. Clients may obtain access to these objects and may 
execute calls on them by transmitting the calls to the server. At the server these calls are
executed via the software associated with the object. The results of these calls are then
transmitted back to the client.Currently, a number of companies have agreed to standardize certain object definitions and
interfaces to permit the sharing of such objects with one another. One system, designed to enable
participation in such inter-company sharing of objects, is called Distributed Objects Environment
("DOE"), created by Sun Microsystems, Inc.DOE is an object-oriented system, providing remote access from clients to DOE objects.
Server
</DESCRIPTION>
<CLAIMS>
In a distributed computer system, a method for a user to communicate
safely with an untrusted server (160) by delegating a deputy application (116)

to act on behalf of said user, said method performed by instructions in a
central processor of a computer in said distributed systems, said method

being 
characterised by
 the steps of:

identifying the deputy application (116) in a computer in said distributed
computer system, said deputy application (116) being recommended by said

untrusted server (160) to a client application (34,70,82,92,112,200,142), and if
said recommended deputy application (116) is recognized as trustworthy

designating said recommended deputy application (116) as a trusted deputy
application (116) to act on behalf of said client application

(34,70,82,92,112,200,142);
executing a call on one or more target programs by invoking said call
on said trusted deputy application (116) said call being initiated by said client

application (34,70,82,92,112,200,142);
passing said invoked call to one or more servers (124 and 128) which
contain implementations of said one or more target programs, by said trusted

deputy application (116); and
accepting said invoked call by said one or more servers (124 and 128)
which contain implementations of said one or more target programs by

recognizing that said trusted deputy application (116) is acting for said client
application (34,70,82,92,112,200,142) regardless of which computer in said

distributed computer system said trusted deputy application (116) resides on.
The method of claim 1 wherein said distributed computer system is an
object oriented system, said target programs are target objects

(46,78,144,202,220,152) and said deputy application (116) is represented by
a deputy object (152). 
The method of claim 2 wherein the step of identifying a deputy
application (116) comprises the steps of:


interrogating a server (160) which represents a target object
(46,78,144,202,220,152) for a name of a trusted deputy application (116),

said interrogation being made by said client application
(34,70.82,92,112,200,142);
locating said trusted deputy application (116) by said client application
(34,70,82,92,112,200,142), and
determining that said trusted deputy application (116) is trusted by said
client application (34,70,82.92,112,200,142).
The method of claim 1 wherein said distributed computer system which
can access one or more untrusted servers, further comprising the steps of:


initiating a client application (34,70,82,92,112,200,142), said client
application (34,70,82,92,112,200,142) being located on a first computer (96);
accessing a first target object (98,126,162) by said client application
(34,70,82,92,112,200,142), an implementation of said first target object

(98,126,162) being located on a first server (96,124);
obtaining from said first target object (98,126,162) and identification of
a deputy application (116);
locating said identified deputy application (116);
determining whether said client application (34,70,82,92,112,200,142)
is willing to trust said identified deputy application (116); and
using said identified deputy application (116) which has been located,
and which can be trusted by said client application (34,70,82,92,112,200,142),

to act as a trusted representative of said client application
(34,70,82,92,112,200,142) in dealing with said first server (124).
The method described in claim 4 wherein said deputy application (116)
which has been located, and which can be trusted by said client application 

(34,70,82,92,112,200,142), will run on said first computer (96,124) which also
contains said client application (34,70,82,92,112,200,142).
The method described in claim 4 wherein said deputy application (116)
which has been located, and which can be trusted by said client application

(34,70,82,92,112,200,142) will run on a second computer (100,128) which
does not contain said client application (34,70,82,92,112,200,142) but which

is trusted by said client application (34,70,82,92,112,200,142).
The method described in claim 4 wherein said step of accessing a first
target object (98,126,162) by said client application

(34,70,82,92,112,200,142) comprises the additional step of using a first target
object (98,126,162) reference in order to ac
cess said first target object
(98,126,162), said first target object (98,126,162) reference containing a flag

(142) specifying whether a trusted deputy application (116) is necessary.
The method described in claim 7 comprising an additional step of said
client application (34,70,82,92,112,200,142) passing security credentials to

said deputy application (116) so that said deputy application (116) can prove
to servers (160) that said deputy application (116) is allowed to represent said

client application (34,70,82,92,112,200,142).
The method described in claim 7 wherein said deputy application (116),
which has been located, and which can be trusted by said client application

(34,70,82,92,112,200,142), creates a deputy object to which said client
application (34,70,82,92,112,200,142) sends subsequent calls directed at said

first target object (98,126,162).
The method described in claim 9 wherein said deputy object supports
an interface which is identical to an interface supported by said first target

object (98,126,162). 
The method described in claim 7 wherein said deputy application (116),
which has been located, and which can be trusted by said client application

(34,70,82,92,112,200,142), can perform operations on other servers (160)
which said first server (96,124) would be unable to do.
The method described in claim 11 wherein said deputy application
(116), which has been located, and which can be trusted by said client

application (34,70,82,92,112,200,142), can perform some operations that
would normally be performed by said first server (96,124).
The method described in claim 12 wherein said deputy application
(116), which has been located, and which can be trusted by said client

application (34,70,82,92,112,200,142), performs the additional steps of:

obtaining one or more additional objects from said first server (96,124)
as a result of executing a call on said first target object (98, 126,162) as

requested by said client application (34,70,82,92,112,200,142); and
operating directly on said one or more additional objects as required to
complete said call on said first target object (98,126,162).
The method described in claim 13 wherein said one or more additional
objects from said first server (96,124), which are obtained as a result of

executing a call on said first target object (98,126,162) as requested by said
client application (34,70,82,92,112,200,142), may be located on servers (160)

other than said first server (96,124).
The method of claim 1 wherein said distributed computer system which
can access one or more servers (124 and 128), further comprising the steps

of:

creating an object reference which points to a first target object (98,
126,162) located on a first server (96,124) wherein said object reference 

contains a flag (142), said flag (142) being coded to indicate to a client
application (34,70,82,92,112,200,142) whether or not a deputy application

(116) is recommended when invoking operations on said target object
(46,78,144,202,220,152):


creating a deputy application (116) if one is recommended for use with
said first target object (98,126,162);
installing said deputy application (116) on a machine trusted by said
client application (34,70,82,92,112,200,142); and
using said deputy application (116) as a trusted intermediary by said
client application (34,70,82,92,112,200,142) to invoke operations on said first

target object (98,126,162) if said flag (142) in said object reference to said first
target object (98,126,162) indicates that use of a deputy application (116) is

recommended.
The method described in claim 15 wherein said object reference is
created by a create program located on said server (96,124), said create

program determining whether said flag (142) must be set to indicate that a
deputy application (116) is recommended from indications in an

implementation program for said target object (46,78,144,202,220,152).
The method described in claim 16 wherein the step of using said
deputy application (116) comprises the additional step of:


checking said flag (142) in said object reference to said first target
object (98,126,162), when said object reference is first invoked by said client

application (34,70,82,92,112,200,142), to determine if a deputy application
(116) is recommended;
locating said deputy application (116) on a machine trusted by said
client application (34,70,82,92,112,200,142) if said flag (142) indicates that

said deputy application (116) is recommended; and 
invoking an operation on said first target object (98,126,162) by making
said invocation on a deputy object, said deputy object being created by said

deputy application (116).
The method described in claim 17 comprising the additional step of
invoking an operation directly on said first target object (98,126,162) without

use of a deputy application (116) when said flag (142) indicates that no
deputy application (116) is recommended.
The method described in claim 18 comprising the additional step of
invoking an operation directly on said first target object (98,126,162) without

use of a deputy application (116) when said flag (142) indicates that a deputy
application (116) is recommended but said recommended deputy application

(116) cannot be located on a machine trusted by said client application
(34,70,82,92,112,200,142).
A system comprising:

a computer program product having a computer readable medium
having a computer program recorded thereon for use in a distributed

computer system for executing programs on one or more untrusted servers
(160), said computer program product comprising:


program code mechanisms for
performing all the method steps of claim 1.
The system of claim 20 wherein the distributed computer system
including a plurality of servers and having a plurality of computers

interconnected by a communications link, said distributed computer system
comprising:


a deputy application (116) which can be trusted by a client application
(34,70,82,92,112,142,200) to act on behalf of said client application in

executing a call on one or more target programs;
a first target program (98,126,162) residing on a first server (96,124),
said first server being coupled to said deputy application (116), said first target

program (98,126,162) containing a reference to a second target program
(102,130,160); and
a program code mechanism for executing said call by said client
application (34,70,82,92,112,142,200), said call being executed on said

deputy application (116), said deputy application executing said call on said
first target program (98,126,162) and said second target program

(102,130,160) on behalf of said client application, said deputy application
being trusted by said first target program and said second target program,

whereby said client application can access a plurality of target programs
(46,78,144,152,202,220) through a trusted intermediary.
The system of claim 21 wherein said second target program
(102,130,
160) is located on a second server (100,128) that is unknown by
said client application.
The system of claim 21 wherein said programs are object oriented
system objects.
The system of claim 21 wherein said deputy application (116) is
located on a same machine as said client application. 
The system of claim 21 wherein said deputy and said client application
are located on different machines, both of said machines being trusted by said

client application (34,70,82,92,112,142,200).
The system of claim 21 wherein said program code mechanism for
executing a call by said client application determines whether a deputy

application is required for executing said call and if not, executes said call
directly on said first target program (98,126,162).
The system of claim 20, wherein a plurality of servers containing one or
more target object implementations, the improvement comprising:


a deputy application (116) which is trusted by said client application
(34,70,82,92,112,142,200) to act in said client application's behalf, said

deputy application (116) being trusted by one or more of said plurality of
servers, wherein said client application executes a call on said one or more

target object implementations by invoking said call on said deputy application
(116).
The system of claim 20 wherein the distributed computer system
having a plurality of servers, said distributed computer system comprising:


a client application (34,70,82,92,112,142,200) operating in said
distributed computer system; and
a deputy application (116) which can be trusted by said client
application to act on behalf of said client application in executing a cell on a

target program, said call on said target program requiring access to program
implementations on one or more of said servers, and said deputy application

(116) being trusted by said one or more of said servers.
</CLAIMS>
</TEXT>
</DOC>
