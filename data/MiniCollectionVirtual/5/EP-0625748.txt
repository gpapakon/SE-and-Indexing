<DOC>
<DOCNO>EP-0625748</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Program generating apparatus
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1750	G06F906	G06F944	G06F1750	G06F944	G06F906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	G06F9	G06F9	G06F17	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A program generating process is a plant-like 
process to uniformly generate an accurate, error-free 

program in accordance with an industrial technique, and 
a design process requires simple jobs to shorten the 

program generation time. A skeleton file (300) stores 
skeletons having predetermined formats and constituted 

by instruction data of fixed process items in regular 
job contents so as to correspond to different types of 

job contents. A program generating section (100) includes 
a unit for reading out a skeleton of a designated 

format from a workstation (200), a unit for requesting 
to input predetermined instruction words in undefined 

instruction areas of the readout skeleton through a 
display unit in a predetermined order, and a program 

coding unit for determining that necessary instruction 
data are input to all the undefined instruction areas of 

the readout skeleton and causing an automatic coding 
section (500) to code the resultant structure to obtain 

a program. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MATSUZUKI TADAO
</APPLICANT-NAME>
<APPLICANT-NAME>
MATSUZUKI, TADAO
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
MATSUZUKI TADAO
</INVENTOR-NAME>
<INVENTOR-NAME>
MATSUZUKI, TADAO
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to
program generating apparatus for
generating a source code program without mastering a
program language in program generation.Conventionally, when a program is ordered to a
software vendor, a customer explains the job contents to
a sales engineer and requests necessary processing
contents. The sales engineer explains the processing
contents to a system engineer. The system engineer
defines program conditions for the processing contents
and performs basic and detailed designs. A programmer
performs coding based on the detailed design.As described above, the process required until a
source code program is generated is classified into (1)
a step of transmitting the processing contents from the
customer to the sales engineer, (2) a step of
transmitting the processing contents from the sales
engineer to the system engineer, performing the basic
design, and then designing the detailed portions of the
program based on the basic design, and (3) a step of
causing the program to perform final coding. If an
error (e.g., an item omission) in transmission contents
is present in steps (2) and (3), although no error is
present in step (1), it is difficult to find out such
an error due to the following reason. Since
transmission of the detailed contents from the system 
engineer to the program becomes time-consuming and cumbersome,
the system engineer transmits only the desired
conditions to the programmer. Upon reception of the
desired conditions, the programmer performs coding in
accordance with his/her own decision. In this case, the
resultant program itself may provide a layout, prints,
image display contents, all of which are different from
the expected ones.As described above, a large number of steps are
required in a conventional program generating process,
errors tend to occur, and time-consuming operations are
required.It is also known from the publication "298 NEC Research
& Development (1987) October, No. 87, Tokyo, Japan, pages 63 to 75, an
integrated software development support system designed for
improvement of software quality and productivity. According
to this document, a program source coding (called a program
skeleton) is automatically synthesized. In other words, the
user only has to specify the selected pattern name and gives
customizing parameters interactively from a terminal and then
he can get an intended program skeleton. In this way, all the
data description, all the necessary procedures, are generated
and readability is enhanced. Anyway, after skeleton
customi
</DESCRIPTION>
<CLAIMS>
A program generating apparatus comprising:

storage means (300) for storing a plurality of skeletons,
each of the plurality of skeletons serving as a framework for

generating a program and having a step area for instructions
whose data process procedures are predetermined and a step

area for undefined instructions;
display means (200) for displaying characters representing
job contents corresponding to the plurality of skeletons

stored in said storage means (300);
selecting means (200) for inputting an identification code
of a job content displayed on said display means (200) from

a keyboard;
readout means (200, 100) for reading out any one of the
plurality of skeletons in response to the identification code

input from said selecting means (200), the readout skeleton
waiting in a program generating section; and
automatic coding means (100, 500) for converting a program
into a machine language after the step area for the undefined

instructions of the waiting skeleton is filled with the
instruction data, characterized by the fact that said program

generating apparatus further comprises:

a selection file (400) including instruction program words
which are adapted for filling the step area for the undefined

instructions of the waiting skeleton; and
input request means (100) for displaying and requesting,
through said display means (200), input instruction data from

the operator referring to corresponding instruction program words included
in the selection file (400) which are to be set in the step

area for the undefined instructions and included in the
skeleton waiting in said program generating section, said

input request means (100) also comprising:

means (Cl - C5) for sequentially checking program steps
of the waiting skeleton to detect whether a flag is present 

in the program steps;
means (C6) for causing said display means (200) to display
an instruction data input request when the flag is detected;

and
means (C8) for correcting step addresses of the waiting
skeleton in accordance with a change in a number of steps when

the instructions data is input in response to the input
request.
An apparatus according to claim 1, characterized by
further comprising:


means (C8) for creating an address map representing a
correspondence between the step addresses of the waiting

skeleton before correction and those after the correction when
the step addresses of the waiting skeleton are corrected;
means (C4) for detecting a program end instruction of the
waiting skeleton;
means (C12) for detecting whether a jump instruction is
present in the steps of the waiting skeleton after the program

end instruction is detected; and
means (C13) for correcting a jump destination address
designated by the jump instruction with reference to the

address map when the jump instruction is present.
</CLAIMS>
</TEXT>
</DOC>
