<DOC>
<DOCNO>EP-0631229</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and system of storing and restoring object persistent attribute data.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F944	G06F944	G06F1200	G06F1200	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F12	G06F12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for storing object information on a 
persistent medium. A DefaultEncoderDecoder is supplied that 

encodes object persistent attribute data into a string of 
attribute names, types and data values. The encoding and 

decoding is managed by one or more get and one or more set 
methods. The get methods control storing of the data while 

set methods control restoring of persistent data. Encoded 
strings of attribute data are upwardly compatible through 

replacement or overriding of the set methods. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ERICKSON CHARLES ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
SESSIONS ROGER HEREWARD
</INVENTOR-NAME>
<INVENTOR-NAME>
ERICKSON CHARLES ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
SESSIONS ROGER HEREWARD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to data processing systems 
and more particularly to systems for creating application 
programs or operating system programs. Still more 
particularly, the present invention relates to object oriented 
systems having persistent object storage functions operable to 
store and restore persistent objects without operator 
modification. The development of application and system software for 
data processing systems has traditionally been a time 
consuming task. The field of software engineering has 
attempted to overcome the limitations of traditional 
techniques by proposing new, more efficient software 
development models. Object oriented programming has emerged 
as a promising technology that will allow rapid development, 
implementation and customization of new software systems. Object oriented programming uses a toolkit of system 
objects that can be assembled to perform the final task. Each 
object has certain data attributes and processes or methods 
that operate on that data. Data is said to be "encapsulated" 
by an object and can only be modified by the object methods. 
Methods are invoked by sending a message to an object 
identifying the method and supplying any needed arguments. Object oriented systems have two important properties in 
addition to encapsulation. "Inheritance' is the ability to 
derive a new object from an existing object and inherit all 
properties, including methods and data structure, from the 
existing object. The new object may have certain unique 
features which are supplied as overrides or modifications to 
the existing class. I.e. a new subclass needs to specify only 
the functions and data that distinguish that class from the 
existing more general class. The ability to override an existing method description 
enables polymorphism, the ability to have a single message to 
an object be processed in different ways depending on the  
 
object itself. Inheritance and polymorphism create a powerful structure 
for implementing new software systems. The software developer 
does not have to develop each piece of a system, he or she 
need only specify the unique features of the system. The power of object oriented systems is realized through 
the development of system "frameworks." A framework is a 
collection of base classes that can be used by a system 
implementor to create a final systems product. The framework 
is defined and developed to work together as a system. 
Conceptually, the framework is much like a set of standard 
hardware components
</DESCRIPTION>
<CLAIMS>
A system for storing data for a selected object to a 
persistent medium in an object oriented computer system also 

having a memory, a processor, and operator interaction means, 
wherein data resides in system objects in said memory, and 

wherein said data is manipulated by processing methods 
associated with said object, the system comprising: 

   attribute extraction means for determining a number, 
names, and types of attributes defined for said selected 

object, said attribute extraction means being responsive to a 
data storage request; 

   method construction means for constructing a method 
invocation request to get attribute values for the attributes 

extracted by said attribute extraction means, said method 
construction being responsive to said data storage request; 

   data formatting means for formatting said attribute 
names, types and values for storage to said persistent medium; 

and 
   data restoration means for restoring said attributes to 

a restored object instance. 
The system of claim 1, wherein said method construction 
means invokes a "get" method. 
The system of claim 1 or 2, wherein said data restoration 
means comprises: 

   persistent medium access means for reading data from said 
persistent medium; 

   storage allocation means for allocating storage in said 
memory for attribute data to be restored; 

   method construction means for constructing a method 
invocation request to restore attribute data. 
The system of claim 3, wherein the method construction 
means constructs a "set" method request using attribute name 

and type. 
A method of storing and restoring object persistent 
attribute data to and from a persistent storage medium, said 

method operating in an object oriented system wherein each 
object instance contains attribute data that is manipulated by 

process methods, and wherein information on the number and 
type of attributes of an object is stored in a repository, the 

method comprising the steps of: 
   defining a plurality of data extraction methods for each 

persistent attribute; 
   accessing said repository to determine the number, name 

and type of persistent attributes for said object; 
   constructing a request to invoke one of said plurality of 

data extraction methods based on said name and type of 
persistent attributes to return a plurality of attribute data 

values; 
   storing to said persistent medium a string of attribute 

names and types; 
   storing to said persistent medium a string of said 

attribute data values; 
   restoring said object data by successively executing 

restoration methods associated with said attributes. 
The method of claim 5 wherein said restoring step 
includes the steps of: 

   reading an attribute name from said persistent medium; 
   determining attribute type from said persistent medium; 

   allocating space for said attribute value; 
   constructing a method invocation request to set the 

restored attribute data. 
</CLAIMS>
</TEXT>
</DOC>
