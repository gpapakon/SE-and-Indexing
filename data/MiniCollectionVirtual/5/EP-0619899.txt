<DOC>
<DOCNO>EP-0619899</DOCNO> 
<TEXT>
<INVENTION-TITLE>
SOFTWARE CONTROL OF HARDWARE INTERRUPTIONS
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1324	G06F1320	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F13	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A computer system that has means for processing (266) interrupt requests that are generated both by hardware interrupt request generators (260..., 265) and by control software (264). A common register array is provided having locations for the general registers and the control registers and having specifically interrupt register locations (261) for storing interrupt requests. The hardware generators (260..., 265) store the interrupt requests into the interrupt register locations (261). Similarly, the control software (264) reads and writes to the interrupt register locations (261) whereby interrupt requests can be generated and terminated in a unified manner under software and hardware control.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AMDAHL CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AMDAHL CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CONNELL JEFFERSON JOSEPH
</INVENTOR-NAME>
<INVENTOR-NAME>
JOHNSON VERNON R
</INVENTOR-NAME>
<INVENTOR-NAME>
LIPMAN PETER H
</INVENTOR-NAME>
<INVENTOR-NAME>
MAIER ROBERT MARTIN
</INVENTOR-NAME>
<INVENTOR-NAME>
CONNELL, JEFFERSON, JOSEPH
</INVENTOR-NAME>
<INVENTOR-NAME>
JOHNSON, VERNON, R.
</INVENTOR-NAME>
<INVENTOR-NAME>
LIPMAN, PETER, H.
</INVENTOR-NAME>
<INVENTOR-NAME>
MAIER, ROBERT, MARTIN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the field of
computers and particularly to computers having central
processing units (CPU's) that operate in accordance with
the IBM ESA/390 architecture and particularly to
computers that have software control of hardware
interruptions.In existing computer systems there are two layers of
architectures, the outer and the inner layers. The outer
layer is the architectural layer which is defined, for
example, in a specification such as the Principles of
Operation (POO) for the IBM ESA/390. At this layer, an
interruption is an unexpected transfer of control. The
inner layer mainly implements the interruptions. Many
interruptions for a CPU may exist concurrently.
Therefore, the inner layer maintains a list of those
interruptions that are pending in a register, so they may
be processed in the order defined by the outer
architecture. The inner layer must be able to set bits
in the interruption register as they arise, and also be
able to clear the bits as the interruptions are serviced.Various interruptions can be generated by different
modules/functions in a computer system. Different
classes of interruptions have been defined at the outer
layer in the existing computer systems such as External,
I/O, Machine Check, Program, Supervisor Call, and Restart
interruptions. An interruption signal/level is used to 
set an appropriate bit in the interrupt register, related
to a specific interruption. Next there is an interrupt
mask which only permits the allowed interruptions to be
seen by the priority encoder. The priority encoder
examines the pending interruptions in order to specify
which one has the highest priority and needs to be
serviced next. After the interruption is serviced, the
appropriate bit in the interrupt register is cleared.Once a bit associated with an interruption is set,
Control Software can not reset it. However, the bit can
be reset as a part of a CPU Reset or an IPL (Initial
Program Loading) operations, or by hardware after the
interruption is serviced.ESA/390 architecture computers are controlled in
part by a Program Status Word (PSW). The program-status
word (PSW) includes the instruction address, condition
code, and other information used to control instruction
sequencing and to determine the state of the computer.
The active or controlling PSW is called the current PSW.
It governs the program currently being executed.
The CPU has an interruption capability, which
permits the CPU to switch rapidly to another program in
response to exception conditions and
</DESCRIPTION>
<CLAIMS>
A computer system including an interrupt processor (266) for
interrupting a program being processed by said computer system, comprising a

sub-system for processing interrupt requests to said interrupt processor, said
sub-system comprising:


hardware means (260, .., 265) for generating interrupt requests;
control means (264) for implementing control software, said control
software causing interrupt requests to be generated by said control means;
interrupt register means (261) for storing and identifying said interrupt
requests generated by said hardware means (260, ..., 265) and said control means

(264); and
selection means (262, 263) for selecting and sending one of said stored
interrupt requests stored in said interrupt register (261) to said interrupt processor for

processing; and wherein
said control means (264), under control of said control software, is
arranged for removing interrupt requests stored by said hardware means and said

control means in said interrupt register means whereby to enable an interrupt request
in said computer system to b
e generated and terminated through said interrupt register
under control of said control software.
The computer system of claim 1 further comprising a plurality of
architecturally defined registers including general registers used to store user

information and control registers used for control functions, said wherein:

said interrupt register is located in a common register array having
locations for said general registers, said control registers and said interrupt register;

and 
said control means, under control of said control software, reads and
writes to said interrupt register for storing and deleting, under software control, said

hardware interrupt request in said interrupt register.
The computer system of claim 1 or 2 wherein said hardware means
includes:


a plurality of class means, each said class means generating a distinct
hardware interrupt request for hardware interrupts grouped into a class tor common

processing by said interrupt processor.
The computer system of claim 1 or 2 wherein said selection means
includes:


mask means (262) for selectively masking said hardware and software
interrupt requests stored in said interrupt register (261) that are not to be transmitted

to said interrupt processor (266).
The computer system of claim 4 wherein said selection means further
includes:


interrupt priority encoder (263) for assigning priority to each hardware
interrupt request stored in said interrupt register such that the interrupt request

transmitted to said interrupt processor is the interrupt request having the highest
priority regardless of whether the interrupt request was generated by said hardware

means (260, .., 265) or said control means (264).
</CLAIMS>
</TEXT>
</DOC>
