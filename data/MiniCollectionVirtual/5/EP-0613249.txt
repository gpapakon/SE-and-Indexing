<DOC>
<DOCNO>EP-0613249</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Custom look-up table with reduced number of architecture bits.
</INVENTION-TITLE>
<CLASSIFICATIONS>H03K19173	H03K19173	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H03K	H03K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H03K19	H03K19	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A custom look-up table for use in programmable logic devices with a 
reduced number of programmable architecture elements (44'-1,...,44'-4). 

Look-up tables which 
perform only a limited number of specific logic functions may be 

designed with fewer 
programmable architecture elements (i.e., SRAM cells) than look-up 

tables which are 
intended to perform any desired logic function, thus resulting in more 

efficient use of 
integrated circuit surface area. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ALTERA CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
ALTERA CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BALICKI JANUSZ
</INVENTOR-NAME>
<INVENTOR-NAME>
KIANI KHUSROW
</INVENTOR-NAME>
<INVENTOR-NAME>
NOUBAN BEZHAD
</INVENTOR-NAME>
<INVENTOR-NAME>
BALICKI, JANUSZ
</INVENTOR-NAME>
<INVENTOR-NAME>
KIANI, KHUSROW
</INVENTOR-NAME>
<INVENTOR-NAME>
NOUBAN, BEZHAD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to a look-up table architecture. In particular, it 
relates to a technique for reducing the number of programmable architecture elements, 
such as SRAM cells, required, yet implements a look-up table which is capable of 
performing a limited number of specific multi-variable logic functions. Look-up tables are highly configurable combinatorial logic devices. 
Their programming flexibility makes them desirable for use as basic building blocks in 
programmable logic devices (PLDs). Generally, a look-up table employs an array of 
programmable architecture elements, such as SRAM cells, to store data bits which are 
effectively used as output signals, each of the data bits corresponding to a particular set 
of input signals. A particular data bit is gated to the look-up table output terminal by 
means of logic gates which are controlled by the input signals (and their complements) 
to the look-up table. Fig. 1 is an illustration of the implementation of a generic 4-input 
look-up table. The look-up table is controlled by 16 programmable SRAM cells 44, 
although any other type of memory device may be used. The output signal of each of 
these SRAM cells is applied to a respective one of 16 AND gates 80. Alternate ones 
of AND gates 80 are respectively controlled by the true and complement of the first 
data input J, the complement of input J being produced by inverter I1. The outputs of 
adjacent pairs of AND gates 80 are then combined by OR gates 81 and applied to eight 
AND gates 82. Alternate ones of AND gates 82 are respectively controlled by the true 
and complement of the second data input K, the complement of input K being 
produced by inverter I2. The outputs of adjacent pairs of AND gates 82 are combined 
by OR gates 83 and then applied to four AND gates 84. Alternate ones of AND gates 
84 are respectively controlled by the true and complement of the third data input L, the 
complement of input L being produced by inverter I3. The outputs of adjacent pairs of  
 
AND gates 84 are combined by OR gates 85 and applied to two AND gates 86. One 
of AND gates 86 is controlled by the true of the fourth data input M, while the other 
AND gate 86 is controlled by the complement of that input, the complement of input 
M being produced by inverter I4. The outputs of AND gates 86 are combined by OR 
gate 87 to produce the data output. It will be apparent from the foregoing that any 
desired logical combination of data inputs J-M will produce a desired output from the 
SRAM cells 44. The
</DESCRIPTION>
<CLAIMS>
A method for reducing the number of programmable 
architecture elements required for implementing a look-up table 

having a plurality of inputs, the method comprising: 
   choosing at least one logic function to be performed by 

the look-up table; 
   determining an output state for each input state to the 

look-up table, the output state comprising an array of outputs 
of the look-up table, the array of outputs comprising responses 

of the logic functions to the input states; 
   forming groups of the output states, the groups of output 

states comprising identical output states; 
   eliminating selected groups of the output states, the 

selected groups not requiring programmable architecture 
elements; and 

   assigning a programmable architecture element for each 
remaining group of output states. 
A method as claimed in claim 1 wherein the programmable 
architecture elements comprise memory cells. 
A method as claimed in claim 1 wherein the programmable 
architecture elements comprise static random-access-memory 

cells. 
A method as claimed in claim 1, 2 or 3 wherein the logic 
functions comprise at least one of AND, OR and XOR. 
A look-up table architecture for performing a limited 
number of specific multi-variable logic functions comprising: 

   a look-up table output terminal; 
   an array of programmable architecture elements, the 

programmable architecture elements for storing output states 
defined by the specific multi-variable logic functions, the 

number of the programmable architecture elements being the same 
as the number of different output states;

 
   a plurality of logic gates coupled to the array of 

programmable architecture elements and the look-up table output 
terminal, the logic gates for gating the output states stored 

in the array of programmable architecture elements to the 
look-up table output terminal; and 

   a plurality of input terminals connected to the logic 
gates, signals being supplied to the input terminals, the 

signals defining an input state to control the plurality of 
logic gates. 
A look-up table architecture for performing AND, OR and 
XOR logic functions, the look-up table architecture comprising: 

   a look-up table output terminal; 
   at least three programmable architecture elements, the 

programmable architecture elements for storing output states 
defined by the AND, OR and XOR logic functions; 

   a plurality of logic gates coupled to the programmable 
architecture elements and the look-up table output terminal, 

the logic gates for gating the output states stored in the 
programmable architecture elements to the look-up table output 

terminal; and 
   a plurality of input terminals connected to the logic 

gates, signals being supplied to the input terminals, the 
signals defining an input state to control the plurality of 

logic gates. 
A look-up table architecture as claimed in claim 5 or 6 
further comprising a plurality of inverters, the inverters for 

generating complements of the input states, the complements for 
controlling the logic gates. 
A look-up table architecture as claimed in claim 5, 6 or 
7 wherein the programmable architecture elements comprise 

memory cells. 
A look-up table architecture as claimed in claim 5, 6 or 
7 wherein the programmable architecture elements comprise 

static random-access-memory cells. 
A look-up table architecture for performing AND, OR and 
XOR logic functions, the look-up table architecture comprising: 

   a look-up table output terminal; 
   at least three programmable static random-access-memory 

cells, the static random-access-memory cells for storing output 
states defined by the AND, OR, and XOR logic functions; 

   a plurality of AND and OR logic gates coupled to the 
static random-access-memory cells and the look-up table output 

terminal, the logic gates for gating the output states stored 
in the static random-access-memory cells to the look-up table 

output terminal; 
   a plurality of input terminals connected to the logic 

gates, signals being supplied to the input terminals, the 
signals defining an input state to control the plurality of 

logic gates; and 
   a plurality of inverters, the inverters for generating 

complements of the input states, the complements for 
controlling the logic gates. 
</CLAIMS>
</TEXT>
</DOC>
