<DOC>
<DOCNO>EP-0651328</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Event architecture for system management in an operating system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F954	G06F944	G06F944	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An event system is provided within an object-oriented 
environment. The event system informs users and 

system functions of events within the system. Events may be 
modeled as objects that are visible within the global 

namespace. These objects include event source objects and 
event sink objects. Event source objects generate event 

reports and event sink objects are the objects that receive 
reports. Special objects may be incorporated in the system to 

direct event reports from an event source object to an event 
sink object. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BLANFORD MARK S
</INVENTOR-NAME>
<INVENTOR-NAME>
HEIZER ISAAC J
</INVENTOR-NAME>
<INVENTOR-NAME>
ROSS KEVIN W
</INVENTOR-NAME>
<INVENTOR-NAME>
SEAMAN MICHAEL R C
</INVENTOR-NAME>
<INVENTOR-NAME>
BLANFORD, MARK S.
</INVENTOR-NAME>
<INVENTOR-NAME>
HEIZER, ISAAC J.
</INVENTOR-NAME>
<INVENTOR-NAME>
ROSS, KEVIN W.
</INVENTOR-NAME>
<INVENTOR-NAME>
SEAMAN, MICHAEL R. C.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to data processing systems, and more
particularly, to an event system and method for reporting system management
events in a data processing system.Many distributed operating systems have difficulty in monitoring events. In
particular, these operating systems have difficulty determining where events occur
and obtaining useful information about the events. Such systems do not provide a
convenient architecture for raising and sending events. US 4,866,638 discloses a process for producing human-computer interface prototypes. The
process includes describing the interface prototype in a high-level graphics language having
commands to describe asynchronous events, and to link asynchronous events to graphic
objects."Microsoft Visual Basic Control Development Guide" by Microsoft Corporation, 1992, pages 7
to 14, 57 to 63 describes fundamental concepts of how Visual Basic and a custom control
interact by means of events.A. Masoni, et al., "Performances of the Obelix Event Builder and Producer" IEEE 1993,
pages 549 to 551 relates to the Obelix on-line system in which data are collected coming from
four major subdetectors. The data from each subdetector flow in parallel into the Global
Event Builder memory and are then sent to the host computer."Programming Windows", Microsoft Press, 1988, pages 16 to 21, 169 to 171 describes the
Messaging System of Microsoft Windows.D. Heller, "The XView Toolkit", UnixWorld, Volume VII, Number 6, June 1990, pages 127-138
and Volume VII, Number 7, July 1990, pages 123 to 133 relate to handling events that occur
in XView objects. All XView objects are said to be clients of the Notifier. These clients
register event handlers and the events they are interested in. Further, the event handling,
event interposition and signal handling methods in the Notifier are discussed in more detail. WO91/03017 discloses an arrangement for notifying programs that a logical event
has occurred on a network. The network includes operating programs for controlling
processes, and receiving programs. Upon the occurrence of a logical event in an
operating program, an alert report is generated and stored in a buffer which is
created by an alert function call. Then, an alert database which contains a look-up
table of the addresses of all programs desiring to receive events is queried and the
event report is forwarded to the respective receiving programs.It is the object of the invention to provide a method for reporting an event in a data
processing system, and a
</DESCRIPTION>
<CLAIMS>
Method for reporting an event in a data processing system (10) having processing
means (12, 20) and memory means (14) and providing an event source (23, 23',

42, 80, 80', 80'', 86), an event sink (27, 27', 27'', 40, 84, 84', 84'') and a distributor
(82, 88) for distributing event reports (25, 25', 92) from the event source to the

event sink, the method comprising the steps of:

generating an event report at the event source in response to an event triggered
at the event source;
forwarding said event report to said distributor; and
forwarding said event report from said distributor to the event sink to inform the
event sink of the triggered event
characterized in that
said event source, said event sink and said distributor are objects supporting a
standardized interface for connecting said objects together by passing interface

pointers between the respective objects.
The method according to claim 1, 
characterized in that
 the memory means
stores a global namespace of objects.
The method according to claim 1 or 2, 
characterized in that
 the event sink is
registered with the distributor object to receive the event report.
The method according to one of claims 1 to 3, 
characterized in that
 at least an
additional event sink object is provided and the method further comprises the step 

of determining which event sink objects should receive the event report and
forwarding the event report to the determined event sink object.
The method according to claim 4, 
characterized by
 the step of registering the
additional event sink object with the distributor object to the receive the event

report.
The method according to one of claims 1 to 5, 
characterized in that
 a plurality of
event source objects is provided.
The method according to one of claims 1 to 6, 
characterized in that
 the event
report is an object.
The method according to one of claims 1 to 7, 
characterized in that
 said
processing means includes an object-oriented operating system.
The method according to one of claims 1 to 8, 
characterized in that
 said memory
means stores an event source holder object (50, 54) maintaining a register of

registrations by event sink objects.
The method according to claim 9, 
characterized by
 the step of registering an
event sink object with the event source holder to receive an event report.
The method according to one of claims 1 to 10, 
characterized in that
 the event
report includes a data structure holding property information about the triggered

event.
The method according to one of claims 1 to 11, 
characterized by
 the step of
storing registrations in an object in said memory means.
The method according to one of claims 1 to 12, 
characterized in that
 said event
source object is capable of raising a set of events, and said memory means

stores type information about the event source object, said type information
specifying the set of events that the event source object may raise. 
The method according to one of claims 1 to 13, 
characterized by
 a second
distributor object (90) providing filtering information (94) to the first distributor

object, said filtering information specifying a type of event report that the second
distributor object wishes to receive, wherein the method further comprises the

step of forwarding the event report from the first distributor object to the second
distributor object when the filtering information indicates that the second distributor

object wishes to receive the event report.
The method according to one of claims 1 to 14, 
characterized by
 the step of
specifying an instance of a function in the interface to be called when the event

report is received by the event sink object.
Data processing system (10) arranged for performing the method according to
one of claims 1 to 15.
</CLAIMS>
</TEXT>
</DOC>
