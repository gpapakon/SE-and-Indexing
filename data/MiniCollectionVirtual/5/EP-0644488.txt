<DOC>
<DOCNO>EP-0644488</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Detection of spurious interrupts in a data processing system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F946	G06F948	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An interrupt mechanism within a data processing system where every 
expected interrupt has a unique interrupt signature. This interrupt 

signature is known by the system interrupt handler of the interrupt's 
particular type, such as external, timer, divide by zero, etc. For 

example, external interrupt is one type of interrupt, and the FLIH of 
external interrupt must know the signatures of all expected external 

interrupts. Every expected interrupt has its signature stored in a 
plurality of processor general purpose registers. The name of these 

registers must be known by the interrupt handler that will handle the 
interrupt. The interrupt handler preserves the processor state when it 

tries to verify signatures. If a signature match is found, the interrupt 
handler will branch to the corresponding second level interrupt handler 

for normal interrupt processing. If the second level interrupt handler 
is shared by some sources, then the second level interrupt handler must 

query these sources for the ownership. The lack of an ownership causes 
the second level interrupt handler to declare the interrupt as spurious. 

If there is only one source, the second level interrupt handler will 
handle the interrupt. If an ownership is found among the sources, the 

routine that was called to establish its ownership will have handled the 
interrupt properly. A first level interrupt handler will consider an 

interrupt as spurious after it has failed verifying the signatures of all 
expected interrupts of its own type. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
LEE VAN HOA
</INVENTOR-NAME>
<INVENTOR-NAME>
LEE, VAN HOA
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to data processing systems, and more 
particularly to a method and apparatus for detecting spurious, or 
unexpected, interrupts in a data processing system. In data processing systems, interrupts are used to signal a 
processor that an interrupt condition exists at a given source. This 
interrupt source could be, for example, an adapter card on a system bus 
which requires some type of service. The required service may be to 
initiate a transfer of data, or to read a status register that has 
recently changed. When the processor has been conditioned to accept an interrupt, 
otherwise known as having the interrupts being enabled, the processor 
will initiate interrupt processing upon the receipt of an interrupt. 
This interrupt processing typically involves the processor interrogating 
the source of the interrupt, performing functions based upon the type of 
interrupt, and resetting/turning off the interrupt. At system power-on time, data processing systems typically execute 
instructions stored in the system's initial-program-load (IPL) read only 
memory (ROM). This IPL ROM code is relatively primitive in the types of 
operations that can be performed, and is primarily used to boot-up the 
system prior to loading and executing the more general purpose operating 
system software. Due to the relatively limited intelligence of the IPL ROM code, 
with the corresponding limited ability to handle the numerous possible 
combinations of conditions (such as interrupts) that may occur within a 
system, the bring up of the system at power-on time requires operations 
to occur in an orderly fashion. To help achieve this objective, many 
systems are designed such that adapter cards or other sources of 
interrupts do not generate an interrupt until commanded to do so by the 
processor. In other words, a routine that is initializing an adapter 
card may initialize certain registers or internal variables, enable its 
interrupt processing ability, signal the adapter that is ready to process 
interrupts, and then wait for the resulting interrupt to be generated by 
the adapter. These resulting interrupts are thus known as expected 
interrupts.  During system start-up, before the loaded operating system kernel 
establishes the system interrupt handlers in RAM, many different type of 
interrupts may occur. These interrupts can be expected or 
unexpected/spurious with respect to the interrupt handlers in ROM. A 
single-thread and non-interrupt driven executing environment of the IPL 
ROM allows
</DESCRIPTION>
<CLAIMS>
A method for detecting spurious interrupts in a data processing 
system, comprising: 

   storing an interrupt signature for an expected interrupt; 
   enabling interrupts by said data processing system; and 

   validating said stored interrupt signature upon receipt of an 
interrupt by said data processing system. 
A method as claimed in Claim 1 wherein said step of 
validating further comprises comparing said stored interrupt signature 

against at least one valid signature to determine if signature match or 
mismatch. 
A method as claimed in Claim 2 wherein said interrupt is 
rejected as spurious if signature mismatch. 
A method as claimed in Claim 2 wherein said interrupt is 
processed if signature match. 
A method as claimed in any preceding Claim wherein said interrupt 
signature is stored in a pair of registers. 
A method as claimed in any preceding Claim wherein said interrupt 
signature corresponds to a particular type of interrupt that is expected. 
A method as claimed in any preceding Claim wherein said step of 
validating comprises processing by a first and second level interrupt 

handler. 
A method as claimed in Claim 7 wherein said second level 
interrupt handler is shared by a plurality of interrupt sources. 
A method as claimed in any of Claims 2 to 8 wherein a plurality of 
valid signatures is maintained in a memory comprising initial program 

load instructions. 
A system for detecting spurious interrupts in a data processing 
system, comprising: 

   means for storing an interrupt signature for an expected interrupt; 
   means for enabling interrupts by said data processing system; and 

   means for validating said stored interrupt signature upon receipt 
of an interrupt by said data processing system. 
A system as claimed in Claim 10 wherein said means for validating 
comprises means for comparing said stored interrupt signature against at 

least one valid signature to determine if signature match or mismatch. 
A system as claimed in Claim 11 further comprising means for 
rejecting said interrupt as spurious if signature mismatch. 
A system as claimed in Claim 11 further comprising means for 
processing said interrupt if signature match. 
A system as claimed in any of Claims 10 to 13 further comprising 
means for storing said interrupt signature in a pair of registers. 
A system as claimed in any of Claims 10 to 14 wherein said 
interrupt signature corresponds to a particular type of interrupt that is 

expected. 
A system as claimed in any of Claims 10 to 15 wherein said means 
for validating comprises a first and second level interrupt handler. 
A system as claimed in Claim 16 further comprising means for 
sharing said second level interrupt handler by a plurality of interrupt 

sources. 
A system as claimed in any of Claims 11 to 17 further comprising 
means for maintaining a plurality of valid signatures in a memory 

comprising initial program load instructions. 
</CLAIMS>
</TEXT>
</DOC>
