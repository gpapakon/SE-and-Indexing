<DOC>
<DOCNO>EP-0610581</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Visualization tool for graphically displaying trace data produced by a parallel processing computer.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1128	G06F1128	G06F1132	G06F1132	G06F1134	G06F1134	G06T1120	G06T1120	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06T	G06T	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	G06T11	G06T11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A visualization tool (100) for creating graphic 
displays of trace data produced by a parallel computer program 

execution monitoring system. The visualization tool contains 
a display monitor (105), input devices (120), a mass storage 

device (125), and a computer system (115). The computer 
system further contains a graphics processor (135) having a 

data processor (210) for converting the trace data into data 
structures. Application logic (215) stores all the data 

structures in an event history storage device (230). A subset 
of those data structures are converted into a pixel map and 

stored in a buffer. A graphics display generator (130) 
produces a display (300) on the monitor containing the pixel 

map from the buffer. The display has a pre-selected display 
format. Typically, multiple displays are generated through 

using a plurality of application logic. In this manner, 
multiple, synchronous displays are produced. Each display is 

synchronized to a time-varying display having a time reference 
line vertically oriented through the display. As such, each 

of the displays are synchronized to a time represented by the 
time reference line. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ADVANI DEEPAK MOHAN
</INVENTOR-NAME>
<INVENTOR-NAME>
BYRON MICHAEL JUSTIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HANSELL STEVEN ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
PANDA RAJENDRA DATTA
</INVENTOR-NAME>
<INVENTOR-NAME>
PIERCE JAMES ANDREW
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG KO-YANG
</INVENTOR-NAME>
<INVENTOR-NAME>
WELCH ROBERT SPENCER
</INVENTOR-NAME>
<INVENTOR-NAME>
ADVANI DEEPAK MOHAN
</INVENTOR-NAME>
<INVENTOR-NAME>
BYRON MICHAEL JUSTIN
</INVENTOR-NAME>
<INVENTOR-NAME>
HANSELL STEVEN ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
PANDA RAJENDRA DATTA
</INVENTOR-NAME>
<INVENTOR-NAME>
PIERCE JAMES ANDREW
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG KO-YANG
</INVENTOR-NAME>
<INVENTOR-NAME>
WELCH ROBERT SPENCER
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to computer program execution 
and analysis systems and methods, and more particularly, to 
systems and methods for creating graphics of results yielded 
by a computer program execution monitoring system. In order to improve performance of computer code 
used in parallel processing computer systems, it is often 
necessary to determine and display certain data that is 
indicative of code execution. Generally, apparatus, known as 
computer program execution monitoring systems (hereinafter 
referred to as monitoring systems) monitor computer programs 
as they are executed on parallel nodes, i.e., within parallel 
processing units, of a parallel processing computer. As the 
programs are monitored, the monitoring system generates data 
indicative of various functions performed by each node and 
stores the data in a mass storage memory device. Typically, 
the monitoring system organizes the data into a historical 
file known as a trace file. The data within the trace file is 
known as trace data; each individual datum within the trace 
data is known as an event. Generally, trace data are a time-ordered series of 
recorded indicia representing changes to the information 
and/or control state of the parallel processing computer. 
Typically, an individual event contains a number of data 
fields. The type of event being recorded defines the number 
of fields in a given event and the information contained in 
each field. For example, whenever one processor within the 
parallel processing computer passes information (e.g., a 
message) to another processor within the same computer, the  
 
monitoring system produces and stores a "send" event. A send 
event may contain a time field indicating when the event was 
recorded by the monitoring system, a send processor field 
identifying the processor that sent the message, a receive 
processor field identifying the processor to which the message 
is directed, a start time field indicating a time that the 
message was sent, and a stop time field indicating the time 
that the message ceased being sent. Other examples of events are "receive" events, 
produced whenever a processor in the parallel processing 
computer receives a message from another processor, and 
"central processing unit (cpu) utilization" events, produced 
whenever the parallel processing computer utilizes a 
processor. Those skilled in the art will recognize that the 
foregoing examples of events which form trace data are merely 
illustrative of the many types of events which can be
</DESCRIPTION>
<CLAIMS>
A visualization tool for creating a graphic display of 
trace data comprising: 

a display monitor; 
display control means for enabling a user to enter 

display commands; 
mass storage means for storing said trace data; and 

a computer system, connected to said display monitor, 
said display control means, and said mass storage means, 

comprising: 
a graphics processor having retrieval means for 

retrieving said trace data from said mass storage means, 
data processor means connected to said retrieval means 

for converting said retrieved trace data into data 
structures, application logic means connected to said 

data processor means, wherein said application logic 
means comprises means for storing said data structures in 

an event history storage means, means for converting a 
subset of said data structures in said event history 

storage means into a pixel map, and means for storing 
said pixel map in buffer means; and 

a graphic display generator means, connected to said 
graphics processor, for graphically displaying on said 

monitor said pixel map in a pre-selected display format. 
The visualization tool of claim 1, wherein a number of 
data structures converted to form said pixel map and 

stored in said buffer means is less than a total number 
of data structures stored in said event history storage 

means. 
The visualization tool of claim 1 or 2, wherein said 
pixel map contains a plurality of pixels wherein a pixel 

represents a plurality of data structures. 
The visualization tool of claims 1 to 3, wherein said 
graphics processor further comprises means for altering a 

number of data structures contained in said plurality of 
data structures represented by said pixel without 

changing a time value represented by said vertically 
oriented, time reference line or/and wherein said 

graphics processor further comprises means for indicating 
when said pixel represents a plurality of data 

structures. 
The visualization tool of claims 1 to 4, wherein said 
data processor further comprises a plurality of sub-processor 

means, connected to said retrieval means, for 
converting said retrieved trace data into a plurality of 

data structures associated with each of said sub-processor 
means, a plurality of application logic means, 

wherein each of said plurality of application logic means 
is connected to a respective sub-
processor means, wherein 
said of said application logic means comprises means for 

storing said data structures from each of said respective 
sub-processor means in a plurality of event history 

storage means, means for converting said data structures 
from each of said respective sub-processor means into a 

respective pixel map, means for storing each of said 
pixel maps in a respective one of a plurality of buffer 

means and means for time synchronizing said pixel maps 
stored in each of said buffer means; and 

wherein said graphic display generator means, connected 
to said graphics processor, further comprises means for 

forming a plurality of graphic displays on said monitor 
from each of said respective pixel maps located in each 

of said buffer means, each of said graphic displays is 
formed in a respective pre-selected display format. 
The visualization tool of claims 1 to 5, wherein said 
pre-selected display formt or one of said pre-selected 

display formats is a window having said pixel map 
graphically displayed within said window to depict a 

time-varying display and wherein said graphic display 
includes a vertically oriented, time reference line 

disposed across said graphic display or wherein said 
pre-selected display format is a window having said pixel 

map graphically displayed within said window to depict an 
instantaneous display. 
The visualization tool of claims 1 to 6, wherein said 
display control means further comprises means for moving 

said graphic display relative to said time reference line 
and/or wherein said display control means further 

comprises means for synchronously updating said plurality 
of displays such that each of said displays are 

synchronized to a time represented by said time reference 
line. 
The visualization tool of claims 1 to 7, wherein a number 
of data structures converted to form a respective pixel 

map and stored in each of said buffer means is less than 
a total number of data structures stored in each of said 

event history storage means. 
The visualization of claims 1 to 8, wherein said time-varying 
display is a display representing message passing 

in a parallel processing computer and/or wherein said 
time-varying display is a display representing 

parallelism in a parallel processing computer. 
A method of creating a graphic display of trace data 
comprising the steps of: 

retrieving, from a mass storage device, an event within 
said trace data; 

converting said event into a data structure;
 

storing said data structure in an event history storage 
device; 

converting said data structure into a pixel map; 
storing said pixel map in a buffer; 

creating a graphic display of said pixel map stored in 
said buffer, wherein said graphic display conforms to a 

pre-selected display format; 
repeating said retrieving, converting, and storing steps; 

and 
updating said graphic display as each said event is 

converted until all of said trace data is converted and 
displayed. 
The method of claim 10 further comprising the steps of: 
reviewing said events represented by said graphically 

displayed pixel map in response to user manipulation of 
input devices comprising the steps of: 

sensing a request for movement of the graphically 
displayed pixel map; 

retrieving, in response to said request, data structures 
from said event history storage device; 

converting said retrieved data structures into a new 
pixel map; 

storing said pixel map in said buffer; and 
updating said graphic display after storing said new 

pixel map, 
and/or further comprising the steps of:

 
converting said event into a plurality of data 

structures; 
storing each of said data structures in a respective 

plurality of event history storage devices; 
converting each data structure in said plurality of data 

structures into a respective pixel map forming a 
plurality of pixel maps storing each pixel map of said 

plurality of pixel maps in a buffer; 
creating a plurality of graphic displays corresponding to 

said plurality of pixel maps stored in said buffers, 
wherein each of said graphic displays conforms to a 

respective pre-selected display format; 
repeating said retrieving, converting, and storing steps; 

and 
updating each of said graphic displays as each said event 

is converted into a plurality of data structures until 
all of said trace data is converted and displayed 

or/and further comprising the steps of: 
reviewing, in a simultaneous fashion, said graphically 

displayed pixel maps in response to user manipulation of 
input devices comprising the steps of: 

sensing a request for movement of the graphically 
displayed pixel maps; 

retrieving, in response to said request, data structures 
from each of said plurality of event history storage 

devices; 
converting said retrieved data structures into a 

plurality of new pixel maps;
 

storing each of said new pixel maps in respective 
buffers; and 

simultaneously updating said plurality of graphic 
displays after storing each new pixel map. 
The method of claims 10 or 11, wherein one of said 
plurality of graphic displays wherein one of said preselected 

display formats is a window having said pixel 
map graphically displayed within said window to depict a 

time-varying display and wherein said graphic display 
includes a vertically oriented, time reference line 

disposed across said graphic display. 
The method of claims 10 to 12, wherein reviewing step 
further comprises the step of moving said graphic display 

relative to said time reference line or/and wherein said 
reviewing step further comprises a step of synchronously 

updating said plurality of graphic displays such that 
each of said graphic displays are synchronized to a time 

represented by said time reference line. 
The method of claims 10 to 13, wherein a number of data 
structures converted into each of said pixel maps is less 

than a total number of data structures stored in each of 
said event history storage devices. 
The method of claims 10 to 14, wherein said pre-selected 
display format is a window having said pixel map 

graphically displayed within said window to depict an 
instantaneous display. 
The method of claims 10 to 15, wherein said pixel map 
contains a plurality of pixels wherein a pixel represents 

a plurality of data structures. 
The method of claims 10 to 16, wherein said converting 
step further comprises the steps of altering a number of 

data structures contained in said plurality of data 
structures contained in said plurality of data structures 

 
represented by said pixel without changing a time value 

represented by said vertically oriented, time reference 
line or/and wherein said converting step further 

comprises indicating when said pixel represents a 
plurality of data structures. 
The method of claims 10 to 17, wherein said time-varying 
display is a display representing message passing in a 

parallel processing computer or wherein said time-varying 
display is a display representing parallelism in a 

parallel processing computer. 
</CLAIMS>
</TEXT>
</DOC>
