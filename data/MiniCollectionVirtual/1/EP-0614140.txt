<DOC>
<DOCNO>EP-0614140</DOCNO> 
<TEXT>
<INVENTION-TITLE>
System and method for avoiding deadlock in computer
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F952	G06F946	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for avoiding deadlock in a non-preemptive multi-tasking 
application program 200, wherein the application program 200 

operates in an operating system 110 that provides a non-preemptive multi-tasking 
environment. All components 210-250 of the application program 200 

that require resources from other components within the application program 
200, and that will not yield to internal timeslicing within the application 

program 200, are placed in separate executables 410 (i.e., application 
programs). Thus allowing maximum background processing and the 

avoidance of deadlock. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KIWIMAGI GARY G
</INVENTOR-NAME>
<INVENTOR-NAME>
NELSON ELLEN M
</INVENTOR-NAME>
<INVENTOR-NAME>
KIWIMAGI, GARY G.
</INVENTOR-NAME>
<INVENTOR-NAME>
NELSON, ELLEN M.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention generally relates to the avoidance of deadlock in
a multi-tasking environment and, more particularly, to a system and method
for using interprocess communication to maximize background processing and
avoid deadlock in a multi-threaded application running in a non-preemptive
multi-tasking environment.Computer application programs that utilize a "windows" environment
are prevalent in today's market place. The use of windows allows a user to
work in a multi-tasking environment in which several application programs
may compete for a finite number of resources. Operating in a multi-tasking
environment can create a number of problems, however.For example, if an application program requests a resource, and if the
resource is not available at that time, the application program enters a wait
state. It may happen that the waiting application program will never again
change state, because the resource it has requested is held by another waiting
processes. This situation is called deadlock. To prevent deadlock, or recover
from one if it occurs, the system may take some relatively extreme action,
such as preemption of resources from one or more of the deadlocked
application programs.A set of processes is in a deadlock state when two or more processes
in the set is waiting for an event that can only be caused by another process 
in the set. A deadlock situation can arise if and only if the following four
conditions hold simultaneously in the system.
Mutual Exclusion. At least one resource is held in a
nonshareable mode; that is, only one process at a time can use
the resource. If another process requests that resource, the
requesting process must be delayed until the resource has been
released.Hold and Wait. There must exist a process that is holding at
least one resource and is waiting to acquire additional resources
that are currently being held by other processes.No Preemption. Resources cannot be preempted. That is, a
resource can only be released voluntarily by the process holding
it, after the process has completed its task.Circular Weight. There must exist a set (p0, p1, ..., pn) of
waiting processes such that p0 is waiting for a resource which
is held by p1, p1 is waiting for a resource which is held by p2,
..., pn-1 is waiting for a resource which is held by pn and pn is
waiting for a resource which is held by p0.All four conditions must hold for a deadlock to occur. By insuring that at least
one of these conditions cannot hold, the occurrence of a deadlock can be prevented.
For a more
</DESCRIPTION>
<CLAIMS>
A method for avoiding deadlock in a non-preemptive multi-tasking application
program (200) for use with an operating system (110) that is also non-preemptive and

multi-tasking, wherein deadlock occurs when a first thread (220) within the application
program (200) will not yield to internal timeslicing before receiving a requested

resource from a second thread (230-250) within the application program (200)
dependent on the first thread, the method comprising:


(1) placing a thread (220) of a main application program (420) that requires
resources from other threads (210, 230-250) within said main application program (420)

and that will not yield to internal timeslicing within said main application program
(420), in a separate application program (410), wherein said separate application

program (410) can be activated or deactivated via an external operating system
timeslicing mechanism; and
(2) connecting said separate application program (410) to said main application
program (420) via a communication link (430), wherein said separate application

program (410) and said main application program (420) exchange data;

   wherein said main application program (420) and said separate application
program (410) yield to external timeslicing so as to enable receipt of the request by the

first thread.
A computer-based system that avoids deadlock in a non-preemptive multi-tasking
application program (200) operable in an operating system (110) that is also non-preemptive

and multi-tasking, the computer-based system comprising:

(a) means for providing a first application program (420) having a plurality of
threads (210,230-250), wherein each of said plurality of threads (210, 230-250) does

not require resources from one another, or each of said plurality of threads (210, 230-250)
requires resources from another but yields to internal timeslicing within said first

application program means (420);
(b) means for providing a second application program (410) having at least one
thread (220) that requires resources from one of said plurality of threads (210, 230-250)

within said first application program means (420), wherein said second application 
program means (410) can be activated or deactivated via an external operating system

timeslicing mechanism; and
(c) a communication link (430) operable to connect said first application
program means and said second application program means together, so as to cause said

first application program (420) and said second application program (410) to
communicate with one another across said communication link (430);

   wherein said first application program means and said second application
program means are operable to yield to external timeslicing so as to enable receipt of

a request by a thread.
The system of claim 2, wherein said communication link (430) includes shared
memory and signal means for signalling another application program when data has

been transferred to said shared memory.
The system of claim 2, wherein said first application program (420) further

includes an interface stub (440) responsible for receiving and forwarding messages
between said first application program (420) and said second application program (410).
The system of claim 2, wherein the operating system (110) is a non-preemptive
multi-tasking windows operating system.
</CLAIMS>
</TEXT>
</DOC>
