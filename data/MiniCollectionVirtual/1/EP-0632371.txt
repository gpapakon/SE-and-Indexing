<DOC>
<DOCNO>EP-0632371</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Process for configuration management
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F906	G06F944	G06F906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In a process for ensuring compatibility of components in a system, system 
components are defined and relationships between two or more system components 

identified. From relationships between components, inter-relationships between these 
identified relationships and possibly other components are determined. By validating integrity 

of either or both of the identified relationship and determined inter- relationship and, based 
on a validating result, ensuring integrity of the identified relationship or determined inter-relationship, 

compatibility of the components in the system is ensured. This process is 
particularly useful in eliminating incompatibilities between resident and migrational software 

in an automated computer system. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
XEROX CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
XEROX CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CIULLA KIM P
</INVENTOR-NAME>
<INVENTOR-NAME>
COMPARETTA CHRISTOPHER
</INVENTOR-NAME>
<INVENTOR-NAME>
FARIA JOSE A
</INVENTOR-NAME>
<INVENTOR-NAME>
LATONE JACK T
</INVENTOR-NAME>
<INVENTOR-NAME>
SONTY ATASHI C
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLETT ALAN W
</INVENTOR-NAME>
<INVENTOR-NAME>
CIULLA, KIM P.
</INVENTOR-NAME>
<INVENTOR-NAME>
COMPARETTA, CHRISTOPHER
</INVENTOR-NAME>
<INVENTOR-NAME>
FARIA, JOSE A.
</INVENTOR-NAME>
<INVENTOR-NAME>
LATONE, JACK T.
</INVENTOR-NAME>
<INVENTOR-NAME>
SONTY, ATASHI C.
</INVENTOR-NAME>
<INVENTOR-NAME>
WILLETT, ALAN W.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to a process for ensuring compatibility between components
of a computer processing system, particularly for ensuring the integrity of a system
configuration, even if enhancements to one system component render it incompatible with
another component.Modern industrial manufacturing techniques make use of a known practice of
manufacturing products made of many separate components, the components manufactured
individually and later assembled into a finished article. This practice permits one component of
the article to be modified without substantially altering the entire manufacturing process, and
capitalizes on the efficiencies of compartmentalization.Using such component manufacturing practices, modifications made to a single
component to enhance its performance or implement innovative technology not previously
available, facilitate continuing product development without compromising production
output of an existing product. These component manufacturing practices permeate the
information and computer processing industries.Specifically, with the advent of the computer age, such "component" designs proved
essential in developing commercial automated computing systems, which necessarily
underwent hardware and software enhancements to capitalize on new, previously
undeveloped hardware and software technology. But for the ability of the computer industry
to apply these traditional component development practices for larger, complex systems, the
rapid, widespread success of the modern computer system would likely not have occurred.
Throughout the design, development and implementation of computer systems, maintenance
of an operational, yet dynamic, system configuration is instrumental in successfully developing
and maintaining a system of integrated data processing components, e.g., central processors,
printers, software applications and peripherals. Thus, effective configuration management of
these components and their operational relationships between components becomes a vital
requirement of the data processing industry.Early configuration management requirements were satisfied by crude, often error-prone
methods. In these early systems, to manage, for example, untested software
applications, system engineers generally establish multiple, isolated and separate
environments (sometimes on separate disk storage units of a central processor), which are
essentially complete, stand alone versions of an entire system application. Enhanced system
applications, which often include necessary
</DESCRIPTION>
<CLAIMS>
An automated process for managing a configuration and
ensuring compatibility of components in a computing system,

comprising the steps of:

(a) identifying (102) components of the system;
(b) identifying at least two compatibility
relationships, each compatibility relationship being

between at least two computing system components and
indicating at least one of an interfacing capability and a

functional operability between the at least two components
in the computing system;
(c) identifying at least one compatibility inter-relationship
between at least two of said compatiblity

relationships or between one of said compatibility
relationships and at least one of said components, the

compatibility inter-relationship defining at least one of
an interfacing capability and functional operability

between at least three components in the computing system;
(d) validating integrity of at least one of the
compatibility relationship and compatibility inter-relationship;
(e) obtaining a validating result; and
(f) based on the validating result, maintaining
integrity of the compatibility relationship and

compatibility inter-relationship, thus ensuring
compatibility of the system components.
A process according to claim 1, wherein the validating
result indicates that the integrity of the at least two

compatibility relationships or at least one compatibility
inter-relationship no longer exists and the step of

maintaining integrity comprises a step of taking corrective
action to re-establish a lost integrity.
A process according to claim 1 or 2, wherein the system
components comprise at least one of hardware, software

applications and software languages.
A process according to claim 1 or 2, wherein the step
of maintaining integrity comprises a step of writing data 

to a computer log for subsequent use in the step of
validating integrity.
A process according to any of the preceding claims,
wherein


step (a) comprises identifying software components
comprising resident software and migrational software used

in the automated computer system;
step (b) comprises identifying compatibility
relationships between at least two of said software

components, each compatibility relationship defining at
least one of an interfacing capability and a functional

operability between the at least two of said software:
components;
step (c) comprises identifying compatibility inter-relationships,
each compatibility inter-relationship

defining at least one of an interfacing capability and a
functional operability between at least one of said

compatibility relationships and at least one other of said
compatibility relationships, or between one of said

compatibility relationships and at least one of said
software components; the method further comprising


assigning a dedicated control field to at least one of
each of said compatibility relationships and said

compatibility inter-relationships; and
storing each of said dedicated control fields for
subsequent retrieval; wherein steps (d) and (e) comprise

prior to performing a computer operation, validating
integrity of the computer system by identifying

incompatibilities; and.
step (f) comprises subsequent to validating integrity
and performing a computer operation, ensuring integrity of

the computer system by eliminating incompatibilities.
A process according to claim 5, wherein the step of
validating integrity comprises the steps of:


reading migrational software and resident software
identification data; and 
verifying compatibility between resident software and
migrational software by comparing identification data

against the corresponding dedicated control field.
A process according to claim 5 or claim 6, wherein the
computer operation is at least one of an installation of

migrational software or an upgrade or downgrade to resident
software.
A process according to any one of claims 5 to 7,
further comprising the step of revalidating integrity of:

the computer system subsequent to performing a computer
operation.
A process according to any one of claims 5 to 8,
further comprising the step of restoring the resident

software on the automated computer system to a pre-operation
configuration in response to an identified

incompatibility.
A process according to any of the preceding claims,
further comprising


periodically sampling a current configuration of said
components,
wherein steps (d) to (f) comprise comparing said
current configuration to said initial configuration to

obtain a validity result;
indicating one of a compatibility state and an
incompatibility state based on said validating result; and
taking corrective action when said indicating step
indicates said incompatibility state and recording as said

initial configuration and current configuration when said
indicating step indicates said compatibility state.
A process according to claim 5, further
comprising periodically sampling current configurations of

said compatibility relationships and compatibility inter-relationships,
steps (d) to (f) comprising


comparing said current configurations to said
dedicated control fields; and
automatically taking corrective action when said
comparing step indicates inconsistencies in compatibility 

and recording said dedicated control fields as said current
configurations when said comparing step indicates,

consistency in compatibility.
</CLAIMS>
</TEXT>
</DOC>
