<DOC>
<DOCNO>EP-0622731</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Boot architecture for microkernel based systems.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F9445	G06F9445	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A data processing system having an operating system environment, an 
operating system kernel, and a plurality of device drivers, wherein the 

plurality of device drivers are programs separate from the kernel. The data 
processing system includes a kernel that excludes device driver functions. 

The device drivers in the data processing system are user level tasks or 
programs. A boot volume stored in a storage device in the data processing 

system is provided, wherein the boot volume includes: (1) a file anchor, 
indicating a starting point to find files associated with the boot volume; 

(2) a plurality of file headers associated with the file anchor, each file 
header including an identification of files associated with the boot volume; 

and (3) a plurality of block list elements, each block list element 
identifying a contiguous block of data in a storage device, wherein data 

structures comprising a file may be identified and accessed using at least 
one block list element. A bootstrap task is used to load files into the 

memory from the data storage device using the boot volume to access the 
appropriate files, wherein the operating system environment may be 

initialized. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
RAWSON III FREEMAN L
</INVENTOR-NAME>
<INVENTOR-NAME>
SOTOMAYOR GUY G JR
</INVENTOR-NAME>
<INVENTOR-NAME>
RAWSON III FREEMAN L
</INVENTOR-NAME>
<INVENTOR-NAME>
SOTOMAYOR GUY G JR
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to an improved data processing 
system, and in particular to an improved method and system for 
initializing a data processing system. The field of operating systems has become a highly contested area 
for open system standards in data processing systems. Support for 
multiple operating systems has become desirable as a result of the 
contest between various national, international, and industrial entities 
for a dominant operating system. One approach to creating operating 
systems is to separate the parts of the operating system that control 
basic hardware resources from those parts that determine the unique 
characteristics of an operating system environment to produce a "pure 
kernel". The specific parts associated with hardware resources are often 
called the "operating system kernel". This type of design can allow for 
more than one operating system environment to be implemented on the same 
data processing system. Also, more than one operating system environment 
may be simultaneously supported in native mode on the same data 
processing system. Complex problems may occur in creating a "pure kernel" that has no 
dependencies on previously existing operating systems and which allow the 
pure kernel to support different operating system environments. For 
example, a operating system "pure kernel" must be neutral among a number 
of different operating system environments and use device drivers that 
run at a user level to provide a method for bootstrapping the operating 
system kernel or micro kernel and at least one operating system 
environment on top of it. Presently, the problem has been dealt with by 
creating bound images of the operating system kernel and the programs 
that are to be executed by the operating system kernel or by assuming the 
system includes a specific operating system environment that is loaded 
shortly after boot and contains a file system that may be used during the 
balance of the bootstrap process. Neither of these solutions has to 
operate in an environment in which the device drivers are separate from 
the tasks that are loaded during or after the bootstrap process. Therefore it would be desirable to have a complete bootstrap 
architecture to deal with the entire sequence of events from the end of  
 
the hardware-defined ROM boot to the execution of the standard 
initialization sequence of the first operating system environment. In accordance with the present invention, there is now provided a 
method for initiating operation of an
</DESCRIPTION>
<CLAIMS>
A method for initiating operation of an operating system 
environment in a data processing system, wherein the data processing 

system has a kernel and a plurality of device drivers, the method 
comprising: providing, in a memory, a boot volume including parameters 

identifying a plurality of files and locations of data structures 
comprising the plurality of files on a storage device; and loading a 

plurality of programs associated with initialization of an operating 
system environment into the memory using the boot volume to initialize 

the operating system environment. 
A method as claimed in claim 1, wherein the parameters include: a 
file anchor, indicating a starting point to find files associated with 

the boot volume; a plurality of file headers associated with the file 
anchor, each file header including an identification of files associated 

with the boot volume; 
and a plurality of block list elements, each block list element identifying a 

contiguous block of data in a storage device, wherein data structures 
comprising a file may be identified and accessed using at least one block 

list element. 
A method as claimed in claim 1 or claim 2, wherein the loading step 
includes loading device drivers. 
A method as claimed in claim 3, including loading a master server. 
A method as claimed in claim 4, including loading a file server and 
a file system. 
A method as claimed in claim 5, wherein the file system includes a 
log and a plurality of files and further including using the log to 

determine if any correction of the file system is required prior to using 
the file system. 
A method as claimed in claim 6, including loading an operating 
system environment after a number of device drivers has been loaded. 
A data processing system including: an operating system 
environment; an operating system kernel; a plurality of device drivers; 

 
means for providing, in a memory, a boot volume including parameters 

identifying a plurality of files and locations of data structures 
comprising the plurality of files on a storage device; and means for 

loading a plurality of files associated with initialization of an 
operating system environment into the memory using the boot volume, 

whereby initialization of the operating system environment may be 
accomplished. 
A data processing system as claimed in claim 8, wherein the 
parameters include: a file anchor, indicating a starting point to find 

files associated with the boot volume; a plurality of file headers 
associated with the file anchor, each file header including an 

identification of files associated with the boot volume; and a plurality 
of block list elements, each block list element identifying a contiguous 

block of data in a storage device, wherein data structures comprising a 
file may be identified and accessed using at least one block list 

element. 
The data processing system of claim 9, wherein the boot volume 
permits the data processing system to guarantee the execution of a true 

copy of a file rather than a potentially incorrect duplicate file. 
</CLAIMS>
</TEXT>
</DOC>
