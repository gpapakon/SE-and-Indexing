<DOC>
<DOCNO>EP-0628910</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Error capture logic for peripheral bus in multiple bus computer system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1100	G06F1100	G06F1110	G06F1110	G06F1130	G06F1130	G06F1300	G06F1300	G06F1336	G06F1336	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	G06F11	G06F11	G06F11	G06F11	G06F13	G06F13	G06F13	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An information processing system 10 is provided, comprising a 
central processing unit (CPU) 24; a first system bus 36 which connects 

the CPU to system memory 32 so that the CPU can read data from, and write 
data to, the system memory; a second system bus 16 connected to the CPU; 

a host bridge 20 connecting the second system bus to a peripheral bus 22 
having at least one peripheral device 18 attached thereto, the host 

bridge including register space 100,102,104 for storing information 
related to transactions occurring over the peripheral bus; and error 

capture logic incorporated into the host bridge. The error capture logic 
monitors the transactions occurring over the peripheral bus, detects 

parity errors occurring during any of the transactions, and generates an 
interrupt routine over the second system bus to the CPU. The CPU reads 

the register space and performs necessary recovery operations. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
AMINI NADER
</INVENTOR-NAME>
<INVENTOR-NAME>
BLAND PATRICK MAURICE
</INVENTOR-NAME>
<INVENTOR-NAME>
BOURY BECHARA FOUAD
</INVENTOR-NAME>
<INVENTOR-NAME>
JACKSON ROBERT THOMAS
</INVENTOR-NAME>
<INVENTOR-NAME>
AMINI, NADER
</INVENTOR-NAME>
<INVENTOR-NAME>
BLAND, PATRICK MAURICE
</INVENTOR-NAME>
<INVENTOR-NAME>
BOURY, BECHARA FOUAD
</INVENTOR-NAME>
<INVENTOR-NAME>
JACKSON, ROBERT THOMAS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to error detection logic 
for computer systems and more particularly to an error detection and 
capture mechanism for detecting and capturing errors which occur over a 
peripheral bus in a multiple bus computer system. Computer systems typically include more than one bus, each bus in 
the system having devices attached thereto which communicate locally with 
each other over the bus. Examples of the different types of buses 
present in typical computer systems are a system bus to which a host 
central processing unit is attached and one or more peripheral buses. 
System-wide communication over different buses is required, however, if a 
device attached to one bus needs to read or write information to or from 
a device on another bus. To permit system-wide communication between 
devices on different buses, bus-to-bus bridges (interfaces) are provided 
to match the communications protocol of one bus with that of another. Known bus-to-bus bridges include those disclosed in the following 
co-pending patent applications assigned to the IBM Corporation: European 
Patent Application Nos. 550224, 553563, 550241 and 550223 and United 
States patent application Nos. 07/816,184, 07/816204, 07/816,693 and 
07/816,698. These applications describe mechanisms which permit system-wide 
communication of devices attached to different buses in the system. Each bus-to-bus bridge in a multi-bus computer system is used to 
connect two buses in the system. Various types of buses are available to 
construct a given computer system. One such bus which is becoming widely 
accepted is the PCI (Peripheral Component Interconnect) bus, which is 
capable of performing significant data transfer in a relatively short 
period of time (up to 120 megabytes of data per second). The PCI bus 
achieves this high level of performance, in part, because it may be 
directly linked to other high speed buses, such as system buses to which 
a CPU may be connected, and thus may provide for rapid transfer of data 
between devices attached to the PCI bus and devices attached to the  
 
system bus. In fact, the operation of several high integration devices, 
such as certain graphics package controllers, require a direct link to a 
system bus through a high performance bus such as the PCI bus. In 
addition, the PCI bus architecture does not require any "glue logic" to 
operate peripheral devices connected to it. Glue logic for other buses 
typically consists of miscellaneous hardware components such as decoders, 
buf
</DESCRIPTION>
<CLAIMS>
An information processing system (10) comprising: 
   a central processing unit (CPU) (24); 

   a first system bus (36) which connects said CPU to system memory 
(32) so that said CPU can read data from, and write data to, said system 

memory; 
   a second system bus (16) connected to said CPU; 

   a host bridge (20) connecting said second system bus to a 
peripheral bus (22) having at least one peripheral device (18) attached 

thereto, said host bridge including register space (100, 102, 104) for 
storing information related to transactions occurring over said 

peripheral bus; and 
   logic incorporated into said host bridge for 

monitoring said transactions occurring over said peripheral bus, 
detecting parity errors occurring during any of said transactions, and 

generating an interrupt routine over said second system bus to said CPU; 
whereby said CPU may read said register space and perform necessary 

recovery operations. 
A system as claimed in claim 1, wherein said at least one 
peripheral device (18) includes a status register (104), wherein a status 

bit is activated in said status register in a master peripheral device 
which initiated a transaction during which a parity error was detected, 

and wherein said CPU reads said register space only if said status bit is 
activated. 
A system as claimed in claim 1, wherein said peripheral bus 
conforms to Peripheral Component Interconnect (PCI) architecture. 
A system as claimed in claim 3, wherein said parity errors are 
detected by monitoring an error status line on said peripheral bus which 

is activated by said at least one peripheral device. 
A system as claimed in claim 3, wherein said information related to 
transactions occurring over said peripheral bus includes control and 

address information, arbitration identification of the peripheral device 
initiating the transaction, and the data being transmitted across said 

peripheral bus durinq the transaction. 
A system as claimed in claim 3, wherein said peripheral bus and 
said second system bus have data widths of at least 32 bits. 
A parity error detection and recovery mechanism for use in a 
computer system (10) which comprises (i) a central processing unit (CPU) 

(24) connected to system memory (32) by a first system bus (36); (ii) a 
second system bus (16) connected to said CPU; and (iii) a host bridge 

(20) connecting said second system bus to a peripheral bus, said 
peripheral bus (22) having at least one peripheral device (18) attached 

thereto; said parity error detection and recovery mechanism comprising: 
   register space (100,102,104) in said host bridge for storing 

information related to transactions occurring over said peripheral bus; 
and 

   logic incorporated into said host bridge for 
monitoring said transactions occurring over said peripheral bus, 

detecting parity errors occurring during any of said transactions, and 
generating an interrupt routine over said second system bus to said CPU; 

whereby said CPU may read said register space and perform recovery 
operations. 
A mechanism as claimed in claim 7, wherein said at least one 
peripheral device includes a status register (104), wherein a status bit 

is activated in said status register in a master peripheral device which 
initiated a transaction during which a parity error was detected, and 

wherein said CPU reads said register space only if said status bit is 
activated. 
A mechanism as claimed in claim 7, wherein said peripheral bus 
conforms to Peripheral Component Interconnect (PCI) architecture. 
A mechanism as claimed in claim 9, wherein said parity errors are 
detected by monitoring an error status line on said peripheral bus which 

is activated by said at least one peripheral device. 
A mechanism as claimed in claim 9, wherein said information related 
to transactions occurring over said peripheral bus i
ncludes control and 
address information, arbitration identification of the peripheral device 

initiating the transaction, and the data being transmitted across said 
peripheral bus during the transaction. 
A mechanism as claimed in claim 9, wherein said peripheral bus and 
said second system bus have data widths of at least 32 bits. 
A method of detecting and recovering from parity errors in a 
computer system (10) which comprises (i) a central processing unit (CPU) 

(24) connected to system memory (32) by a first system bus (36); (ii) a 
second system bus (16) connected to said CPU; and (iii) a host bridge 

(20) connecting said second system bus to a peripheral bus (22), said 
peripheral bus having at least one peripheral device (18) attached 

thereto; said method comprising the steps of: 
   storing in register space in said host bridge information related 

to transactions occurring over said peripheral bus; 
   monitoring said transactions occurring over said peripheral bus; 

   detecting parity errors occurring during any of said transactions; 
   generating an interrupt routine over said second system bus to said 

CPU; and 
   reading said register space with said CPU to facilitate recovery 

operations. 
A method as claimed in claim 13, further comprising the steps of 
(i) activating a status bit in a master peripheral device which initiated 

a transaction during which a parity error was detected, (ii) checking the 
status of said status bit with said CPU upon generation of said interrupt 

routine, and (iii) reading said register space with said CPU only if said 
status bit is activated. 
A method as claimed in claim 13, wherein said peripheral bus 
conforms to Peripheral Component Interconnect (PCI) architecture. 
A method as claimed in claim 15, wherein said parity errors are 
detected by monitoring an error status line on said peripheral bus which 

is activated by said at least one peripheral device. 
A method as claimed in claim 15, wherein said information related 
to transactions occurring over said peripheral bus includes control and 

address information, arbitration identification of the peripheral device 
initiating the transaction, and the data being transmitted across said 

peripheral bus during the transaction. 
A method as claimed in claim 15, wherein said peripheral bus and 
said second system bus have data widths of at least 32 bits. 
</CLAIMS>
</TEXT>
</DOC>
