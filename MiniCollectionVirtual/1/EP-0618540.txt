<DOC>
<DOCNO>EP-0618540</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Common name space for long and short filenames
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1730	G06F1730	G06F1200	G06F1200	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	G06F17	G06F12	G06F12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An operating system provides a common name space for 
both long filenames and short filenames. In this common 

namespace, a long filename and a short filename are provided 
for each file. Each file has a short filename directory entry 

and may have at least one long filename directory entry 
associated with it. The number of long filename directory 

entries that are associated with a file depends on the number 
of characters in the long filename of the file. The long 

filename directory entries are configured to minimize 
compatibility problems with existing installed program bases. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ADLER DENNIS R
</INVENTOR-NAME>
<INVENTOR-NAME>
ARUN RASIPURAM V
</INVENTOR-NAME>
<INVENTOR-NAME>
LIPE RALPH A
</INVENTOR-NAME>
<INVENTOR-NAME>
PARSONS JEFFREY T
</INVENTOR-NAME>
<INVENTOR-NAME>
PEDRIZETTI RAY D
</INVENTOR-NAME>
<INVENTOR-NAME>
REYNOLDS AARON R
</INVENTOR-NAME>
<INVENTOR-NAME>
ADLER, DENNIS R.
</INVENTOR-NAME>
<INVENTOR-NAME>
ARUN, RASIPURAM V.
</INVENTOR-NAME>
<INVENTOR-NAME>
LIPE, RALPH A.
</INVENTOR-NAME>
<INVENTOR-NAME>
PARSONS, JEFFREY T.
</INVENTOR-NAME>
<INVENTOR-NAME>
PEDRIZETTI, RAY D.
</INVENTOR-NAME>
<INVENTOR-NAME>
REYNOLDS, AARON R.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates generally to data
processing systems and, more particularly, to a common
name space for long and short filenames.Many operating systems, such as the MS-DOS,
version 5, operating system, sold by Microsoft Corporation
of Redmond, Washington, support only short filenames. In
the MS-DOS, version 5, operating system, filenames may be
a maximum length of eleven characters. Each filename may
have a main portion of eight characters followed by an
extension of three characters. An example filename in the
MS-DOS, version 5, operating system is "EXAMPLE1.EXE",
wherein "EXAMPLE1" constitutes the main portion and "EXE"
constitutes the extension.Each filename is limited to eleven characters
due to constraints in the file system of the MS-DOS,
version 5, operating system. This file system employs a
directory structure in which each file has a directory
entry associated with it. Unfortunately, the directory
entry for a file only supports filenames with a maximum
length of eleven characters. Such a limit in the length
of the filenames is often frustrating to a user. The
length limit of eleven characters prevents a user from
employing adequately descriptive filenames and, in many
instances, forces a user to insert awkward abbreviations
of descriptive terms into the filename. The document Y.E. Gail
Wang, Universal_File_Names for Ada, Ada Letters, January 1990, vol. 10, no. 1,
pages 111 to 117 describes a method and system for accessing a file using file
names having different filename formats across different operating systems. In order
to improve software portability of Ada programs, a universal file naming standard is
established, and universal file names are mapped according to naming conventions
of the different operating systems.European patent publication no. 0,578,205 which is relevant according to Article 54(3) EPC, discloses a multiple file name referencing
system that stores multiple file names in a file. These multiple file names include an
operating system formatted file name and an application formatted file name. When
an operating system formatted file name is created or renamed, the multiple file
name referencing system automatically generates an application formatted file name
having a potentially different format from, but preserving the extension of, the
operating system formatted name. The multiple file name referencing system
similarly generates an operating system formatted name upon creation or renaming
of an application formatted name. A B-tree is provided which contains an
</DESCRIPTION>
<CLAIMS>
A method of operating a data processing system (10) comprising memory (16)
holding an operating system (17), and a processor (12) for running the

operating system (17), the method comprising:

(a) storing (58, 59) in the memory (16) a first directory entry (18) holding a
short filename for a file;
(b) storing (58, 59) in the memory (16) a second directory entry (20) being
associated with the first directory entry (18) and holding a long filename

for the file, said long filename having more characters than said
short filename, said second

directory entry (20) further holding information (42) indicating that said
second directory entry (20) holds said long filename; and
(c) in case that the operating system (17) permits only short filenames and said information (42) is set to make said second directory entry (20) invisible to the operating system (17),
locating the file by accessing said first directory entry (18) or, in case that

the operating system (17) permits long filenames and said information (42) is set to make said second directory entry (20) visible to the operating system (17), locating the file by accessing said second directory entry (20).
The method as claimed in claim 1, further comprising:

locating the file by accessing said second directory entry (20) with an
application program.
The method as claimed in claim 1 or 2 wherein:

said second directory entry (20) comprises an attributes field (42) that
may be set to make said second directory entry (20) invisible to the

operating system (17); and
the step of storing (58, 59) said second directory entry (20) further
comprises: 


setting said attributes field (42) so that said second directory entry
(20) is invisible to the operating system (17).
The method as claimed in one of claims 1 to 3 wherein:

the step of storing (58, 59) said second directory entry (20) further
comprises:


storing a checksum of said short filename in said second directory
entry (20).
The method as claimed in one of claims 1 to 4, further comprising:

storing at least one additional directory entry holding a next portion of said
long filename in the memory (16).
The method as claimed in claim 5 wherein:

each additional directory entry may hold only a fixed number of characters
of said long filename; and
how many additional directory entries are stored in the memory (16) is
dictated by how many additional directory entries are required to store

characters of said long filename which are not already stored in said
second directory entry (20).
The method as claimed in claim 5 or 6 wherein:

the step of storing at least one additional directory entry further
comprises:


storing in the memory (16) a plurality of additional directory entries.
The method as claimed in one of claims 5 to 7 wherein:

the step of storing (58, 59) said second directory entry (20) further
comprises:


storing a signature in said second directory entry (20), that identifies
that said second directory entry (20) holds a first portion of said long

filename.
The method as claimed in one of claims 5 to 8 wherein:

the step of storing at least one additional directory entry further
comprises:


storing a checksum of said short filename in said additional directory
entry.
The method as claimed in one claims 5 to 9 wherein:

the step of storing at least one additional directory entry further
comprises:


storing a signature that uniquely identifies which portion of said long
filename is stored in said additional directory entry.
The method as claimed in one of claims 1 to 10, further comprising:

creating the file;
assigning the file said long filename that is user-specified; and
creating said short filename of fewer characters by manipulating said long
filename.
A data processing system (10), comprising:

(a) memory (16) holding:

(i) an operating system (17),
(ii) a first directory entry (18) holding a short filename for a file,
and
(iii) a second directory entry (20) being associated with the first directory
entry (18) and holding a long filename for the file, said long filename

having more characters than said short filename,
said second directory

entry (20) further holding information (42) indicating that said second
directory entry (20) holds said long filename; and
(b) a processor (12) for running the operating system (17) and, in case that the operating system (17) permits only short filenames and said information (42) is set to make said second directory entry (20)
invisible to the operating system (17), locating the

file by accessing said first directory entry (18) or, in case that
the operating system (17) permits long filenames and said information (42) is set to make said second directory entry (20) visible to the operating system (17), locating the file by accessing said second directory entry (20).
The system as claimed in claim 12, further comprising:

means (12) for locating the file by accessing said second directory entry
(20) with an application program.
The system as claimed in claim 12 or 13 wherein:

said second directory entry (20) comprises an attributes field (42) that
may be set to make said second directory entry (20) invisible to the

operating system (17); and
the system further comprises:

means (12) for setting said attributes field (42) so that said second
directory entry (20) is invisible to the operating system (17).
The system as claimed in one of claims 12 to 14, further comprising:

means (12) for storing a checksum of said short filename in said second
directory entry (20).
The system as claimed in one of claims 12 to 15, further comprising:

means (12) for storing at least one additional directory entry holding a
next portion of said long filename in the memory (16).
The system as claimed in claim 16 wherein:

each additional directory entry may hold only a fixed number of characters
of said long filename; and
how many additional directory entries are stored in the memory (16) is
dictated by how many additional directory entries are required to store

characters of said long filename which are not already stored in said
second directory entry (20).
The system as claimed in claim 16 or 17, further comprising: 

means (12) for storing in the memory (16) a plurality of additional directory
entries.
The system as claimed in one of claims 16 to 18, further comprising:

means (12) for storing a signature in said second directory entry (20), that
identifies that said second directory entry (20) holds a first portion of said

long filename.
The system as claimed in one of claims 16 to 19, further comprising:

means (12) for storing a checksum of said short filename in said
additional directory entry.
The system as claimed in one claims 16 to 20, further comprising:

means (12) for storing a signature that uniquely identifies which portion of
said long filename is stored in said additional directory entry.
The system as claimed in one of claims 12 to 21, further comprising:

means (12) for creating the file;
means (12) for assigning the file said long filename that is user-specified;
and
means (12) for creating said short filename of fewer characters by
manipulating said long filename.
A computer-readable medium having computer-executable instructions adapted
to enable a data processing system to perform the method of one of claims 1 to

11.
</CLAIMS>
</TEXT>
</DOC>
