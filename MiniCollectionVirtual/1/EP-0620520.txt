<DOC>
<DOCNO>EP-0620520</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for making persistent data objects having hidden pointers.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method for making data objects having hidden pointers persistent is 
disclosed. A pre-existing process for creating data objects is modified so as to 

selectively inhibit both the allocation of memory space for the data object and the 
initialization of data within the data object. A data object with hidden pointers 

created by a previous program invocation is retrieved into memory by a subsequent 
program invocation. The modified object creation process is then advantageously 

applied to the data object. As a result, the hidden pointers within the data object are 
initialized without allocating new memory or disturbing the data within the data 

object. Where the object creation process includes the execution of a user supplied 
initialization function, the initialization function is modified so as to inhibit the 

initialization of data within the data object. A global flag is set by the object creation 
process and tested within the initialization function. If the initialization function 

finds the flag to be set, execution of the data initialization code is avoided. 

 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AT 
&
 T CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AT
&
T CORP.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BILIRIS ALEXANDROS
</INVENTOR-NAME>
<INVENTOR-NAME>
DAR SHAUL
</INVENTOR-NAME>
<INVENTOR-NAME>
GEHANI NARIAN H
</INVENTOR-NAME>
<INVENTOR-NAME>
BILIRIS, ALEXANDROS
</INVENTOR-NAME>
<INVENTOR-NAME>
DAR, SHAUL
</INVENTOR-NAME>
<INVENTOR-NAME>
GEHANI, NARIAN H.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to the field of computer 
programming languages and more specifically to object-oriented programming 
languages such as C++. Object-oriented programming languages have become increasingly 
popular since the introduction of the C++ programming language in the mid 1980's. 
C++ has become the programming language of choice for many in the scientific and 
engineering disciplines, and has become widely known and used in the field of 
computer science as well. The syntax and semantics of C++ is described in detail in 
numerous reference books and manuals. As used in object-oriented programming, a data "object" is a particular 
item of data of a specified type. For example, a given program variable may contain 
an object which is data of type integer. Most programming languages provide for a 
set of predefined data types, such as integers, real numbers, characters, arrays, 
pointers, etc. Object-oriented programming languages, however, enable the user 
(i.e., the programmer) to define new, additional data types. In C++, a user-defined data type is known as a "class." A class is a set 
of named data elements (data members) and a set of operations (member functions) 
designed to manipulate that data. A "class object" is a particular item of data of a 
particular class. Object-oriented programming extends the concept of abstract data types 
to allow relationships to be established between types and "subtypes." This is 
achieved through a mechanism referred to as "inheritance," a primary characteristic 
of object-oriented programming. Rather than re-implementing shared 
characteristics, a class can inherit the data members and member functions of other 
classes. In C++, for example, inheritance is implemented through the mechanism of 
"class derivation." One class, known as the "derived class," may inherit the data and 
functions from another class, known as the "base class." In this manner, an object of 
the derived class has the characteristics of the base class and, therefore, the derived 
class can be viewed as a "subtype" of the base class. A "virtual function" in C++ is a special member function invoked 
through a base class reference (or pointer), which is bound dynamically at execution 
(or "run") time. C++ allows a base class pointer to refer not only to an object of its  
 
own class, but, alternatively, to a derived class object instead. When a function 
specified as "virtual" is invoked using such a pointer, the specific function that is 
called depends on the
</DESCRIPTION>
<CLAIMS>
A method for processing a preexisting data object having an invalid 
pointer, said method comprising the step of changing said invalid pointer to refer to 

a correct location in memory. 
The method of claim 1 wherein said changing step comprises applying 
a modified object creation process to said preexisting data object to perform said 

changing of said invalid pointer, wherein an object creation process comprising the 
steps of allocation of memory space in a m
emory for a data object being created, 
initialization of data within said data object being created, and initialization of 

pointers within said data object being created has been modified to form said 
modified object creation process such that said allocation of memory space and said 

initialization of data are selectively inhibited. 
The method of claim 2 wherein said object creation process further 
comprises a user-defined initialization process for said initialization of data, and 

wherein said user-defined initialization process has been modified such that said 
initialization of data is selectively inhibited when said user-defined initialization 

process is invoked by said modified object creation process. 
The method of claim 3 wherein said applying said modified object 
creation process comprises setting a global variable to a predetermined value, and 

wherein said user-defined initialization process has been modified such that said 
initialization of data is selectively inhibited when said global variable has been set to 

said predetermined value. 
The method of claim 1 wherein said changing step comprises applying 
a modified object creation process to said preexisting data object to perform said 

changing of said invalid pointer, wherein an object creation process comprising the 
steps of allocation of memory space in a memory for a data object being created and 

initialization of pointers within said data object being created has been modified to 
form said modified object creation process such that said allocation of memory space 

is selectively inhibited. 
The method of claim 2, 4 or 5 wherein said preexisting data object was 
created by said object creation process within the execution of a first program 

 
invocation, and wherein said applying said modified object creation process is 

performed within the execution of a second program invocation. 
The method of claim 6 wherein said invalid pointer is a hidden 
pointer. 
The method of claim 6 or 7 wherein said object creation process 
comprises program executable code reflecting program source code written in an 

object-oriented programming language. 
The method of claim 8 wherein said object-oriented programming 
language comprises the C++ programming language and said program source code 

comprises the new operator. 
The method of claim 8 or 9 wherein said modified object creation 
process comprises program executable code reflecting program source code 

comprising an overloaded version of the new operator. 
</CLAIMS>
</TEXT>
</DOC>
