<DOC>
<DOCNO>EP-0617401</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Methods and apparatus for accelerating windows in graphics systems.
</INVENTION-TITLE>
<CLASSIFICATIONS>G09G514	G09G514	G09G536	G09G5393	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G09G	G09G	G09G	G09G	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G09G5	G09G5	G09G5	G09G5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Graphics window systems which utilize graphics 
pipelines and graphics pipeline bypass buses. Hardware solutions 

for window relative rendering of graphics primitives, block 
moving of graphics primitives, transfer of large data blocks, and 

elimination of pipeline flushing are disclosed. The hardware 
implementations provided in accordance with the invention are 

interfaced along the pipeline bypass bus, thereby eliminating 
gross overhead processor time for the graphics pipeline and 

reducing pipeline latency. Methods and apparatus provided in 
accordance with the invention exhibit significant pipeline 

efficiency and reductions in time to render graphics primitives 
to the screen system. 


 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ALCORN BYRON A
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT DAREL N
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON RONALD D
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN DESI
</INVENTOR-NAME>
<INVENTOR-NAME>
ALCORN BYRON A
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT DAREL N
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON RONALD D
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN DESI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to computer workstation window 
systems. More specifically, this invention relates to method and 
apparatus for accelerating graphics primitive rendering on 
multitasking workstations that utilize graphics pipelines. Computer workstations provide system users with 
powerful tools to support a number of functions. An example of 
one of the more useful functions which workstations provide is 
the ability to perform highly detailed graphics simulations for a 
variety of applications. Graphics simulations are particularly 
useful for engineers and designers performing computer aided 
design (CAD) and computer aided management (CAM) tasks. Modern workstations having graphics capabilities 
utilize "window" systems to accomplish graphics manipulations. 
An emerging standard for graphics window systems is the "X" 
window system developed at the Massachusetts Institute of 
Technology. The X window system is described in K. Akeley and T. 
Jermoluk, "High-Performance Polygon Rendering", Computer 
Graphics, 239-246, (August 1988). Modern window systems in 
graphics workstations must provide high-performance, multiple 
windows yet maintain a high degree of user interactivity with the  
 
workstation. Previously, software solutions for providing 
increased user interactivity with the window system have been 
implemented in graphics workstations. However, software 
solutions which increase user interactivity with the system tend 
to increase processor work time, thereby increasing the time in 
which graphics renderings to the screen in the workstation may be 
accomplished. A primary function of window systems in graphics 
workstations is to provide the user with simultaneous access to 
multiple processes on the workstation. However, each of these 
processes provides an interface to the user through its own area 
onto the workstation display. The overall result is an increase 
in user productivity since the user can manage more than one task 
at a time with multiple windows. However, each process 
associated with a window views the workstation resources as if it 
were the sole owner. Thus, resources such as the processing 
unit, memory, peripherals and graphics hardware must be shared 
between these processes in a manner which prevents interprocess 
conflicts on the workstation. Graphics workstations generally utilize graphics 
"pipelines" which interconnect the various components of the 
system. A graphics pipeline is a series of data processing 
elements which communicate graphics commands
</DESCRIPTION>
<CLAIMS>
A system for moving blocks in a window graphics 
system having a frame buffer, comprising: 

   a plurality of first register means for storing 
source address data of a block in window relative address form; 

   a plurality of second register means interfaced 
with the plurality of first register means for storing 

destination address data of the block in frame buffer relative 
address form; and 

   block moving means interfaced with the first and 
second register means for moving the block from the source to the 

destination in accordance with the address data in the first and 
second register means. 
The system recited in claim 1 further comprising; 
   host processor means for controlling block 

movement in the window graphics system; 
   pipeline means interfaced with the host processor 

means for processing data commands from the host processor means 
to the plurality of first and second registers and the block 

moving means; and 
   frame buffer means interfaced with a pipeline 

bypass for storing clipping planes corresponding to block 
information. 
The system recited in claim 2 wherein the 
pipeline means is also interfaced with the host processor means 

for processing data from the host processor means through the 
window graphics system. 
The system recited in claim 3 wherein the block 
moving means is further interfaced with the frame buffer means. 
The system recited in claim 4 wherein the first 
and second register means are interposed on the pipeline bypass 

means between the host processor means and the frame buffer 
means. 
The system recited in claim 5 wherein the frame 
buffer means is a video random access memory. 
The system recited in claim 6 wherein the frame 
buffer further comprises a plurality of address locations wherein 

blocks are exclusively addressed according to frame buffer 
relative addresses. 
A system for moving blocks in a window graphics 
system having a frame buffer, comprising: 

   a plurality of first register means for storing 
source address data of a block in window relative address form; 

   a plurality of second register means interfaced 
with the plurality of first register means for storing 

destination address data of the block in window relative address 
form; and 

   block moving means interfaced with the first and 
second register means for moving the block from the source to the 

destination in accordance with the address data in the first and 

second register means. 
The system recited in claim 8 further comprising: 
   host processor means for controlling block 

movement in the window graphics system; 
   pipeline means interfaced with the host processor 

means for processing data commands from the host processor means 
to the plurality of first and second registers and the block 

moving means; and 
   frame buffer means interfaced with a pipeline 

bypass means for storing clipping planes corresponding to block 
information. 
The system recited in claim 9 wherein the 
pipeline means is also interfaced with the host processor means 

for processing data from the host processor means through the 
window graphics system. 
The system recited in claim 10 wherein the block 
moving means is further interfaced with the frame buffer means. 
The system recited in claim 11 wherein the first 
and second register means are interposed on the pipeline bypass 

means between the host processor means and the frame buffer 
means. 
The system recited in claim 12 wherein the frame 
buffer means is a video random access memory. 
The system recited in claim 13 wherein the frame 
buffer further comprises a plurality of address locations wherein 

blocks are exclusively addressed according to frame buffer 
relative addresses. 
A system for moving blocks in a window graphics 
system having a frame buffer, comprising: 

   a plurality of first register means for storing 
source address data of a block in frame buffer relative address 

form; 
   a plurality of second register means interfaced 

with the plurality of first register means for storing 
destination address data of the block in frame buffer address 

form; and 
   block moving means interfaced with the first and 

second register means for moving the block from the source to the 
destination in accordance with the address data in the first and 

second register means. 
The system recited in claim 15 further comprising: 
   host processor means for controlling block 

movement in the window graphics system; 
   pipeline means interfaced with the host processor 

means for processing data commands from the host processor means 
to the plurality of first and second registers and the block 

moving means; and 
   frame buffer means interfaced with a pipeline 

bypass means for storing clipping planes corresponding to block 
information. 
The system recited in claim 16 wherein the 
pipeline means is also interfaced with the host processor means 

for processing data from the host processor means through the 
window graphics system. 
The system recited in claim 17 wherein the block 
moving means is further interfaced with the frame buffer means. 
The system recited in claim 18 wherein the first 
and second register means are interposed on the pipeline bypass 

means between the host processor means and the frame buffer 
means. 
The system recited in claim 19 wherein the frame 
buffer means is a video random access memory. 
The system recited in claim 20 wherein the frame 
buffer further comprises a plurality of address locations wherein 

blocks are exclusively addressed according to frame buffer 
relative addresses. 
A method of moving blocks in a graphics window 
system having a window with a window offset, the method 

comprising the steps of: 

(a) storing source addresses of blocks in a source 
address register; 
(b) storing destination addresses of blocks in a 
destination address register; 
(c) storing data indicative of block size in a block 
size register; 
(d) specifying whether a source address of the block 
is a frame buffer relative address or a window relative address; 
(e) specifying whether a destination address of the 
block is a frame buffer relative address or a window relative 

address; and 
(f) moving the block from a source to a destination in 
accordance with the specifications of step (d) and step (e). 
The method recited in claim 22 wherein the frame 
buffer is a video random access memory. 
The method recited in claim 23 wherein the source 
address register, destination address register and block size 

register are addressed through a pipeline bypass by a host 
processor. 
The method recited in claim 24 wherein the source 
address register, destination address register, and block size 

register are interposed between the host processor and the frame 
buffer. 
The method recited in claim 25 wherein the frame 
buffer comprises a portion wherein blocks are addressed 

exclusively according to frame buffer relative addresses. 
</CLAIMS>
</TEXT>
</DOC>
