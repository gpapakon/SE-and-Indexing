<DOC>
<DOCNO>EP-0615639</DOCNO> 
<TEXT>
<INVENTION-TITLE>
DIGITAL CIRCUITS.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1108	G06F1108	G06F1116	G06F1116	H03K19003	H03K19003	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	H03K	H03K	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	G06F11	G06F11	H03K19	H03K19	</CLASSIFICATIONS-FOURTH>
<APPLICANTS>
<APPLICANT-NAME>
BRITISH TECH GROUP
</APPLICANT-NAME>
<APPLICANT-NAME>
BRITISH TECHNOLOGY GROUP LIMITED
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
JONES SIMON RICHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
LLOYD DAVID WILLIAM
</INVENTOR-NAME>
<INVENTOR-NAME>
JONES, SIMON, RICHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
LLOYD, DAVID, WILLIAM
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 DIGITAL CIRCUITS This invention relates to linking circuits, particularly to linking asynchronous digital circuits, in such a way as to prevent further operation if a fault occurs. The invention is also concerned with apparatus formed by linking digital circuits in a particular way.Integrated circuit technology has revolutionized electronic design but severe electrical design problems restrict the use of lower levels of integration. One of the foremost difficulties is the distribution of a high speed and accurate clock that can operate with the sub-nanosecond intervals required by the sub-micron technology. The regular array style of design considered suitable for Very Large Scale Integration (VLSI), complicates the clock distribution because of the large fan-out required to drive the large number of synchronous cells. The much higher speed of Gallium Arsenide circuits means that with even lower levels of integration, clock distribution can still limit the performance.When a VLSI synchronous circuit is implemented using CMOS technology, the power spike that results from power consumption being focussed on clock edges introduces several electrical noise problems leading to intermittent faults.Eliminating the clock requires an alternative method of identifying when the data is valid; typically a data ready/acknowledge protocol is used. The data ready signal is realized through a dual rail coding method where each single bit is manifest by a signal change on one of the two connections that form an individual signal path.Circuits which do not need clock signals to synchronize themselves are known as self-timed circuits. Such circuits operate at the average' circuit delay rate, unlike synchronous circuits which have to operate at the speed of the slowest component. Self-timed circuits also spread the switching of circuits, leading to lower peak power requirements.SUBSTITUTE SHEET 

 Testing complex digital circuits is expensive and time-consuming since each element within the circuit must be tested with every possible combination of data values. Testing-, of self-timed circuits is also constrained because not every "stuck ' at" fault (that is a fault in which a connection is stuck at a steady voltage) is detected. There may be a large number of potential stuck at faults, making this problem more difficult.It is an object of this invention to provide circuits which link functional logic circuits in a way which indicates the - presence of stuck at faults by ceasing to provide output signals.According to a
</DESCRIPTION>
<CLAIMS>
CLAIMS 1. A linking circuit for transmitting data values represented by code values, the code values being represented in the linking circuit by different states of a predetermined finite .state machine, none of these states having a transition to itself, each - state being represented by a combination of logic values and all transitions between states requiring a change in a predetermined number of the logic values, the linking circuit comprising first and second inputs, an output and holding means for holding a state representing a code value received at the first input if the code values applied to the first and second input represent different states of the finite state machine, and the transition to the state received from the state currently held by the holding means is a legitimate transition as defined by the finite state machine.
2. A linking circuit according to Claim 1 wherein the finite state machine has three states, comprising first and second states representing different respective code values which each represent data and a third state representing a further code value which represents the absence of data, and the finite state machine has transitions to and from the first and third states, and to and from the second and the third states, only.
3. A linking circuit according to Claim 2 wherein the holding means is arranged to hold a code value received at the first input if the code value applied to the first input represents a data value and the code value applied to the second input represents the- absence of a data value or vice versa.
4. A linking circuit according to Claim 3 wherein the said inputs and outputs each have two connections, and wherein the absence of a data value is represented by the presence of a first logic value at each of. the two connections, a data value of zero is represented by the first logic value at one of the connections and a second logic value at the other connection, and a data value of one is represented by the second logic value at the said other connection and the first logic value at the said one connection. 


 5. A linking circuit according to Claim 4 wherein the holding
'
 means comprises a logic gate having an input connected to the two connections of the said second input to provide the first and second logic values when the second input receives code values representing the presence and absence, respectively, of data, and first and second state-holding means each with two inputs and an output, one input being connected to the output of the logic gate, the other input being connected to a respective one of the input connections of the said first input, and the two outputs of the state holding means forming the output connections of the linking circuit, each state-holding means being arranged to set its output to one of the logic values only when that logic value is present at its two inputs. 6. A linking circuit according to Claim 5 wherein the logic gate is a NOT(EXOR) gate.
7. A linking circuit according to Claim 5 or 6 wherein each state-holding means is a Muller C-element.
8. A linking circuit according to Claim 5, 6 or 7 including means for setting each state-holding means to provide a selected one of the first and second logic values at its output.
9. A linking circuit according to Claim 1 wherein the finite state machine has four states, eac representing a code value and the machine has transitions to and from all states except where a transition would require a change in two logic values, two code values are provided for each data value and when a data value is to be transmitted immediately after the transmission of the same data value, a different code value is used from the code value used immediately before. 
â– 
 10. A linking circuit according to Claim 9 for use where there are two data values, each of which can be represented by two of the code values formed by different combinations of two logic values, two of the code values, which represent different data values, are represented by complementary combinations of logic values, and two of the code values, which also represent different data values, are 


 equal in that both logic values in one equal combination are the same, wherein the- holding means is arranged to hold a value received at the first input if the code values received at the first and second inputs both represent complementary values or both represent equal values.
11. Apparatus including a circuit according to any preceding claim and a functional logic circuit, the output of the linking circuit being coupled to the input of the functional logic circuit, or the output of the functional logic circuit being coupled to one of the inputs of the linking circuit.
12. Apparatus including at least two linking circuits according to any of Claims 1 to 10 and at least one functional logic circuit, the linking circuits and the functional logic circuit or circuits being coupled in sequence in a signal path with the or each logic circuit between two linking circuits, each linking circuit, except the first, having its first input coupled to the output of the preceding linking circuit, and each linking cirucit, except the last, having its second input coupled to the output of the succeeding linking circuit, coupling being by way of the, or one of the, functional logic circuits where required.
13. Apparatus according to Claim 12 wherein the signal path divides into a number of branches at the, or one of the, functional logic circuits, there being one linking circuit preceding the functional logic circuit at which branching occurs and one linking circuit following the functional logic circuit in each branch with its first input coupled to an output of the functional logic circuit for that branch, the linking circuit preceding the functional logic circuit having one second input for each branch and connected to the output of a linking circuit in that branch, and one first input and being arranged to hold a state representing a code value received at its first input if the code values applied to all the second inputs represent data and the code value applied o the first input represents the absence of data, or vice versa. 



 14. Apparatus according to Claim 12 wherein the signal path is one of a number of such signal paths which merge at the input to a functional logic circuit which has an input for each path to be merged coupled to the output of a last linking circuit in that path and a single output coupled to the first input of a single linking circuit, the output of the single linking circuit being coupled to the second input of each said last linking circuit.
15. Apparatus according to any of Claims 11 to 14 insofar as dependent on Claim 3 wherein the functional logic circuit comprises logic means for carrying out a logical process, and guard means for ensuring that the result of the process is not output from the logic circuit until all code values applied to inputs of the logic circuit represent data values.
16. A functional logic circuit for use with linking circuits, comprising logic means for carrying out a logical process, and guard means for ensuring that the result of the process is not output from the logic circuit until all code values applied to inputs of the logic circuit represent data values. 17. A functional logic circuit for use with a linking circuit according to any of Claims 1 to 10 comprising logic means for carrying out a logical process, and guard means comprising first and second state holding means with outputs connected to first and second output connections of the logic circuit, respectively, wherein the guard means also comprises means for preventing the output of the logic means from appearing at the output formed by the first and second state holding means unless all code values received at all circuit inputs to the functional logic circuit represent the same state, or states separated by one state in the sequence of operation of the finite state machine.
18. A functional logic circuit according to Claim 16 or 17 for two-connection inputs, wherein the logic means comprises one AND gate for each possible selection of input connections, in which one connection is selected from each said two-connection input to form one AND gate input, 


 a first EXOR gate coupled to receive, as inputs, the. outputs of all of the said AND gates which provide a '1' for one binary data value, and a second EXOR gate coupled to receive, as inputs, the outputs of all of the said AND gates which provide- a '1' for the other binary value as inputs, the outputs of the EXOR gates forming the logic outputs of the logic means.
19. A circuit according to Claim 16 comprising first and second output connections and wherein the guard means comprises first and second state holding means with outputs connected to the first and second output connections, respectively, and inputs connected to outputs of the logic means.
20. A circuit comprising a linking circuit according to any of Claims 1 to 15 and a logic circuit according to any of Claims 16 to 19.
21. A method of carrying out logical processing on a succession of data values using a succession of alternating linking circuits and functional logic circuits, in which the logical processes are carried out, wherein in the circuits, the code values are represented by different states of a predetermined finite state machine, none of these states having a transition to itself, each state being represented by a combination of logic values and all transitions between states requiring a change in a predetermined number of the logic values, and each circuit temporarily holds one state as it passes along the succession of circuits, comprising initialising the linking circuits to take up a different state from each adjacent linking circuit in the succession thereof, initialising each functional logic circuit to take up the same state as the preceding linking circuit, applying the data as a succession of code values to the beginning of the succession of circuits, 


 for each linking circuit except the first, repeatedly changing the state held by that circuit to the state held by the preceding circuit if, and only if, the state held by the succeeding circuit differs from that held by the preceding circuit and the transition from the state held to the state next to be held is legitimate as defined by the finite state machine, and removing the code values at the end of the succession of circuits to output data values.
22. A method according to Claim 21 wherein the finite state machine has three states, comprising first and second states representing different respective code values which each represent data and a third state representing a further code value which represents the absence of data, and the finite state machine has transitions to and from the first and third states, and to and from the second and the third states, only, and in applying the code values and initialising the linking circuits, alternate code values represent the first or second state, and the third state, respectively.
23. A method according to Claim 21 wherein the finite state machine has four states, each representing a code value and the machine has transitions to and from all states except where a transition would require a change in two logic values, two code values are provided for each data value and when a data value is to be transmitted immediately after the transmission of the same data value, a different code value is used from the code value used immediately before.
24. A method according to any of Claims 21 to 23 wherein, for a transition between states in the finite state machine, the predetermined number of logic values required to change is one. 25. A linking circuit for transmitting data between two circuits in a succession of circuits comprising signal transmission means for passing data from an input of the linking circuit to an output thereof only if a predetermined relationship between signal conditions exists in at least part of the succession of circuits. 


26. A linking circuit substantially as hereinbefore described with reference to Figures 4, 5, 6 or 8.
27. Apparatus including a linking circuit and a functional logic circuit substantially as hereinbefore described with reference to Figures 1, 2, 7 or 9.
28. A functional logic circuit substantially as hereinbefore described with reference to Figure 10, 12 or 13.
29. A method of carrying out logical processes substantially as hereinbefore described. 

</CLAIMS>
</TEXT>
</DOC>
