<DOC>
<DOCNO>EP-0652509</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Instruction cache associative cross-bar switch
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F938	G06F938	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A computing system as described in which 
individual instructions are executable in parallel by 

processing pipelines, and instructions to be executed in 
parallel by different pipelines are supplied to the 

pipelines simultaneously. The system includes storage for 
storing an arbitrary number of the instructions to be 

executed. The instructions to be executed are tagged with 
pipeline identification tags indicative of the pipeline to 

which they should be dispatched. The pipeline 
identification tags are supplied to a system which controls 

a crossbar switch, enabling the tags to be used to control 
the switch and supply the appropriate instructions 

simultaneously to the differing pipelines. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
INTERGRAPH CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERGRAPH CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SACHS HOWARD G
</INVENTOR-NAME>
<INVENTOR-NAME>
SACHS, HOWARD G.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to a computing system according to the
preamble of claim 1 and to a method for executing groups of individual
instructions in parallel according to the preamble of claim 5.A common goal in the design of computer architectures is to
increase the speed of execution of a given set of instructions. One approach
to increasing instruction execution rates is to issue more than
one instruction per clock cycle, in other words, to issue instructions
in parallel. This allows the instruction execution rate to exceed the
clock rate. Computing systems that issue multiple independent instructions
during each clock cycle must solve the problem of routing the individual
instructions that are dispatched in parallel to their respective
execution units. One mechanism used to achieve this parallel routing
of instructions is generally called a "crossbar switch".In present state of the art computers, e.g. the Digital Equipment
Alpha, the Sun Microsystems SuperSparc, and the Intel Pentium, the
crossbar switch is implemented as part of the instruction pipeline. In
these machines the crossbar is placed between the instruction decode and
instruction execute stages. This is because the conventional approach
requires the instructions to be decoded before it is possible to determine
the pipeline to which they should be dispatched. Unfortunately, decoding
in this manner slows system speed and requires extra surface area
on the integrated circuit upon which the processor is formed. These disadvantages
are explained further below.From IEEE PACIFIC RIM CONFERENCE ON COMMUNICATIONS, COMPUTERS
AND SIGNAL PROCESSING, 9 MAY 1991, VICTORIA, CA., pages 21-24, MINAGAWA
ET AL., Pre-decoding mechanism for superscalar architecture, a superscalar
architecture is known comprising a pre-decoder determining which
functional unit should execute an instruction and recording it with a
tag associated with each instruction, a register scoreboard detecting
dependencies and an instruction crossbar switch routing the instructions
to the pipelines by which they are executed in parallel.It is the object of the invention to provide a computing system 
architecture that enables instructions to be routed to an appropriate
pipeline more quickly, at lower power, and with simpler circuitry
than previously possible.This object is solved according to claims 1 and 5 in that the
pipeline identifier associated with each instruction in a group of individual
instructions is determined by software at compile time.The crossbar switch is placed earlier
</DESCRIPTION>
<CLAIMS>
A computing system including a compiler for forming groups
of instructions and in which groups of individual instructions are executable

in parallel by processing pipelines, comprising means for routing
each instruction in a group to be executed in parallel to an appropriate

instruction pipeline (0, ..., 7), said means comprising:

storage (70) for holding at least two such groups of instructions
in parallel, each instruction therein having associated therewith

a pipeline identifier indicative of the pipeline (0, ..., 7) for
execution of that instruction,
a crossbar (100) having a first set of connectors (73) coupled
to said storage (70) for receiving individual instructions there-from

and a second set of connectors (110, ..., 117) coupled to the processing
pipeline (0, ...,7), and
means responsive to the pipeline identifier of the individual
instructions in the group for routing individual instructions onto

appropriate ones of the second set of connectors (110, ..., 117) thereby
supplying each instruction in such group to the appropriate pipeline

(0, ..., 7), characterized in that

the pipeline identifier associated with each instruction in
such group is determined by software at compile time.
Computing system as in claim 1, characterized in that

the first set of connectors (73) consists of a set of first
communication buses, one for each instruction in the storage (70);
the second set of connectors (110, ..., 117) consists of a set
of second communication buses (180, ..., 187), one for each pipeline (0,

..., 7); and
the means responsive to the pipeline identifier comprises:
a set of decoders (170, ..., 177) coupled to the storage (70)
to receive as first input signals the pipeline identifiers and in response

thereto supply as output signals a switch control signal; and
a set of switches (213, 234, 265), coupled to the decoders, 
one switch at the intersection of each of the first set of connectors

(73) with the second set of connectors (110, ..., 117), the switches
providing connections in response to receiving the switch control signal

to thereby supply each instruction in the group to be executed in parallel
to the appropriate pipeline (0, ..., 7).
Computing system as in claim 1, characterized in that

selection means connected to receive the set of instructions
and connected to receive information about those instructions to be next

executed in parallel for supplying in response thereto an output signal
indicative of the next set of instructions to be executed in parallel;

and
decoders (170, ..., 177) coupled to receive the output signal
and each of the pipeline identifiers of the instructions in the storage

(70) for selectively connecting ones of the first set of connectors (73)
to ones of the second set of connectors (110, ..., 117) to thereby supply

each instruction in the set to be executed in parallel to the appropriate
pipeline (0, ..., 7).
Computing system as in claim 3, characterized in that a
multiplexer supplies an output signal to the decoders (170, ..., 177) to

select the next group of instructions to be supplied to the pipelines
(0, ..., 7).
A method for executing groups of individual instructions
in parallel by processing pipelines (0, ..., 7) of a computing system,

wherein each instruction in a group to be executed is transferred
through a crossbar switch having a first set of connectors (73) coupled

to a storage (70) for receiving instructions therefrom and a second set
of connectors (110, ..., 117) coupled to the processing pipelines (0,

..., 7),

wherein in the storage (70) at least one group of instructions
to be executed in parallel is stored, each instruction in the group having

associated therewith a pipeline identifier indicative of the pipeline
which will execute that instruction; and
wherein the pipeline identifiers of the individual instructions
in the at least one group of instructions which are to be executed 

is used next to control switches (213, 234, 265) between the first set
of connectors and the second set of connectors to thereby supply each

instruction in the group to be executed in parallel to the appropriate
pipeline, characterized in that the pipeline identifier associated with

each instruction in such group is determined by software at compile time.
A method as in claim 5, characterized in that

the pipeline identifiers of the individual instructions in the

at least one group of instructions are supplied to a corresponding number
of decoders (170, ..., 177), each of which provides an output signal

indicative of the pipeline identifiers; and
the decoder output signals are used to control the switches
between the first set of connectors and the second set of connectors to

thereby supply each instruction in the group to be executed in parallel
to the appropriate pipeline (0, ..., 7).
</CLAIMS>
</TEXT>
</DOC>
