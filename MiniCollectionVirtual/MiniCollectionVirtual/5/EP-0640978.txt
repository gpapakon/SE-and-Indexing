<DOC>
<DOCNO>EP-0640978</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Non-invasive software update apparatus.
</INVENTION-TITLE>
<CLASSIFICATIONS>A61B500	A61B500	A61B5145	A61B5145	A61B51455	G06F300	G06F300	G06F906	G06F906	G06F924	G06F924	G06F9445	G06F9445	G06F1100	G06F1100	G06F1130	G06F1130	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>A61B	A61B	A61B	A61B	A61B	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>A61B5	A61B5	A61B5	A61B5	A61B5	G06F3	G06F3	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F11	G06F11	G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
This apparatus makes use of the existing data collection probe connector on the 
instrumentation as the port through which the software updates are loaded into 

the programmable memory devices that are used to store the operational 
software of the instrumentation. Circuitry is provided in the instrumentation to 

automatically differentiate between software update data being loaded into the 
instrumentation and the normal monitoring data that is received from the probe. 

This is accomplished by the use of probe defining circuitry that is able to 
differentiate between the standard probe used for data collection purposes and 

the software update probe that is provided to download software into the 

programmable memory devices. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
OHMEDA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
OHMEDA INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HUNSAKER SCOTT WOOD
</INVENTOR-NAME>
<INVENTOR-NAME>
KULIK III STEPHAN
</INVENTOR-NAME>
<INVENTOR-NAME>
MARTIN ALAN DEAN
</INVENTOR-NAME>
<INVENTOR-NAME>
TOTEL CRAIG ALLEN
</INVENTOR-NAME>
<INVENTOR-NAME>
HUNSAKER, SCOTT WOOD
</INVENTOR-NAME>
<INVENTOR-NAME>
KULIK III, STEPHAN,
</INVENTOR-NAME>
<INVENTOR-NAME>
MARTIN, ALAN DEAN
</INVENTOR-NAME>
<INVENTOR-NAME>
TOTEL, CRAIG ALLEN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to processor-controlled instrumentation and, in particular, 
to apparatus for non-invasively updating the software of a processor-controlled 
medical monitoring apparatus. It is a problem in the field of instrumentation to update on a regular basis the 
operational computer program that is contained therein. The software used to 
control the operation of instrumentation is stored in non-volatile memory, since 
the instrumentation may be maintained in a power down condition for an 
extended period of time. Therefore, the software is in the form of program 
instructions stored in read only memory or a programmable read only memory. In the case of read only memory, software updates can be accomplished only by 
replacing the memory devices, which entails disassembling the equipment. This 
software update operation requires an extensive amount of time and removes 
the instrumentation from service for the duration of the update process, which 
can be a significant impediment if the instrumentation is used on a continuous 
basis. If the memory devices are programmable read only memory, the devices need 
not be removed from the equipment to have the software updated. However, to 
provide access to the programmable read only memory, the instrumentation 
must be equipped with a separate connector that is used solely for the purpose 
of updating the software. The provision of an extra connector represents a 
significant design problem in many instrumentation applications due to the 
limited amount of space available on the front and back panels of the 
equipment. This problem is further exacerbated when the instrumentation is 
part of a rack mounted system and represents a pluggable module that must 
interface with an aperture in the rack mounted system of predetermined 
dimensions and having a connector of predetermined configuration. In this  
 
environment, the user or the repair person may only have access to the front 
panel of the equipment which is typically occupied by displays, controls and 
plugs for the probes that are used to connect to the subject being monitored. In 
this application, no space is available to provide a separate connector for the 
purpose of software update of a programmable memory device. In the field of medical monitoring apparatus, the instrumentation may be in 
substantially continuous use and cannot be removed from use for a significant 
amount of time to provide software updates. Therefore, much of the medical 
monitoring apparatus presently used does not
</DESCRIPTION>
<CLAIMS>
An apparatus for writing program instructions into a program memory 121 
in a processor controlled system that is equipped with a port 107 that 

receives a probe 111 used to collect data, characterised by: 
means, connected to said port 107, for determining whether a data 

collection probe 111 is connected to said port 107; 
means, responsive to said determining means indicating that said data 

collection probe 111 is not connected to said port 107, for receiving data 
input to said port 107 as program instructions; and 

means for storing said received program instructions in said program 
memory. 
An apparatus as claimed in claim 1, wherein said determining means 
comprises: 

means for measuring a physical characteristic of a probe connected to 
said port 107; and 

means for comparing said measured physical characteristic with data 
stored in a memory to determine whether said data collection probe is 

connected to said port 107. 
An apparatus as claimed in claim 1, wherein said determining means 
comprises: 

means for transmitting a query, in a predefined protocol, to a probe 
connected to said port 107; and

 
means, responsive to a response from said probe in said predefined 

protocol, for determining that said data collection probe 111 is not 
connected to said port. 
An apparatus as claimed in any one of claims 1 to 3 wherein said data is 
input to said port via a software update probe and said data comprises 

control data and program instructions, said storing means comprises: 
means for interpreting said control data to identify memory locations in 

said program memory 104 in which to store said program instructions 
contained in said data received at said port 107. 
An apparatus as claimed in any one of claims 1 to 4, wherein said storing 

means comprises: 
means, responsive to data received at said port from a source of data, for 

storing said data in a buffer memory; 
means for excerpting software changes from said stored data; 

means for inputting said excerpted software changes into said program 
memory. 
A method for inputting software changes into a program memory in a 
processor controlled equipment, wherein said processor controlled 

equipment includes a port 107 for connection to a data collection probe 
to perform measurements, comprising the steps of: 

determining whether a data collection probe 111 is connected to said port 
107,

 
receiving, in response to the absence of said data collection probe 

connected to said port, data input to said port 107 as program 
instructions; and 

storing said received program instructions in said program memory 104. 
The method of claim 6 wherein, said data collection probe 111 has a 
predefined impedance, said step of determining comprises: 

differentiating an impedance of said source of data from said data 
collection probe impedance. 
The method of claim 7 wherein said step of differentiating comprises: 
measuring the impedance present at said port; 

comparing said measured impedance to data indicative of said impedance 
of said source of data and said data collection probe impedance to 

identify the one of said data collection probe and said source of data 
connected to said port. 
The method of claim 6 wherein said step of determining comprises: 
transmitting a query, in a predefined protocol, to a probe connected to 

said port; and 
determining, in response to receipt of a response from said probe in said 

predefined protocol, that said source of data is connected to said port. 
The method of claim 6 wherein said step of storing comprises:
 

storing, in response to data received at said port from said source of data, 
said data in a buffer memory; 

excerpting software changes from said stored data; 
inputting said excerpted software changes into said program memory. 
</CLAIMS>
</TEXT>
</DOC>
