<DOC>
<DOCNO>EP-0652518</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Operating system based performance monitoring of programs
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F1134	G06F1134	G06F906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F11	G06F11	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An operating provides a facility within its kernel 
for monitoring program performance. The facility may monitor 

user level programs as well as portions of the operating 
system, such as the kernel. The facility counts instructions 

and/or function calls to provide a useful performance metric 
to a user of the system. The count is forwarded to a user 

level monitoring program. The inclusion of the facility 
within the kernel enhances the speed of performance monitoring 

and enables the operating system to be directly monitored by 
the facility. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BOLOSKY WILLIAM J
</INVENTOR-NAME>
<INVENTOR-NAME>
RASHID RICHARD F
</INVENTOR-NAME>
<INVENTOR-NAME>
BOLOSKY, WILLIAM J.
</INVENTOR-NAME>
<INVENTOR-NAME>
RASHID, RICHARD F.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to data
processing systems and, more particularly, to performance
monitoring of programs run on data processing systems.A number of different statistical techniques
have been developed for monitoring performance of a
program run on a data processing system. One of the most
prominent techniques is to monitor the time spent in
executing respective functions of the program. One
difficulty with this approach is that in many instances
the granularity of the clock used in timing the functions
is too large to provide an accurate picture of how
processing time is distributed amongst the respective
functions. Instruction counting is another statistical
technique for monitoring performance of a program.
Instruction counting techniques have generally been
limited to monitoring the performance of user level
programs (as opposed to system level programs), such as
application programs. These techniques have not been
applicable to monitoring the performance of operating
system kernels. As a result of these limitations,
statistical techniques have often not been useful to a
programmer to help him enhance program performance.The document EP-A-0 526 055 discloses a computer system for monitoring the execution of a computer program to provide a profile analysis by detecting predetermined instructions flagged by a dedicated test bit added to each instruction.According to the present invention, which is set forth in the appended claims, a
method is practiced in a data processing
system having a processor for executing instructions and a
storage mechanism for storing an operating system and a
user level monitoring program. The processor executes
instructions at a user level and a system level. The data  
processing system may be a distributed system. In this
method, a facility is provided in the kernel of the
operating system to monitor program performance. For
instance, the facility may count the instructions executed
by the processor, count the number of times that a section
of code has been called during execution of a program or
provide a number of separate counts categorized by
function that specify the number of instructions executed
in the respective functions. A section of code of a
program is executed on the processor. The facility in the
kernel of the operating system is then used to monitor
system performance. The type of facility used determines
the values that are counted by the facility. The counts
are reported to the user level monitoring program. For
example, the
</DESCRIPTION>
<CLAIMS>
A method capable of being implemented on a data processing system having a
processor that executes computer-executable code and a storage mechanism (16) for

storing an operating system (28) that includes a kernel (30), characterized by the steps of:

providing a facility (32) in the kernel of the operating system for counting the
number of selected sections of code executed by the processor and a user-level

monitoring program for monitoring the count of the selected sections of code that are
executed;
using the facility (32) in the kernel of the operating system (28) to count the number
of selected sections of code that are executed while the code (26) is executed on the

processor; and
reporting the count of the selected sections of code that are executed to the user-level
monitoring program.
A method as defined in claim 1, wherein the selected sections of code include
individual instructions in the code, such that the facility (32) in the kernel counts the

number of times that the individual instructions are executed when a function in the code is
called (68).
A method as defined in any preceding claim, wherein the selected sections of code
include at least one portion of a function in the code, such that the facility in the kernel

counts the number of times that the function is called.
A method as defined in any preceding claim, wherein the selected sections of code
include individual instructions in a plurality of functions in the code, such that the facility in

the kernel counts the number of times that the individual instructions are executed in each 
of the plurality of functions when the plurality of functions are called as the result of the

execution of an initial function.
A method as defined in any preceding claims, wherein the code is executed on the
processor without recompiling the code to embellish the code for profiling.
A method as defined in any preceding claims, wherein the code is that executed on
the processor is conducted without a word size associated with the code for being

increased.
A method as defined in any preceding claims, wherein the code executed by the
processor is part of the kernel of the operating system.
A method as defined in any preceding claims, wherein the code executed by the
processor is a non-kernel section of the operating system.
A method as defined in any preceding claims, wherein the code executed by the
processor is a user-level program.
A method as defined in any preceding claims, further comprising the step of tuning
the code executed on the processor to decrease the number of instructions that are

executed when the code is again executed on the processor.
A system for measuring performance of a monitored program that includes
computer-executable code, wherein the sys
tem includes a storage mechanism (16) for
storing a user-level monitoring program and an operating system (28) that includes a

kernel, a processor comprising a program execution unit for executing the monitored
program and the user level monitoring program, and wherein the system is characterized

in that:

   the kernel (30) comprises a counter facility (32) for counting the number of selected
sections of the monitored program that are executed; and

   the processor comprises: 

a facility for invoking the counter facility so that a count is made of the number of
selected sections of code of the monitored program that are executed while at least a

portion of the monitored program is executed on the processor; and
a count reporter for reporting the counts made by the count facility to the user-level
monitoring program.
A system as defined in claim 11, wherein the selected sections of code include
individual instructions in the monitored program, such that the facility in the kernel is

capable of counting the number of times that the individual instructions are executed when
a function in the monitored program is called.
A system as defined in the preceding claim, wherein the selected sections of code
include at least one portion of a function in the monitored program, such that the facility

(32) in the kernel (30) is capable of counting the number of times that the function is
called.
A system as defined in preceding claim, wherein the selected sections of code
include individual instructions in a plurality of functions in the monitored program, such that

the facility in the kernel is capable of counting the number of times that the individual
instructions are executed in each of the plurality of functions when the plurality of functions

are called as the result of the execution of an initial function.
A system as defined in any preceding claim, wherein the computer executable code
of the monitored program is not embellished for profiling.
A system as defined in any preceding claim, wherein a word size associated with
the computer-executable code of the monitored program is not increased with respect to

the word size of the computer-executable code when the monitored program is executed
on other systems.
A system as defined in any preceding claim, wherein the selected sections of code
are included in the kernel of the operating system. 
A system as defined in any preceding claim, wherein the selected sections of code
are included in a non-kernel section of the operating system.
A system as defined in any preceding claim, wherein the selected sections of code
are included in a user-level program.
</CLAIMS>
</TEXT>
</DOC>
