<DOC>
<DOCNO>EP-0613089</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Content addressable memory having memory cells storing don't care states for address translation.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1210	G06F1210	G11C1500	G11C1504	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G11C	G11C	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F12	G06F12	G11C15	G11C15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A content addressable memory has a pair of single-bit 
memory cells (61,63) together storing two bits of information 

representing either an invalid state, a logic zero state, a 
logic one state, or a don't care state. Each of the memory 

cells has a pair of transistors (133,134). One of the transistors (133) 
connects a common node (135) to a respective one of the address 

lines (141), and another of the transistors (134) connects the common 
node to a potential of a predefined logic level. Each of 

the transistors has a gate receiving a logic level of the 
bit of information stored in the memory cell so that one of 

the transistors is conductive in response to the logic 
level of the bit of the information when the other of the 

transistors is not conductive in response to the logic 
level of the bit of information. Each of the memory cells 

also includes a transistor (136) connected to the match line and 
having a gate connected to the common node. The content 

addressable memory is especially adapted for use in a 
translation buffer providing variable page granularity. 

The don't care states permit multiple virtual page numbers 
to match a single entry storing information for multiple 

physical pages. The invalid state eliminates the need for 
a dedicated valid bit in each entry. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
DIGITAL EQUIPMENT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
DIGITAL EQUIPMENT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GIESEKE BRUCE A
</INVENTOR-NAME>
<INVENTOR-NAME>
MCLELLAN EDWARD J
</INVENTOR-NAME>
<INVENTOR-NAME>
GIESEKE, BRUCE A.
</INVENTOR-NAME>
<INVENTOR-NAME>
MCLELLAN, EDWARD J.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to content 
addressable memories, and more particularly to content 
addressable memories in which certain bits of a tag are 
defined as "don't care" bits that are presumed to match 
corresponding bits of an address applied to the memory. 
The present invention specifically relates to a content 
addressable memory having memory cells storing don't care 
states for address translation. The translation buffer described in the present 
application implements the granularity hint mechanism 
described in EP publication 0-463-978-A3, which is assigned 
to Digital Equipment Corporation, Maynard, USA 01754.  Content addressable memories, or CAMs, are commonly 
employed by the designers of digital electronics to provide 
a means for storing binary words, and later comparing a 
specified binary word to the stored binary words. Typical 
uses for CAMs include pattern matching memories for optical 
character recognition, and translation look-aside buffers 
for digital computers that employ "virtual" memory. A content addressable memory typically has a plurality 
of storage locations, and each storage location stores a 
tag and a data word associated with the tag. When the 
content addressable memory is addressed with a specified 
address, each tag is compared to the specified address, and 
when a match occurs, the data word associated with the 
matching tag is retrieved and asserted on a data output bus 
from the memory. In a content addressable memory of a typical optical 
character recognition system, a tag is stored in the memory 
for each possible pattern to be recognized as a character. 
Each data word is a code representing a specific character, 
and the code associated with each tag is the code 
representing the character to be recognized from the 
pattern represented by the tag. A translation buffer is often used in a digital 
computer in order to translate "virtual" addresses to 
"physical" addresses. The "virtual" addresses are the 
addresses that are used by a computer program. The  
 
"physical" addresses are the addresses that are used by the 
memory of the computer. In a typical translation buffer, 
each data word contains a number of the most significant 
bits of a "physical" address, and the tag associated with 
the data word is an even greater number of the most 
significant bits of a "virtual" address that translates to 
the "physical" address. The translation buffer therefore 
provides a flexible mapping between the "virtual" addresses 
and the "physical"
</DESCRIPTION>
<CLAIMS>
A method of accessing a memory with a one-bit 
signal, said memory having a pair of single-bit storage 

locations together storing two bits of information 
representing either an invalid state, a logic zero state, a 

logic one state, or a don't care state; said method 
comprising the steps of: 


a) storing information in said storage locations 
representing said invalid state, generating a signal 

indicating an absence of a match when said one-bit signal 
represents a l
ogic zero and said information in said 
storage locations represents said invalid state, and 

generating a signal indicating an absence of a match when 
said one-bit signal represents a logic one and said 

information in said storage locations represents said 
invalid state; 
b) storing information in said storage locations 
representing said logic zero state, generating a signal 

indicating a presence of a match when said one-bit signal 
represents a logic zero and said information in said 

storage locations represents said logic zero state, and 
generating a signal indicating an absence of a match when 

said one-bit signal represents a logic one and said 
information in said storage locations represents said logic 

zero state; 
c) storing information in said storage locations 
representing said logic one state, and generating a signal 

indicating an absence of a match when said one-bit signal 
represents a logic zero and said information in said 

storage locations represents said logic one state, and 
generating a signal indicating a presence of a match when 

said one-bit signal represents a logic one and said 
information in said storage locations represents said logic 

one state; and 
d) storing information in said storage locations 
representing said don't care state, generating a signal 

indicating a presence of a match when said one-bit signal 
represents a logic zero and said information in said 

storage locations represents said don't care state, and 
generating a signal indicating a presence of a match when 

said one-bit signal represents a logic one and said 
information in said storage locations represents said don't 

care state. 
A method as claimed in claim 1, further 
comprising the steps of precharging a match line, and 

discharging the match line whenever generating a signal 
indicating an absence of a match. 
A method as claimed in claim 1 or 2, which includes 
the steps of complementing said one-bit signal to produce a 

complemented bit signal, comparing said one-bit signal to a 
single bit of information stored in one of said single-bit 

storage locations, and comparing said complemented bit 
signal to a single bit of information stored in another one of 

said single bit storage locations. 
A method as claimed in claim 1,2 or 3, wherein said 
step of storing information in said storage locations 

representing said invalid state includes the step of 
asserting a flush signal on a flush line to render 

conductive a respective transistor for each of said single-bit 
storage locations to set each of said single-bit 

storage locations to a predetermined logical value. 
A method as claimed in claim 1,2,3 or 4, wherein said 
step of storing information in said storage locations 

representing said don't care state includes masking a data 
bit with a mask bit to produce a result that is stored in 

one of said single-bit storage locations. 
A content addressable memory for storing 
information including a "don't care" state, comparing the 

 
stored information to address signals asserted on a pair of 

address lines, and asserting a match signal on a match line 
when the stored information matches address information 

asserted on said address lines; said content addressable 
memory comprising: 

   a pair of memory cells, each of said memory cells 
storing a respective bit of said stored information; each 

of said memory cells including: 
      a pair of transistors, one of said transistors 

connecting a common node to a respective one of said 
address lines, another of said transistors connecting 

said common node to a potential of a predefined logic 
level, each of said transistors having a gate 

receiving a logic level of said bit of information 
stored in said each of said memory cells so that one 

of said transistors is conductive in response to said 
logic level of said bit of said information when the 

other of said transistors is not conductive in 
response to said logic level of said bit of 

information; and 
      a transistor connected to said match line and 

having a gate connected to said common node. 
A content addressable memory as claimed in 
claim 6, wherein said potential of a predefined logic level 

is ground potential of a semiconductor substrate including 
semiconductor material of said transistors, further 

comprising an address bit generator connected to said 
address lines to assert complementary address signals on 

said address lines. 
A content addressable memory as claimed in claim 6 
or 7, wherein each of said memory cells further 

comprises a transistor having a gate connected to a flush 
line for setting, in response to a flush signal on said 

flush line, said bit of information to a logic state 
rendering said one of said transistors non-conductive, 

further comprising a write line and pair of data input 
lines, and wherein each of said memory cells further 

comprises a transistor connected to a respective one of 
said data input lines and having a gate connected to said 

write line for setting said bit of information to a logic 
state specified by a data signal asserted on said 

respective one said data input lines when a write enable 
signal is asserted on said write line, further comprising a 

logic circuit connecting said pair of data input lines to a 
single data line of said data bus and to a mask bit line so 

that when a mask bit is asserted on said mask bit line and 
 

a write enable signal is asserted on said write enable 
line, data are written into said pair of memory cells 

representing said "don't care" state, and when a mask bit 
is not asserted on said mask bit line and a write enable 

signal is asserted on said write enable line, data are 
written into said pair of memory cells to represent another 

state that encodes a data bit on said single data line of 
said data bus. 
The content addressable memory as claimed in claim 
6 or 7, wherein each of said memory cells includes a pair 

of cross-coupled inverters for storing said bit of said 
information, one of said inverters having an output 

connected to the gate of said one of said transistors, and 
another of said inverters having an output connected to the 

gate of said another of said transistors, so that 
complementary logic levels are asserted on said gates of 

said transistors of said pair of transistors. 
A method of translating a virtual address to a 
physical address in a digital computer, said method 

comprising the steps of: 

a) storing a virtual page number in a tag store of a 
storage location of a content addressable memory, storing 

 
an associated physical page number in a data word of said 

storage location, and storing page granularity information 
as don't care states in said storage location, said don't 

care states specifying predetermined bits of said virtual 
page number in said tag store; 
b) matching a virtual page number specified by said 
virtual address to the virtual page number stored in said 

tag store of said storage location, and based on said don't 
care states in said storage location, detecting a match 

between each predetermined bit of said virtual page number 
stored in said tag store and a corresponding bit of said 

virtual page number specified by said virtual address, and 
upon detecting a match between each bit of said virtual 

page number specified by said virtual address and the 
virtual page number stored in said tag store of said 

storage location, retrieving said associated physical page 
number from said storage location; and 
c) determining said physical address from the 

associated physical page number retrieved from said storage 
location. 
</CLAIMS>
</TEXT>
</DOC>
