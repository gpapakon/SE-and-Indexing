<DOC>
<DOCNO>EP-0658859</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and apparatus for interlocking graphical objects
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F3048	G06F3048	G06T1180	G06F314	G06T1510	G06T1180	G06T1540	G06F314	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06T	G06F	G06T	G06T	G06T	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F3	G06F3	G06T11	G06F3	G06T15	G06T11	G06T15	G06F3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An apparatus for moving graphical objects including a display for 
displaying multiple graphical objects according to a display priority, 

apparatus for moving, responsive to a user input, a displayed graphical 
object, and apparatus for modifying, responsive to a user input, a 

display priority of the moved graphical object as the graphical object is 
moved so that the moved graphical object is displayed under a portion of 

a second displayed graphical object. In addition, a method for moving 
graphical objects including displaying multiple graphical objects 

according to a display priority on a display, moving, responsive to a 
user input, a displayed graphical object, and modifying, responsive to a 

user input, a display priority of the moved graphical object as the 
graphical object is moved so that the moved graphical object is displayed 

under a portion of a second displayed graphical object. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
INTERNAT BUSINESS MACHINES BR
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES
<
BR
>
CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHOW ALEX CHUNG-HEN
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG JOHN SHIH-YUAN
</INVENTOR-NAME>
<INVENTOR-NAME>
CHOW, ALEX CHUNG-HEN
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG, JOHN SHIH-YUAN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a method and apparatus for
interlocking graphical objects in a computer graphics system.In computer graphics systems, it is desired to represent two and
three dimensional graphical picture on a two dimensional display.
Typically, such a picture is a construct or image that may be stored in
memory as a set of polygons. To generate the picture on the display, the
polygons are then rendered using processes that are typically
computationally intensive. However, a portion of the picture to be
represented may fall outside the field of vision provided by a window on
the display or by the display itself. In such cases, it may be desirable
to clip the picture and the polygons comprising the picture as the
picture is being generated, thereby reducing computational requirements
and increasing rendering speed.A polygon is typically specified as a set of vertices P(0), P(1),
..., P(n-2), P(n-1), where n is the number of vertices in the polygon.
Each vertex P(i) is specified by its location V(i) in a suitable
coordinate space and a function, referred to herein as a color factor,
f(V(i)). A color factor is a function evaluated at each vertex that may
be displayed later as a color (including a grayscale) variation (such as
a light intensity, a thermal characteristic, a humidity factor, etc.).
The color factor may be converted to a color and is useful in modelling
(such as simple lighting modelling or more complex weather modelling).Once the polygons are rendered, typical two dimensional graphics
systems allow the user to pick and drag polygons to desired locations. A
polygon is picked when the user selects that object, typically by
positioning a cursor over the object and pressing a mouse button. The
object is dragged by the user moving the cursor, typically by moving the
mouse while continuing to press the mouse button. Typically, an object
being dragged is shown in outline form during the dragging operation to
reduce computational requirements of rendering the object as the object
is moved. Once the user has completed dragging the object, the user may
then drop the object, typically by releasing the mouse button. Prior art
systems then render the polygon in the drop location. If there are any 
pre-existing objects that are also at the same location, then the dropped
object is rendered as being on top of the pre-existing object. If the
user desires the pre-existing object to be on top of the dropped object,
then the user must pick the pre-existing object and then drop it without
draggin
</DESCRIPTION>
<CLAIMS>
Apparatus (200) for moving graphical objects (A,B,C) in a display (150), the
apparatus (200) comprising:


storing means (230) for storing said first and second graphical objects, each
graphical object having a priority;
displaying means for displaying (560) said first and said second objects
on a display overlaid according to their respective priorities;
moving means, responsive to a first user input, for selecting and
dragging (520) said displayed first object with respect to said displayed

second object;
detecting means for detecting (620) if said first object collides
with said second object;

   
characterised by
;

modifying means for adjusting (647,645), responsive to a second
user input, the display priority of said first object if said first object

collides with said second object for the first time whereby said first
object will be displayed above or below said second object according to

their respective display priority as modified by said modifying means in response to a second user input.
Apparatus as in claim 1 wherein;

the storing means (230) stores each of said graphical objects as one or more graphical
sub-objects, each sub-object having a priority;
said displaying means displays (560) said sub-objects overlaid
according to their respective priorities;
said detecting means detecting (620) if a sub-object of said first
object collides with a sub-object of said second object for the first

time; and
said modifying means adjusting (647,645), responsive to a user
input, the display priority of said sub-object of said first object.
Apparatus as in claim 2 further comprising means for storing, for
each of said graphical sub-object priority, an ABOVE_LIST to indicate which other

sub-objects are above that sub-object, and a BELOW_LIST to indicate which
other sub-objects are below that sub-object whereby the detecting means

checks (620) the ABOVE_LIST and BELOW_LIST of each of said graphical object to see if a
prior collision has occurred.
Apparatus as in claim 2 or 3 further comprising interlock detect
means for detecting (715) an interlock condition when one sub-object of

said first object is above said second object and another sub-object of said
first object is below said second object.
Apparatus as in claim 4 wherein said moving means further comprising means to prevent the
dragging of said first object on detection of an interlock condition. 
Apparatus as in claim 4 wherein said moving means further comprising means to drag both said
first and second object on detection of an interlock condition.
A method of moving graphical objects (A,B,C) in a display (150), the method
comprising:


storing (230) a first and second graphical object, each graphical object having a
priority;
displaying (560) said first and second objects on a display overlaid
according to their respective priorities;
selecting and dragging (520) said displayed first object with
respect to said displayed second object in response to a first user input;
detecting (620) if said first object collides with said second
object;

   
characterised by
;

adjusting (647,645), in response to a second user input, the
display priority of said first object if said first object collides with

said second object for the first time whereby said first object maybe
displayed above or below said second object according to

their respective display priority as modified in response to a second user input.
A method as in claim 7 wherein;

the storing step stores (230) each of said graphical object as one or more
sub-objects, each sub-object having a priority;
the displaying step displays (560) said sub-objects overlaid
according to their respective priorities;
the detecting step detects (620) if a sub-object of said first

object collides with a sub-object of said second object for the first
time; and
said adjusting step adjusting (647,645), responsive to a user
input, the display priority of said sub-object of said first object.
A method as in claim 8 further comprising:

storing, for each of said graphical sub-object priority, an ABOVE_LIST to indicate
which other sub-objects are above that sub-object, and a BELOW_LIST to

indicate which other sub-objects are below that sub-object whereby the
detecting step checks (620) the ABOVE_LIST and BELOW_LIST of each of said graphical object

to see if a prior collision has occurred.
A method as in claim 8 or 9 further comprising

detecting (715) an interlock condition when one sub-object of said first
object is above said second object and another sub-object of said first

object is below said second object.
A method as in claim 10 wherein said dragging step prevents the
dragging of said first object on detection of an interlock condition. 
A method as in claim 10 wherein said dragging step drags both said
first and second object on detection of an interlock condition.
</CLAIMS>
</TEXT>
</DOC>
