<DOC>
<DOCNO>EP-0648038</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A data processing system for providing user load levelling in a network
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	H04L2906	G06F1300	H04L2908	G06F15177	H04L2908	G06F1516	G06F1300	G06F1516	H04L2906	G06F950	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	H04L	G06F	H04L	G06F	H04L	G06F	G06F	G06F	H04L	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	H04L29	G06F13	H04L29	G06F15	H04L29	G06F15	G06F13	G06F15	H04L29	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The present invention provides a data processing system, and method
of operating such a system, for facilitating a connection of a program on

a client computer (20) to a server (10), the server consisting of a plurality of
server computers (40,50,60) with shared resources. The data processing system, the

client computer, and the server computers all reside in a logical
network. The data processing system has an input means (30) for receiving a

request from the client computer for a machine address of a server
computer identified by a server computer name sent with the request, such

a machine address enabling a connection to be made from the client
computer to that server computer via the network. A storage device (80) is

provided by the system for storing a list identifying server computer
names with machine addresses of the server computers. A conversion means (70)

in the system uses the list to convert the server computer name received
by the input means into the machine address of the server computer, and

then an output means (110) sends the machine address from the conversion means
to the client computer. The system is characterised by: decision logic (120)

for studying the server computers at predetermined intervals having
regard to a predetermined test criteria, in order to select one of the

server computers; and writing means (160) for updating the list by associating
the machine address for the server computer selected by the decision

logic with a particular server computer name contained as a generic
server computer name in the list. Using this technique, when a client

computer specifies the generic server computer name, it receives the
machine address of the server computer identified by the decision logic.


</ABSTRACT>
<APPLICANTS>
</APPLICANTS>
<INVENTORS>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a data processing system for
facilitating the connection of a program on a client computer to a
server, the server consisting of a plurality of server computers with
shared resources.The data processing system, the client computer, and the server
computers are all resident on a network. This network need not be one
physical network such as a Local Area Network (LAN); for instance it may
consist of a number of LANS or WANS (wide area networks) connected
together (eg. via 'bridges') to form a single logical network. However
the same network protocol will be employed throughout the network, a
typical example of such a protocol being TCP/IP which will be familiar to
those skilled in the art.In many environments it is increasingly found that a number of
server computers are connected together using some form of network, eg. a
LAN. It is often the case that several users of client computers will be
connected to one such server computer, whilst other server computers
stand idle. An example of this is when such computers are situated in
workers' offices, connected by, for example, a token ring LAN using the
standard TCP/IP network protocol. When workers are away from their
offices, their computers will usually stand idle.In such situations it is commonly the case that a few of the
computers in the network are heavily loaded, whilst other computers in
the network are very lightly loaded, giving poor response and performance
for the client computers using the heavily loaded server computers. Hence
there is a problem of how to enable the client user load to be spread
more evenly across the available computing resources of the server in a
manner which is transparent to the client computer and its programs. If
transparency is to be achieved, standard protocols need to be observed in
order that client computers can use a variety of connection methods
without modification of any programs being required.A prior art technique which has been developed to provide some sort
of load spreading is called "Static load levelling". With this technique 
each application on each client computer has a designated server to which
it always connects. Hence, for example, if there are 200 potential
clients of a server having five server computers, a pre-specified group
of, say, 40 of the clients will be told (or configured) to always connect
to machine 1, etc. On average it may be argued that this will give a
reasonably even load across all of the server computers. However in
practice it is often the
</DESCRIPTION>
<CLAIMS>
A data processing system (10) for facilitating a connection of a
program on a client computer (20) to a server (40, 50, 60), the server

consisting of a plurality of server computers (40, 50, 60) with shared
resources, the data processing system, the client computer, and the server

computers residing in a network, the system comprising:

input means (30) for receiving a request from the client computer for
a machine address of a server computer identified by a server computer name

sent with the request, such a machine address enabling a connection to be
made from the client computer to that serve
r computer via the network;
a storage device (100) for storing a list identifying each of a
plurality of server computer names with a respective machine address;
conversion means (70) for using the list to convert the server
computer name received by the input means into the machine address of the

server computer;
output means (110) for sending the machine address from the
conversion means to the client computer;

the system being 
characterised by
:

decision logic (120) for studying the server computers whose machine
addresses are associated with each server computer name at predetermined

intervals having regard to predetermined test criteria, in order to select
one of the server computers for present assignment to the respective server

computer name; and
writing means (160) for updating the list by associating the machine
address for the server computer selected by the decision logic with a

particular server computer name which is a generic server computer name in
the list corresponding to a plurality of server computers residing in said

network;
whereby when a client computer specifies the generic server computer
name, it receives the machine address of the server computer identified by

the decision logic.
A system as claimed in Claim 1 further comprising:

a copier (90) to copy the list from the storage device to a piece of
memory accessible by the conversion means;
a messaging means (170), responsive to the updating of the list by
the writing means, for sending a message to the copier requesting the

copier to copy the updated list into the piece of local memory.
A system as claimed in Claim 1 or Claim 2, wherein the predetermined
test criteria are such that the decision logic identifies the server

computer having the least number of client programs logged on to it.
A system as claimed in any of claims 1 to 3, wherein the
predetermined intervals are variable.
A system as claimed in any preceding claim, wherein the predetermined
test criteria are set by a user of the system.
A system as claimed in any preceding claim, wherein the user can
limit the number of server computers which the decision logic studies.
A system as claimed in any preceding claim wherein a plurality of
generic names are used, each one having a number of server computers whose

machine addresses are associated with that generic name, the decision logic
employing different sets of predetermined test criteria for each generic

name.
A system as claimed in Claim 7, wherein one or more of the server
computers are associated with a plurality of the generic names.
A method of operating a data processing system (10) to facilitate a
connection of a program on a client computer (20) to a server (40, 50, 60),

the server consisting of a plurality of server computers (40, 50, 60) with
shared resources, the data processing system, the client computer, and the

server computers residing in a network, the method comprising the steps of:

(a) receiving a request from the client computer for a machine
address of a server computer identified by a server computer name sent with

the request, such a machine address enabling a connection to be made from
the client computer to that server computer via the network;
(b) storing a list identifying each of a plurality of server computer
names with a respective machine address in a storage device (100);
(c) converting, with reference to the list, the server computer name
received at step (a) into the machine address of the server computer;
(d) sending the machine address identified at step (c) to the client
computer;

the method being 
characterised by
 the steps of: 

(e) employing decision logic (120) to study the server computers
whose machine addresses are associated with each server computer name at

predetermined intervals having regard to predetermined test criteria, in
order to select one of the server computers for present assignment to the

respective server computer name; and
(f) updating the list by associating the machine address for the
server computer selected by the decision logic with a particular server

computer name which is a generic server computer name in the list
corresponding to a plurality of server computers residing in said network;

   whereby when a client computer specifies the generic server computer
name at step (a), it receives the machine address of the server computer

identified by the decision logic.
A method as claimed in Claim 9 further comprising the steps of:

copying the list from the storage device to a piece of memory
accessible at the conversion step (c);
repeating, in response to the updating of the list at step (f), the
copying step to ensure that the updated list is copied into the piece of

local memory.
A method as claimed in claim 9 or claim 10, wherein the predetermined
intervals are set by a user of the system.
A method as claimed in any of claims 9 to 11, wherein the
predetermined test criteria are set by a user of the system.
A method as claimed in any of claims 9 to 12, wherein the user can
limit the number of server computers which the decision logic studies.
A method as claimed in any of claims 9 to 13, wherein a plurality of
generic names are used, each one having a number of server computers whose

machine addresses are associated with that generic name, the decision logic
employing different sets of predetermined test criteria for each generic

name.
A method as claimed in Claim 14, wherein one or more of the server
computers are associated with a plurality of the generic names.
</CLAIMS>
</TEXT>
</DOC>
