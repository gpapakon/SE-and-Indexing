<DOC>
<DOCNO>EP-0653707</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Error handling in memory subsystem.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1110	G06F1110	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A computer system includes a CPU, a bus, and add-on memory. The 
CPU has parity generation and detection capabilities but does not 

necessarily have error correction capabilities. Error correction 
capabilities are provided in the add-on memory or in association with the 

add-on memory which allows error correction of single bit read errors 
from the add-on memory and also allows for the detection of multiple bit 

read errors and the detection of write errors by byte location of the 
write errors. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FUOCO DANIEL P
</INVENTOR-NAME>
<INVENTOR-NAME>
HERRING CHRISTOPHER M
</INVENTOR-NAME>
<INVENTOR-NAME>
KELLOGG MARK W
</INVENTOR-NAME>
<INVENTOR-NAME>
LENTA JORGE E
</INVENTOR-NAME>
<INVENTOR-NAME>
FUOCO, DANIEL P.
</INVENTOR-NAME>
<INVENTOR-NAME>
HERRING, CHRISTOPHER M.
</INVENTOR-NAME>
<INVENTOR-NAME>
KELLOGG, MARK W.
</INVENTOR-NAME>
<INVENTOR-NAME>
LENTA, JORGE E.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to the handling of errors in data 
being transferred to and from a memory subsystem in a computer system. In the field of personal computers there are a variety of CPU 
systems which can "write to" and "read from" both system memory and add-on 
memory. Included within this variety of systems are systems that have 
various degrees of sophistication vis-a-vis parity checking and error 
correction codes. In the simplest of systems the CPU may merely read and 
write data without any parity checks or without any error correction 
code. However, it is normal that the CPU or its associated components 
have at least the capability of writing parity bits with each byte of 
code during the write cycle and the system be equipped either within the 
CPU or with an additional component the ability to do parity checks on 
data which is read from the add-on memory. In this type of system if an 
error occurs during the write cycle wherein there is either an incorrect 
data bit or an incorrect parity bit, this information is stored in its 
incorrect form; then when it is read back by the CPU on a read cycle, the 
associated parity checking logic will flag an error. Further, with this 
type of system no error correction is included, all that can be done is 
identify the byte in which the data error occurred. Moving up the scale of sophistication, some CPU's or the components 
associated therewith have relatively sophisticated error correcting codes 
(ECC) and these can perform the necessary function of checking for write 
errors and detecting and correcting read errors. The present invention seeks to improve on previous systems and 
accordingly provides in a first aspect, a memory subsystem for a computer 
system having a central processing unit (CPU) to which said memory is 
interconnectable via a system bus said system being configured to write 
data to and read data from said add-on memory as a plurality of data 
bytes constituting data words, and to generate parity bits associated 
with each of said bytes of data the CPU writes to add-on memory and to 
read parity bits associated with data the CPU reads from the add-on 
memory and to regenerate new parity bits and compare said new parity bits 
with said received parity bits to detect data errors on data read from 
the add-on memory, the memory comprising: error correcting code logic to 
identify any byte having a single bit error in the data or its parity bit 
received from the CPU, and to correct all single bit errors on data read  


</DESCRIPTION>
<CLAIMS>
A memory subsystem for a computer system having a central 
processing unit (CPU) to which said memory subsystem is interconnectable 

via a system bus, said system being configured to write data to and read 
data from said memory as a plurality of data bytes constituting data 

words, and to generate parity bits associated with each of said bytes of 
data the CPU writes to memory and to read parity bits associated with 

data the CPU reads from the memory and to regenerate new parity bits and 
compare said new parity bits with said received parity bits to detect 

data errors on data read from the memory, the memory comprising: 
   error correcting code logic to identify any byte having a single 

bit error in the data or its parity bit received from the CPU, and to 
correct all single bit errors on data read from the memory for transfer 

to the CPU; 
   said error correcting code logic including: 

   logic to generate parity bits from the data bytes received from 
said CPU and logic to compare the parity bits received from the CPU with 

said generated parity bits; 
   logic to store said data bytes in a first format in said add-on 

memory when each newly generated parity bit compares with each 
corresponding originally written parity bit and in a second format when 

at least one newly generated parity bit does not compare with a 
corresponding originally written parity bit; 

   logic to correct any single bit error in a data word when the data 
is read out of the memory for transfer to the CPU when the data bytes are 

stored in said first format; and 
   logic to identify any byte on which the corresponding parity bits 

did not compare when the data bytes are read from memory when the data 
bytes are stored in said second format; 

   whereby single bit write errors to memory are identified and single 
bit read errors from memory are corrected. 
A memory subsystem as claimed in claim 1 further comprising:
 

   logic to generate a first condition flag if all parity bits compare 
and a second condition flag when one or more parity bits do not compare. 
A memory subsystem as claimed in claim 1 or claim 2 wherein said 
logic to identify the bytes in which the write error occurred includes 

logic to force a non-parity bit associated with each byte in which a 
write error occurred in the data read from the memory to the CPU. 
A memory subsystem as claimed in any preceding claim wherein said 
logic to correct all single bit errors in said data words include logic 

to indicate all two-bit errors in any data word. 
A memory subsystem as claimed in claim 3 wherein said logic to 

correct all single bit errors includes logic to indicate some error of 
three or more bits in any data read to the CPU. 
An information processing system comprising: 
   a central processing unit (10, 13); and 

   a memory subsystem as claimed in any of claims 1 to 5, 
interconnected to the central processing unit by means of a bus (12). 
A method for performing error correction in an add-on memory 
subsystem for a computer system having a CPU complex, and a bus for 

interconnecting said CPU complex and said add-on memory, and wherein said 
CPU complex is configured to write data to and read data from said add-on 

memory as a plurality of data bytes constituting data words, and wherein 
said CPU complex is configured to generate parity bits associated with 

each byte of data it writes to add-on memory and read parity bits 
associated with each byte of data it reads from add-on memory, said add-on 

memory including error correcting code to identify the location by 
byte of errors in data to be written to said memory and correct at least 

all single bit errors in data read from said memory; the method 
comprising the steps of: 

   generating parity bits for each byte of data written by said CPU 
complex to said add-on memory; 

   comparing the parity bits generated by the CPU complex with the 
parity bits generated by said error correcting code;

 
   generating a first condition flag if all parity bits compare and a 

second condition flag if one or more parity bits do not compare; 
   generating check bits from said data written by the CPU complex; 

   storing said written data and said generated check bits in either 
said first or said second condition in said add-on memory; 

   reading the data from add-on memory to the CPU means checking and 
correcting the read value of any single bit error in a data word when 

said data is stored in said first condition, and identifying the byte 
location in which any errors were detected in the written data when said 

data is stored in said second condition. 
A method as claimed in claim 7 including the step of forcing a non-parity 
bit associated with each byte in which a write error occurred in 

the data read from the memory to the CPU. 
A method as claimed in claim 7 or claim 8 including the step of 
identifying all two-bit errors in any data word. 
A method as claimed in claim 9 including the step of identifying 
some errors of three or more bits in any data read to the CPU. 
</CLAIMS>
</TEXT>
</DOC>
