<DOC>
<DOCNO>EP-0618517</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Programmable controller and SFC program executing method using the programmable controller
</INVENTION-TITLE>
<CLASSIFICATIONS>G05B1905	G05B2302	G05B19048	G05B1905	G05B2302	G05B19048	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G05B	G05B	G05B	G05B	G05B	G05B	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G05B19	G05B23	G05B19	G05B19	G05B23	G05B19	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The present invention provides a programmable controller for 
executing an SFC program. The programmable controller has a 

memory (3) which stores a step trace program for storing and 
tracing a history of execution statuses of active steps of a 

plurality of blocks (B) of an SFC during execution of the SFC 
program. The step trace program comprises a step trace setting 

subprogram (21) which, through the use of a peripheral device, 
synchronously traces the execution statuses of the active steps 

of the plurality of blocks. The step trace program further 
comprises a step trace execution subprogram (31) which creates 

step trace data based on the execution statuses of active steps 
traced by the step trace setting device. The programmable 

controller further comprises a step trace display device (28) 
for displaying the step trace data. Hence, an operator can 

simultaneously view the execution status of active steps of a 
plurality of blocks of the SFC to thereby determine which 

active steps have been executed at any given time. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MITSUBISHI ELECTRIC CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MITSUBISHI DENKI KABUSHIKI KAISHA
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SAKAMOTO NOBORU
</INVENTOR-NAME>
<INVENTOR-NAME>
SAKAMOTO, NOBORU
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a programmable
controller for executing, as a user program, an SFC
(Sequential Function Chart) program written in an SFC
language, that is, a stepwise advance-type language, and to
a method for executing the SFC program using the
programmable controller.Programmable controllers exist in the art which are
capable of executing SFC programs. In such apparatuses,
the SFC program is typically written into the programmable
controller by a peripheral device.The European patent publication EP-A-0 435 139 discloses a
programmable controller comprising an active step table of
a program currently being run. Active step execution means
are adapted to read the currently active step from the
active step table. A management table stores information on
the respective transitions of one active step to another,
by which the presently active step of the program can
always be determined.The European patent publication EP-A-0 458 132 discloses an
SFC controller for controlling the operation of a machine
which executes a program written in SFC language. The
disclosed controller can generate a reverse operation
sequence chart from the ordinary SFC program sequence,
whereby the machine can be controlled in the reverse
direction. In this manner, the executed steps can be
retraced in reverse.Fig. 14 is a block diagram illustrating another programmable
controller comprising a CPU 1 for executing the SFC
program, an input/output interface 2 for transferring data
to and from an object to be controlled and a peripheral
device (both not shown), and a microprogram ROM for storing
a microprogram acting as an operating system for
controlling the CPU 1. The programmable controller further
comprises a RAM 4 for storing executed steps during the
execution of the SFC program, a RAM 5 for storing programs,
and common bus 6 for coupling the CPU 1, input/output  
interface 2, microprogram ROM 3, executed step storing RAM
4 and the program storing RAM 5.Fig. 15 illustrates the contents of the microprogram
in microprogram ROM 3. Block execution program 31 controls
and executes all blocks (the blocks will be described later
in detail), active step execution program 32 detects and
executes the active steps of the blocks, and step trace
execution program 33 traces the executed steps. The step
trace execution program 33 comprises trigger step detection
program 34 for detecting whether the executed step is a
trigger step, after-trigger trace count program 35 for
counting the number of traces so that traces are
</DESCRIPTION>
<CLAIMS>
A programmable controller for executing an SFC program
and displaying an execution history of active steps of

a plurality of blocks of an SFC program, comprising:

step trace setting means (24 - 27) comprising
synchronous block-to-block step trace setting means

(24) for synchronously tracing the execution status of
active steps of a specified number of said plurality

of blocks (B) when a trigger step (S) of a
predetermined block is executed; and
step trace execution means (37) comprising synchronous
block-to-block step trace execution means (371) for

synchronously creating step trace data based on said
execution status of said steps traced by said

synchronous block-to-block step trace setting means
(24).
A programmable controller as claimed in Claim 1,
wherein said step trace setting means (24 - 27)

further comprise synchronous group step trace setting
means (25) for grouping the blocks (B) to be

synchronized, setting a trigger step (S) for each
group, and tracing said active steps synchronously for

each of said groups (B) when said trigger step is
executed; and


said step trace execution means (37) further comprise
synchronous group step trace execution means (372) for

synchronously creating said step trace data based on
said execution status of said steps traced by said

synchronous step trace setting means (25).
A programmable controller as claimed in Claim 1 or 2,

wherein said step trace setting means (24 -27) further
comprise joint trigger step trace setting means (26)

for setting trigger steps in certain ones of said
plurality of blocks (B) to be synchronized and tracing

the execution status of said steps (S) of other ones
of said blocks after at least one of said trigger

steps is executed; and
said step trace execution means (37) comprising joint
trigger step trace execution means (373) for creating

said step trace data based on said execution status of
said steps traced by said joint trigger step trace

setting means (26).
A programmable controller as claimed in Claims 1, 2 or
3,


wherein step trace setting means (24 - 27) further

comprise master/slave block joint activation step
trace setting means (27) for identifying one of said

blocks (B) as a master block and at least one other
block (B) as a slave block, setting a trigger step in

said master block, and automatically synchronously
tracing said slave blocks when said trigger step is

executed; and
said step trace execution means (37) further comprise
master/slave block joint activation step trace

execution means (374) for creating said step trace
data based on said execution status of said steps

traced by said master/slave block joint activation
step trace setting means (27).
A programmable controller of any one of the Claims 1
to 4, further comprising step trace display means (28)

for displaying said step trace data.
A programmable controller of any one of the Claims 1
to 5, further comprising:


means (21) for generating and displaying a step trace
menu including step trace menu items (22) indicating

the manner in which said execution history is to be
traced;
means (23) for selecting one of said step trace menu
items (22);
means (37) for creating step trace data of traces of
said active steps based on said selected step trace

menu item; and
means (28) for displaying said step trace data in a
manner indicated by said selected step trace menu

item.
An SFC program execution method for a programmable
controller for displaying an execution history of

active steps of a plurality of blocks of an SFC
program during execution of said SFC program,

comprising the steps of:

a) synchronously tracing the execution status of
said active steps for a specified number of said

plurality of blocks when a trigger step of a
predetermined one of said blocks is executed; and 
b) synchronously creating step trace data based on
said execution status of said active steps.
A method as claimed in Claim 7, wherein said tracing
step (a) further comprises the steps of:


grouping blocks to be synchronized;
setting a trigger step for each group; and
tracing said active steps of said blocks
synchronously for each of said groups when said

trigger step is executed.
A method as claimed in Claim 7, wherein said tracing
step (a) further comprises the step of setting trigger

steps in certain ones of said plurality of blocks to
be synchronized, and tracing the execution of said

steps of other ones of said blocks after at least one
of said trigger steps is executed; and


said creating step (b) creates said step trace data
based on said execution status of said steps traced

after said at least one of said joint trigger steps is
executed.
A method as claimed in Claim 7, wherein aid tracing
step (a) further comprises the steps of:


identifying one of said blocks as a master block and
at least one of said blocks as a slave block; and
identifying a trigger step in said master block; 
wherein active steps in said slave blocks are
automatically synchronously traced when said trigger

step is executed; and
said creating step (b) creates trace data based on
said execution status of said traced steps of said

slave blocks.
A method of Claim 7, further comprising:

displaying a step trace menu (21) including step trace
menu items (22) indicating the manner in which said

history is to be traced;
selecting one of said step trace menu items (22) ; and
displaying data of traces of said active steps in a
manner indicated by said selected step trace menu item

(22).
A method of one of the Claims 7 to 11, further
comprising the step of displaying said step trace

data.
</CLAIMS>
</TEXT>
</DOC>
