<DOC>
<DOCNO>EP-0636256</DOCNO> 
<TEXT>
<INVENTION-TITLE>
SUPERSCALAR RISC PROCESSOR INSTRUCTION SCHEDULING
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F938	G06F938	G06F934	G06F934	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A register renaming system for out-of-order execution of a set of reduced instruction set computer instructions having addressable source and destination register fields, adapted for use in a computer having an instruction execution unit with a register file accessed by read address ports and for storing instruction operands. A data dependance check circuit is included for determining data dependencies between the instructions. A tag assignment circuit generates one or more tags to specify the location of operands, based on the data dependencies determined by the data dependence check circuit. A set of register file port multiplexers select the tags generated by the tag assignment circuit and pass the tags onto the read address ports of the register file for storing execution results.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
SEIKO EPSON CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
SEIKO EPSON CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GARG SANJIV
</INVENTOR-NAME>
<INVENTOR-NAME>
IADONATO KEVIN RAY
</INVENTOR-NAME>
<INVENTOR-NAME>
GARG, SANJIV
</INVENTOR-NAME>
<INVENTOR-NAME>
IADONATO, KEVIN, RAY
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The following are commonly owned, co-pending applications: 
"Semiconductor Floor Plan and Method for a Register Renaming Circuit", 
US-A-5 371 684 ; "High Performance RISC Microprocessor Architecture", 
WO-A-93 01545 ; "Extensible RISC Microprocessor Architecture", 
WO-A-93 01546.  
The disclosures of the above applications are incorporated herein by reference. The present invention relates to superscalar reduced instruction set computers 
(RISC), more particularly, the present invention relates to instruction scheduling 
including register renaming and instruction issuing for superscalar RISC computers. A more detailed description of some of the basic concepts discussed in this 
application is found in a number of references, including Mike Johnson, Superscalar 
Microprocessor Design (Prentice-Hall, Inc., Englewood Cliffs, New Jersey, 1991); 
John L. Hennessy et al., Computer Architecture - A Quantitative Approach" 
(Morgan Kaufmann Publishers, Inc., San Mateo, California, 1990). Johnson's text, 
particularly Chapters 2, 6 and 7 provide an excellent discussion of the register 
renaming issues addressed by the present invention. A major consideration in a superscalar RISC processor is to how to execute 
multiple instructions in parallel and out-of-order, without incurring data errors due to 
dependencies inherent in such execution. Data dependency checking, register  
 
renaming and instruction scheduling are integral aspects of the solution. True dependencies (sometimes called "flow dependencies" or "write-read" 
dependencies) are often grouped with anti-dependencies (also called "read-write" 
dependencies) and output dependencies (also called "write-write" dependencies) into a 
single group of instruction dependencies. The reason for this grouping is that each of 
these dependencies manifests itself through use of registers or other storage 
locations. However, it is important to distinguish true dependencies from the other 
two. True dependencies represent the flow of data and information through a 
program. Anti- and output dependencies arise because, at different points in time, 
registers or other storage locations hold different values for different computations. When instructions are issued in order and complete in order, there is a one-to-one 
correspondence between registers and values. At any given point in execution, a 
register identifier precisely identifies the value contained in the corresponding 
register. When instructions are issued out of order and complete out of order, 
corresponden
</DESCRIPTION>
<CLAIMS>
A register renaming method for performing out-of-order 
execution of a set of computer instructions adapted for 

use in a computer, the computer comprising an instruction 
execution unit with at least one register file (117) 

accessed by read address ports (119) and for storing 
instruction operands, the method comprising the steps of: 


determining data dependencies between instructions in a fixed-advance 
instruction window (102) to produce data dependency 

results; 
storing, in a temporary buffer (116), out-of-order 
execution results in storage locations determined by the 

location of an instruction in said instruction window 
(102); 
generating one or more tags to specify an address in the 
temporary buffer (106) at which said out of order results 

are temporarily stored; and 
outputting a tag in place of a register address for an 
operand of a first instruction if said data dependency 

results indicate that said first instruction is dependent 
on a previous instruction in said instruction window  

 
(102), wherein said tag represents an address of said 

operand in said temporary buffer (116). 
The method of claim 1, wherein said determining step 
further comprises the step of comparing the addresses of 

the source register field of each instruction to the 
address of the destination register fields. 
The method of claims 1 or 2, further comprising the step 
of storing in-order results in the register file (117) 

and the temporary storage means (116). 
The method of one of claims 1 to 3, further comprising 
the step of passing said out-of-order results to the 

register file (117) in-order after execution of the set 
of instructions is completed. 
The register renaming method of one of claims 1 to 4, 
further comprising the step of transferring said 

execution results in said temporary buffer (116) to the 
register file (117) in-order based on the order of 

instruction in the instruction window (101). 
The register renaming method of claim 5, further 
comprising the step of transferring a group of retirable 

instructions from said temporary buffer (116) to said 
register file (117) simultaneously. 
The register renaming method of claim 6, further 
comprising the step of transferring an execution result 

from said temporary buffer (116) to said register file  
 

(117) when all execution results for all prior 
instructions are retirable. 
The register renaming method of one of claims 1 to 7, 
further comprising the step of: 


prioritizing instructions to be issued according to the 
number of different register files (117) furnishing 

operands to the instruction; and 
issuing instructions according to said prioritizing step. 
The register renaming method according to claim 8, 
wherein said prioritizing step assigns a higher priority 

to those instructions having operands furnished from the 
greater number of register files (117). 
A register renaming system for a set of RISC instructions 
in a fixed-advance instruction window (102), adapted for use in a 

computer comprising an instruction execution unit which 
executes the instructions to generate execution results, 

the system comprising: 

data dependence check means (108) for determining data 
dependencies between the instructions in the instruction 

window (102); 
means (122) for assigning instruction tags to the 
execution results of each instruction in the instruction 

window (102) based on the location of each instruction in 
the instruction window (102); and  

 
storage means (116,117) including, 
register file locations (117) for storing retired 
instruction results, and 
temporary storage locations (116) for temporarily storing 
the execution results according to said instruction tags 

prior to completion of all the instructions in the set of 
RISC instructions, wherein said instruction tags 

represent addresses within said temporary storage 
locations (116), 
said tag assignment means (122) receiving data dependency 
results from said dependency check means (108) for 

outputting a tag in place of a register address for an 
operand of a first instruction if said first instruction 

is dependent on a previous one of said instructions in 
said instruction window (102) for said operand. 
The register renaming system of claim 10, further 
comprising multiplexer means (124) for selecting said tag 

for said first instruction when said first instruction is 
to be issued, and for providing said tag to said 

temporary storage locations (116) to retrieve said 
operand. 
The register renaming system of claim 11, further 
comprising an issuer (118), wherein said issuer 

comprises:  
 


means (123) for evaluating an instruction's resource 
requirements; 
means (118) for signalling said multiplexer means (124) 
to select an instruction to issue. 
The register renaming system of one of claims 10 to 12, 
further comprising means for transferring the execution 

results in said temporary storage locations (116) to said 
register file locations (117) in-order based on the order 

of instructions in the instruction window (102). 
The register renaming system of claim 13, wherein said 
means for transferring transfers a group of retirable 

instructions from said temporary storage locations (116) 
to said register file (117) simultaneously. 
The register renaming system of claim 14, wherein said 
means for transferring transfers an execution result for 

an instruction from said temporary storage locations 
(116) to said register file (117) only when all execution 

results for all prior instructions are retirable. 
The register renaming system of one of claims 10 to 15, 
further comprising: 


first means for prioritizing instructions to be issued 
according to the number of different register files (117) 

furnishing operands to the instruction; and  
 
second means, responsive to said first means, for issuing 
instructions according to said priority. 
The system according to claim 15, wherein said first 
means further assigns a higher priority to those 

instructions having operands furnished from the greater 
number of register files. 
</CLAIMS>
</TEXT>
</DOC>
