<DOC>
<DOCNO>EP-0622727</DOCNO> 
<TEXT>
<INVENTION-TITLE>
System for optimizing argument reduction.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F738	G06F738	G06F748	G06F7483	G06F7487	G06F752	G06F7527	G06F7533	G06F7548	G06F1710	G06F1710	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F17	G06F17	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In a processor comprising: 

a) a first block operative to perform pipeline 
ADD/SUB/COMPARE operations on argument mantissa including: 


a first adder (37), 
an aligner (44), 
a first output register (39, TR3M) whose most significant 
bit is the carry-out bit generated by the first adder 

(37), the output of said first block being connected to a 
normalizer (40), 
a leading zero detector/encoder (41), and 
a second output register (23, TR5M), 
b) a second block operative to perform pipeline 
ADD/SUB/COMPARE operations on argument exponents, including 

a second adder (36) and a third output register (38, 

TR3E) whose output is connected to an encoder (43) controlling 
the aligner (44), 
c) a third block operative to perform pipeline MULTIPLY 
operations on argument mantissa including a multiplier 

(22), whose outputs are fed back into the inputs of the 
first adder (37), and 
d) a stacker (35) to pipeline arguments and a memory (24) 
for providing input constant values to respectively first, 

second and third block, 
 
   a system for optimizing argument reduction to a value 

comprised between 0 and a multiple of PI comprising: 

a fourth output register (25, TR5E) being connected to 
the output of the second adder (36), 
means (28) for allowing the encoder (43) to also control 
the normalizer (40), and 
means (26, 27) for allowing the second output register 
(23, TR5M) to shift its content by a number of bits, and 

input the same number of bits from the first adder (37) as 
its most significant bits. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DESROSIERS BERNARD
</INVENTOR-NAME>
<INVENTOR-NAME>
LOUIS DIDIER
</INVENTOR-NAME>
<INVENTOR-NAME>
PINCHON DIDIER
</INVENTOR-NAME>
<INVENTOR-NAME>
STEIMLE ANDRE
</INVENTOR-NAME>
<INVENTOR-NAME>
DESROSIERS, BERNARD
</INVENTOR-NAME>
<INVENTOR-NAME>
LOUIS, DIDIER
</INVENTOR-NAME>
<INVENTOR-NAME>
PINCHON, DIDIER
</INVENTOR-NAME>
<INVENTOR-NAME>
STEIMLE, ANDRE
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to numerical data processors 
in general, and more particularly to a system for optimizing 
argument reduction in these processors. In order to provide greater computing power for those applications 
requiring significant numbers of floating-point 
operations, numerical data processors feature the basic 
floating-point operations such as addition, subtraction, 
multiplication or division. Commonly, these floating-point 
operations are integrated into the data processor silicon 
chip (see for example the 80486 processor from the "INTEL" 
Corporation); alternatively, they are provided in a separate 
numerical data processor so-called mathematical or 
numeric coprocessor (such as the 80387 coprocessor from the 
"INTEL" Corporation, or the 83D87 coprocessor from the 
"CYRIX" Corporation) which cooperates with the main data 
processor to execute the said floating-point operations. In almost all these processors or coprocessors, trigonometric 
functions are approximated by polynomials such as 
Tchebitchev polynomial for Sine and Cosine functions, or 
Pade rational polynomial for the Tangent function. It is 
well-known to the man skilled in the art that the higher 
the degree of the polynomials, the better the accuracy of 
the approximation will be, but also the greater computation 
time (higher number of processor cycles). Therefore, to provide acceptable accuracy within acceptable 
computation time, most processors compute lower degree 
polynomial approximation, but on arguments having an absolute 
value in a limited range (such as 0 to PI/4), after 
reduction of the actual argument for which the trigonometric 
value is required. All known processors however fail to compute argument reduction 
with a good accuracy on a wide range comprised for 
example between 0 and 2E63, and consequently fail to compute 
trigonometric functions for arguments in such a range 
with an equally good accuracy. This is the case in the "CYRIX" 83D87 coprocessor comprising 
both a hardware multiplier array and an independent 
64-bit mantissa Arithmetic Logic Unit (ALU). Trigonometric 
functions are there too evaluated by polynomial approximation  
 
for arguments between 0 and PI/4. Arguments outside 
this range are reduced via a partial remainder operation 
with respect to PI/4, leading to a 5% increase in instruction 
execution time. Accuracy however is very poor as 
shown hereafter: 
Argument range Function Exactness Wrong bits [0;4PI]Sin91%9 Cos91%11 Tan80%9 [2E12;2E13]Sin0.3%21 Cos0.3%21 Tan0%21
</DESCRIPTION>
<CLAIMS>
A system for optimizing argument reduction to a value 
comprised between 0 and a multiple of PI, in a processor 

comprising: 

a) a first block operative to perform pipeline 
ADD/SUB/COMPARE operations on argument mantissa including: 


a first adder (37), 
an aligner (44), 
a first output register (39, TR3M) whose most significant 
bit is the carry-out bit generated by the first adder 

(37), the output of said first block being connected to a 
normalizer (40), 
a leading zero detector/encoder (41), and 
a second output register (23, TR5M), 
b) a second block operative to perform pipeline 
ADD/SUB/COMPARE operations on argument exponents, including 

a second adder (36) and a third output register (38, 
TR3E) whose output is connected to an encoder (43) controlling 

the aligner (44), 
c) a third block operative to perform pipeline MULTIPLY 
operations on argument mantissa including a multiplier 

(22), whose outputs are fed back into the inputs of the 
first adder (37), and 
d) a stacker (31) to pipeline arguments and a memory (24) 
for providing input constant values to respectively first, 

second and third block 
 
   said system being characterized in that it also comprises: 


a fourth output register (25, TR5E) being connected to 
the output of the second adder (36), 
means (28) for allowing the encoder (43) to also control 
the normalizer (40), and 
means (26, 27) for allowing the second output register 
(23, TR5M) to shift its content by a number of bits, and 

input the same number of bits from the first adder (37) as 
its most significant bits. 
System according to claim 1 characterized in that said 
multiple of PI is 1/4. 
</CLAIMS>
</TEXT>
</DOC>
