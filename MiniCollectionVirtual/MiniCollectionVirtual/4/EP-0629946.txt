<DOC>
<DOCNO>EP-0629946</DOCNO> 
<TEXT>
<INVENTION-TITLE>
System and method for enabling before/after method processing in an object oriented system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F940	G06F942	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system for creating before and after behaviour upon invocation of 
a method in an object-oriented system. The framework provides 

metaclasses classes containing methods for dispatching a before method 
and an after method at the time of invocation of each client method in 

subclass instances. Object-oriented system properties of inheritance and 
encapsulation are supported as are derived metaclasses. Derivation 

ensures that the specification syntax for each class does not impact the 
expected result. The combination of explicit before after classes, 

dispatcher class, and derived metaclasses ensures that the system will 
have associative composition. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DANFORTH SCOTT HARRISON
</INVENTOR-NAME>
<INVENTOR-NAME>
FORMAN IRA RICHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
MADDURI HARI HARANATH
</INVENTOR-NAME>
<INVENTOR-NAME>
DANFORTH, SCOTT HARRISON
</INVENTOR-NAME>
<INVENTOR-NAME>
FORMAN, IRA RICHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
MADDURI, HARI HARANATH
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to electronic data processing systems
and more particularly to systems in which processing methods and data are
gathered into objects. Still more particularly, the present invention
relates to object-oriented systems in which special methods may be
processed before and after defined processing methods.The development of application and system software for data
processing systems has traditionally been a time consuming task. The
field of software engineering has attempted to overcome the limitations
of traditional techniques by proposing new, more efficient software
development models. Object-oriented programming has emerged as a
promising technology that will allow rapid development, implementation,
and customization of new software systems.Progress in programming technology can be viewed as being shown by
the increased level of abstraction employed. Programming technology has
progressed through abstractions that grouped ever larger entities.
Assembly language instructions were first gathered into control
structures, and control structures latter gathered in to procedures.
Procedures, in turn, were gathered into abstract data types. Object-oriented
programming can be viewed as providing a higher level of
abstraction of programming entities than these previous techniques.
Object-oriented programming gathers abstract data types into an
inheritance hierarchy. The present invention is directed to a further
abstraction, a metaclass that provides before and after processing for
methods of instances of its instances.Object-oriented programming uses a toolkit of system objects that
can be assembled to perform the required task. Each object has certain
data attributes and processes or methods that operate on that data. Data
is said to be "encapsulated" by an object and can only be modified by the
object methods. Methods are invoked by sending a message to an object
identifying the method and supplying any needed arguments. Object-oriented systems have two important properties in addition
to encapsulation. Firstly, "inheritance" which is the ability to derive
a new object from an existing object and to inherit all properties,
including methods and data structure, from the existing object. The new
object may have certain unique features that are supplied as overrides or
modifications to the existing class. For example, a new subclass needs
to specify only the functions and data that distinguish that class from
the existing more general class. Secondly, "polymorphism" which is the
abili
</DESCRIPTION>
<CLAIMS>
A system for enabling construction of object-oriented classes
implementing before and after behaviour for each dispatch of a defined

method process, said system operating in a computer system having at
least one root class means having data and methods for processing said

data, and wherein said root class means define an object-oriented
framework, the system comprising:


means (220) for systematically and automatically dispatching, from
a dispatcher metaclass, a BeforeMethod and an AfterMethod respectively

before and after dispatching the defined method process, said means for
dispatching being responsive to signalling of a BeforeAfter class means;
BeforeAfter class means (224) for signalling the defined method
process dispatch to said means for dispatching, said BeforeAfter class

means being responsive to before and after behaviour requests, said
BeforeAfter class means being a subclass of said at least one root class

means and an instance of said dispatcher class; and
subclass means (230) for generating before and after behaviour
requests to
 said BeforeAfter class means, said subclass means being a
subclass of said BeforeAfter Class means (224) and being responsive to an

instance invocation of said defined method process.
A method, implemented in a computer system, for enabling
construction of object-oriented classes implementing before and after

behaviour for each dispatch of a defined method process, comprising:

creating a metaclass dispatcher class (220) for automatically and
systematically dispatching a BeforeMethod and an AfterMethod respectively

while executing a user defined method process;
creating a root object defining an object-oriented framework having
at least one class, said at least one class existing as a subclass of and

an instance of said dispatcher class;
creating a BeforeAfter class as an instance of said dispatcher
class and having at least one ParentBeforeAfter class, said BeforeAfter

class causing the execution of BeforeMethod and AfterMethod in response
to said user defined method process; and 
creating a subclass for generating before and after behaviour
requests to said BeforeAfter class, said subclass being a subclass of

said BeforeAfter class and being responsive to an invocation of an
instance of said defined method process.
A method as claimed claim 2 for generating associative object
metaclasses wherein said metaclass dispatcher class (220) is a user

modifiable metaclass, said method further comprising the steps of:

specifying a plurality of defined classes (202,231,234) having data
and methods for operating on said data;
testing said plurality of defined classes (202,231,234) and said
user modifiable metaclass (220) to determine a set of methods required

for executing instances of said defined classes and said user modifiable
metaclass; and
creating a metaclass for executing said set of methods based on
said testing.
The method of claim 2 wherein said BeforeMethod is a trace
operation in said computer and said AfterMethod is a print operation.
</CLAIMS>
</TEXT>
</DOC>
