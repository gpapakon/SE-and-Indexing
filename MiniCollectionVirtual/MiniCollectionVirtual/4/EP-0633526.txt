<DOC>
<DOCNO>EP-0633526</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Language processing system and method therefor
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F945	G06F945	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A language processing system comprises an 
instruction parsing portion parsing instruction statement 

contained in a source program written by a high-level 
language and an assembler language in admixing manner, a 

register information discriminating portion 
discriminating if the instruction statement parsed by the 

instruction parsing portion is a register information 
indicative of a register value corresponding to a 

register operating instruction described by the assembler 
language, an intermediate code generating portion for 

generating an intermediate code of the instruction 
statement, a register information storage portion for 

storing the register information discriminated by the 
register information discriminating portion, a code 

optimizing portion for performing optimization by 
deleting a register operating instruction with respect to 

the register operating instruction code in the 
intermediate code when the register value indicated 

therein is the same as a register value indicated by an 
immediately preceding register information or an 

immediately preceding register operating instruction 
code, and code generating portion for generating a 

machine language code from the intermediate code 
optimized through the code optimization and outputting an 

object code. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
NIPPON ELECTRIC CO
</APPLICANT-NAME>
<APPLICANT-NAME>
NEC CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
MIZUSE HARUMI
</INVENTOR-NAME>
<INVENTOR-NAME>
MIZUSE, HARUMI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to a
language information processing system and a method for
processing a language. More specifically, the invention
relates to a language processing system and a method
therefor to be used for code processing in a high-level
language as a program language for a microcomputer.In general, as program languages for
microcomputers, there is an assembler language describing
in machine language (instruction) level with sufficient
knowledge of the hardware construction of the
microcomputer and high-level languages which performs
description without not requiring extensive knowledge
about the hardware construction.In the high-level language, a compiler system
make parsing of instructions read out from a program and
generates a machine language in order to execute the
program by the microcomputer. At this time, the compiler
system simultaneously generates a machine language for
register operation. Accordingly, the programmer is not
required a knowledge about the type of the registers
provided in the microcomputer and manner of use of the 
registers upon execution of the instructions.On the other hand, an object program is
generated by compiling the program prepared by the high-level
language, it is possible that the instruction codes
for the same process are written in redundant manner.
However, a program of the size in excess of the size of a
ROM installed in the microcomputer cannot run.
Accordingly the object program must be as small as
possible so that the program size should not exceed the
ROM size. Therefore, it becomes necessary to eliminate
the redundant unnecessary instruction codes. Such
process detecting and eliminating the unnecessary
instruction codes is referred to as optimization.In one example of the conventional language
processing system for the high-level language is
illustrated in Fig. 7, in a form of a block diagram. The
conventional language processing system will be discussed
briefly in terms of the shown example with reference to
Fig. 7.The language processing system 702 includes an
instruction parsing portion 703 for reading an
instruction statement of a source program from an
external storage device 701 and parsing therefor, an
intermediate code generating portion 704 for generating a
machine language code (intermediate code) on the basis of
the results of parsing of the instruction statement, an 
intermediate code storage portion 705 for temporarily
storing the intermediate code, an optimizing portion 706
for parsing of the intermediate code and
</DESCRIPTION>
<CLAIMS>
A language processing system comprising:

instruction parsing means (103) for inputting a
source program (101) written by a high-level language and

an assembler language in admixing manner, and parsing
instruction statements contained therein;
intermediate code generating means (105)
for generating an intermediate code of said instruction

statements from the result of parsing of said instruction
parsing means (103);
code optimizing means (108) for performing
optimization by deleting a register operating instruction

described by said high-level language with respect to the register operating instruction code
in said intermediate code when the register value

indicated therein is the same as a register value of the same register name
indicated by an immediately preceding register operating

instruction code;
code generating means (110) for generating a
machine language code from said intermediate code

optimized through the code optimization and outputting an
object code;
register information discriminating means (104) for
discriminating if the instruction statement parsed by

said instruction parsing means is a register information 
indicative of a register value corresponding to a

register operating instruction described by said assembler language;
register information storage means (107) for
storing said register information discriminated by said

register information discriminating means (104); wherein
said code optimizing means (108) performs
optimization by deleting a register operating instruction

with respect to the register operating instruction code
in said intermediate code when the register value

indicated therein is the same as a register value
of the same register name indicated by an immediately preceding register

information or an immediately preceding register
operating instruction code.
A language processing system as set forth in
claim 1, which further comprises:


intermediate code storage means (106) for
storing said intermediate code generated by said

intermediate code generating means (105);
wherein said register information
discriminating means (104) inserts a position information

of said register information to said intermediate code
stored in said intermediate code storage means (106) as the

intermediate code, and stores said register information
in said register information storage means (107) with

establishing correspondence to said position information.
A language processing system as set forth in
claim 1 or 2, which further comprises register value

storage means (109) for storing a register value
indicated by the register operating instruction code in

said intermediate code to be parsed by said code
optimizing means (108) or by said register information.
A language processing system as set forth in
claim 1, which further comprises:


intermediate code storage means (106) for
storing said intermediate code generated by said

intermediate code generating means (105);
register value storage means (109) for storing
a register value indicated by the register operating

instruction code in said intermediate code to be parsed
by said code optimizing means (108) or by said register

information;
wherein said register information discriminating means (104) inserts a position information of said register information to said intermediate code stored in said intermediate code storage means (106) as the intermediate code, and stores said register information in said register information storage means (107) with establishing correspondence to said position information; and
said code optimizing means (108) stores the
register value indicated by said register information

corresponding to said position information of said
register information storage means (107) when said position

information of said register information in said
intermediate code is present, and stores said register

value indicated by said register operating instruction
code to said register value storage means (109) when the 

register value indicated by the register operating
instruction code

in said intermediate
code is different from the register value indicated by

the immediately preceding register value of the same register name or the register
value of the same register name indicated by the immediately preceding register

operating instruction code.
A language processing method comprising the
steps of:


instruction parsing step for inputting a source
program written by a high-level language and an assembler

language in admixing manner, and parsing instruction
statements contained therein;
intermediate code generating step for
generating an intermediate code of said instruction

statements from the result of parsing of said instruction
parsing step;
code optimizing step for performing
optimization by deleting a register operating instruction described by said high-level language

with respect to the register operating instruction code
in said intermediate code when the register value

indicated therein is the same as a register value
of the same register name indicated by an immediately preceding register operating 

instruction code;
code generating step for generating a machine
language code from said intermediate code optimized

through the code optimization and outputting an object
code;
register information discriminating step for
discriminating if the instruction statement parsed by

said instruction parsing step is a register information
indicative of a register value corresponding to a

register operating instruction described by said
assembler language;
register information storage step for storing
said register information discriminated by said register

information discriminating step; wherein
said code optimizing step performs
optimization by deleting a register operating instruction

with respect to the register operating instruction code
in said intermediate code when the register value

indicated therein is the same as a register value
of the same register name indicated by an immediately preceding register

information or an immediately preceding register
operating instruction code.
A language processing method as set forth in
claim 5, which further comprises: 


intermediate code storage step for storing said
intermediate code generated by said intermediate code

generating step;
wherein said register information
discriminating step includes a step for inserting a

position information of said register information to said
intermediate code stored in said intermediate code

storage step as the intermediate code, and storing said
register information in said register information storage

step with establishing correspondence to said position
information.
A language processing method as set forth in
claim 5 or 6, which further comprises a step for storing

a register value indicated by the register operating
instruction code in said intermediate code to be parsed

by said code optimizing step or by said register
information in a register value storage means.
A language processing method as set forth in
claim 5, which further comprises the steps of:


intermediate code storage step for storing said
intermediate code generated by said intermediate code

generating step;
register value storage step for storing a
register value indicated by the register operating 

instruction code in said intermediate code to be parsed
by said code optimizing step or by said register

information;
wherein said register information
discriminating step includes a step for inserting a

position information of said register information to said
intermediate code stored in said intermediate code

storage step as the intermediate code, and storing said
register information in said register information storage

step with establishing correspondence to said position
information; and
said code optimizing step stores the register
value indicated by said register information

corresponding to said position information of said
register information storage step when said position

information of said register information in said
intermediate code is present, and stores said register

value indicated by said register operating instruction
code in said register value storage step when the

register value indicated by the register operating
instruction code

in said intermediate
code is different from the register value indicated by

the immediately preceding register value of the same register name or the register
value of the same register name indicated by the immediately preceding register

operating instruction code.
</CLAIMS>
</TEXT>
</DOC>
