<DOC>
<DOCNO>EP-0619557</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A data processing system and method thereof.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F738	G06F738	G06F748	G06F7483	G06F7506	G06F7544	G06F757	G06F930	G06F930	G06F9302	G06F9302	G06F9318	G06F9318	G06F932	G06F932	G06F938	G06F938	G06F945	G06F945	G06F1516	G06F15173	G06F1576	G06F1578	G06F1580	G06F1716	G06F1716	G06N300	G06N3063	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06N	G06N	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F15	G06F15	G06F15	G06F15	G06F15	G06F17	G06F17	G06N3	G06N3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A data processing system (55) and method thereof includes one or more 
data processors (10). Data processor (10) is capable of performing both vector 

operations and scalar operations. Using a single microsequencer (22), data 
processor (10) is capable of executing both vector instructions and scalar 

instructions. Data processor (10) also has a memory circuit (14) capable of 
storing both vector operands and scalar operands. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MOTOROLA INC
</APPLICANT-NAME>
<APPLICANT-NAME>
MOTOROLA, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GALLUP MICHAEL G
</INVENTOR-NAME>
<INVENTOR-NAME>
GOKE L RODNEY
</INVENTOR-NAME>
<INVENTOR-NAME>
LAWELL TERRY G
</INVENTOR-NAME>
<INVENTOR-NAME>
OSBORN STEPHEN G
</INVENTOR-NAME>
<INVENTOR-NAME>
SEATON ROBERT W JR
</INVENTOR-NAME>
<INVENTOR-NAME>
TOMAZIN THOMAS J
</INVENTOR-NAME>
<INVENTOR-NAME>
GALLUP, MICHAEL G.
</INVENTOR-NAME>
<INVENTOR-NAME>
GOKE, L. RODNEY
</INVENTOR-NAME>
<INVENTOR-NAME>
LAWELL, TERRY G.
</INVENTOR-NAME>
<INVENTOR-NAME>
OSBORN, STEPHEN G.
</INVENTOR-NAME>
<INVENTOR-NAME>
SEATON, ROBERT W. JR.
</INVENTOR-NAME>
<INVENTOR-NAME>
TOMAZIN, THOMAS J.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates in general to data processing, and more 
particularly to a data processing system and method thereof. Fuzzy logic, neural networks, and other parallel, array oriented 
applications are becoming very popular and important in data processing. Most 
digital data processing systems today have not been designed with fuzzy logic, 
neural networks, and other parallel, array oriented applications specifically in 
mind. Thus there are considerable performance and cost benefits to be gained in 
designing digital data processing systems which are especially adapted and 
designed to meet the requirements of fuzzy logic, neural networks, and other 
parallel, array oriented applications. Certain arithmetic operations, such as addition and subtraction, may 
result in overflow in either the positive or negative direction. "Overflow" refers 
to a situation in which the resulting value from the arithmetic operation exceeds 
the maximum value which the destination register can store (e.g. attempting to 
store a result of %100000001 in an 8-bit register). "Saturation" or "saturation 
protection" refers to a method of handling overflow situations in which the value 
in the register is replaced with an upper or lower boundary value, for example 
$FF for an 8-bit unsigned upper boundary value. In general, there are two 
common ways to handle overflow. First, the result may be allowed to roll over, 
i.e. $01 may be stored in the destination register (non-saturating approach). 
Second, the result value may be replaced by either an upper bound value or a 
lower bound value (saturating approach).  A common problem in data processors is the need to perform arithmetic 
computations on data values which are wider, i.e. have more bits, than can be 
accommodated by the available registers and by the available Arithmetic Logic 
Unit (ALU) circuitry. For example, it is not uncommon for a data processor to be 
required to add two 32-bit data values using a 16-bit ALU. An approach was 
needed which would efficiently support saturation protection for extended 
length operations. oriented applications to utilize a multi-dimensional array of integrated circuits. 
Thus, the communications between integrated circuits in fuzzy logic, neural 
networks, and other parallel, array oriented applications is often quite important. In some prior art data processing systems, such as, for example the 
transputer, the communications between integrated circuits is controlled 
interactively by the execution of instructions
</DESCRIPTION>
<CLAIMS>
A data processor (10), comprising: 
   a first port (North (44)/West (50)); 

   a second port (South (48)/East (46)); 
   a first storage circuit for storing a plurality of control values (PCR (52) 

   a second storage circuit (IDR (18)) 
   a first switch circuit (42.1 or 42.2) coupled between the first port and the 

second port, the first switch circuit being in either a conducting mode or a non-conducting 
mode in response to a first one of the plurality of control values (EWS 

bit 72 or NSS bit 74; Table 2.10) and 
   a first tap circuit (40.1 or 40.4) coupled between the first port and the 

second storage circuit, the first tap circuit being in either the conducting mode or 
the non-conducting mode in response to a second one of the plurality of control 

values. 
A data processor, comprising: 
   a first port (North or West) for communicating digital data; 

   a second port (South or East) for communicating digital data; 
   a first storage circuit (PCR) for storing a control value; 

   a second storage circuit (IDR); 
   a first switch circuit (42.1 or 42.2) coupled between the first port and the 

second port, the first switch circuit being in one of a conducting mode and a non-conducting 
mode in response to a first portion of the control value (EWS bit 72 or 

NSS bit 74); and 
   a first tap circuit (40.1 or 40.4) coupled between the first port and the 

second storage circuit, the first tap circuit being in one of the conducting mode 
and the non-conducting mode in response to a second portion of the control 

value (NT bit 70 and WT bit 64). 
A method for communicating digital data in a data processor comprising 
the steps of:

 
   providing a first port (North 44 or West 50) for communicating digital 

data; 
   providing a second port (South 48 or East 46) for communicating digital 

data; 
   providing a first storage circuit (PCR 54)for storing a control value; 

   providing a second storage circuit (IDR 18) capable of storing digital data; 
   coupling a first switch circuit (42.1 or 42.2) between the first port and the 

second port; 
   selecting one of a conducting mode and a non-conducting mode of the 

first switch circuit in response to a first portion of the control value (EWS bit 72 
or NSS bit 74); 

   coupling a first tap circuit (40.1 or 40.4) between the first port and the 
second storage circuit; and 

   selecting one of the conducting mode and the non-conducting mode of the 
first tap circuit in response to a second portion of the control value (NT bit 70 or 

WT bit 64). 
A data processing system (57), comprising: 
   a plurality of data processors wherein each one of the plurality of data 

processors, comprising: 
   a plurality of ports (44, 46, 48, 59) for communicating digital data; 

   a first storage circuit (PCR 52) for storing a control value; 
   a second storage circuit (IDR 18); 

   a plurality of switch circuits (42.1 
&
 42.2), each of the plurality of 
switch circuits being coupled between two of the plurality of ports, each of the 

plurality of switch circuits being in one of a conducting mode and a non-conducting 
mode in response to a first portion of the control value; 

   a plurality of tap circuits (40.1, 40.2, 40.3, 
&
 40.4), each of the 
plurality of tap circuits being coupled between a predetermined one of the 

plurality of ports and the second storage circuit, each of the plurality of tap 
circuits being in one of the conducting mode and the non-conducting mode in 

response to a second portion of the control value (WT bit 64, ST bit 66, ET bit 68, 

&
 NT bit 70); and
 

   a first conductor (61, 63) for coupling one of the plurality of ports of 
a first one of the plurality of data processors to one of the plurality of ports of a 

second one of the plurality of data processors to selectively communicate digital 
data between the first one of the plurality of data processors (10.0) and the 

second one of the plurality of data processors (10.2 or 10.1). 
A data processor, comprising: 
   a first port (North/West); 

   a second port (South/East); 
   a first storage circuit for storing a plurality of control values (PCR); 

   a second storage circuit (IDR); and 
   a first switch circuit coupled between the first port and the second port, 

the first switch circuit being in either a conducting mode or a non-conducting 
mode in response to a first one of the plurality of control values. 
A data processor (10), comprising: 
   a first port (North (28)/West(34)) for communicating digital information; 

   a second port (South (30)/East (32)) for communicating digital 
information; 

   enable means (43, 37 
&
 52) for enabling the data processor to communicate 
digital information, the enable means being coupled to the first port and the 

second port to enable communication of digital information; 
   an internal memory storage circuit (IDR 18), the memory storage circuit 

storing a plurality of data values wherein each of the plurality of data values has 
a corresponding address location, the internal memory storage circuit being 

coupled to both the first port and the second port; and 
   mode selection means (R/S Pin 80) for enabling the data processor to 

communicate in one of a first mode of operation and a second mode of operation, 
wherein: 

   when the data processor is in the first mode (Stop Mode: FIG 1702.2) of 
operation, an external processor (CPU 54) utilizes the first port and the second 

port jointly to access one of the plurality of data values in the internal memory 
storage circuit; and

 
   when the data processor is in the second mode of operation (Run mode: 

FIG. 1702.3), digital information is communicated independently with the first 
port and the second port. 
A method for communicating digital data in a data processor, comprising 
the steps of: 

   selectively enabling the data processor to communicate digital data (Stop 

mode, Run mode); 
   providing a first port (North 28) for communicating digital data; 

   providing a second port (South 30) for communicating digital data; and 
   selectively determining a mode of operation (Stop or Run) of the first and 

second ports, a first mode of operation (Stop) enabling both the first port and the 
second port to communicate digital data with only a host integrated circuit (54.2), 

a second mode of operation (Run) enabling both the first port and the second 
port to communicate digital data with both the host integrated circuit and a non-host 

integrated circuit. 
A data processing system, comprising: 
   a host data processor (54); and 

   a plurality of data processors (10;.15, 10.16, 10.17 
&
 10.18), each of the 
plurality of data processors, comprising: 

   enable means for enabling the data processor to communicate 
digital information; 

   a first port (28) for communicating digital information; 
   a second port (30) for communicating digital information; 

   a third port (34) for communicating digital information; 
   a fourth port (32) for communicating digital information; 

   an internal memory storage circuit (IDR 18), the internal memory 
storage circuit storing a plurality of data values wherein each of the plurality of 

data values has a corresponding address location, the internal memory storage 
circuit being coupled to each of the first, second, third, and fourth ports; and 

   mode selection means (R/S pin 80) for enabling the data processor 
to communicate in one of a first mode of operation and a second mode of 

operation, wherein:
 

   when the data processor is in the first mode of operation, the host 
data processor (54) utilizes the first port and the second port jointly to access one 

of the plurality of data values in the internal memory storage circuit; and 
   when the data processor is in the second mode (RUN) of operation, 

digital information is communicated independently with each of the first, 
second, third, and fourth ports, each of the first, second, third, and fourth ports 

communicating digital information in response to a plurality of control values 
provided by the enable means. 
An integrated circuit (10), comprising: 
   a vector engine (9) capable of executing a vector instruction; 

   a scalar engine (26) capable of executing a scalar instruction; 
   a sequencer (22) for controlling execution of both the vector instruction in 

the vector engine and the scalar instruction in the scalar engine, the sequencer 
being coupled to the vector engine for communicating vector control 

information, the sequencer being coupled to the scalar engine for communicating 
scalar control information; and 

   a shared memory circuit (14) for storing a vector operand and a scalar 
operand, the shared memory circuit being coupled to the vector engine for 

communicating the vector operand, the shared memory circuit being coupled to 
the scalar engine for communicating the scalar operand. 
An integrated circuit (10), comprising: 
   an instruction memory (20) for storing a plurality of instructions, each of 

the plurality of instructions being one of a vector instruction and a scalar 
instruction; 

   a vector engine (9) capable of executing a vector operation in response to 
the vector instruction; 

   a scalar engine (26) capable of executing a scalar operation in response to 
the scalar instruction; 

   a sequencer (22) for controlling execution of both the vector operation in 
the vector engine and the scalar operation in the scalar engine, the sequencer 

being coupled to the vector engine for communicating vector control 
information, the sequencer being coupled to the scalar engine for communicating 

 
scalar information, the sequencer being coupled to the instruction memory for 

receiving a first one of the plurality of instructions; 
   a shared memory circuit (14) for storing a plurality of operands, each of 

the plurality of operands being used during execution of one of the vector and 
scalar operations, the shared memory circuit being coupled to the vector engine 

for communicating a first one of the plurality of operands, the shared memory 
circuit being coupled to the scalar engine for communicating a second one of the 

plurality of operands; and 
   an input data register (18) coupled to the vector engine, the input data 

register storing a plurality of data values. 
A data processor, comprising: 
   input means for receiving a first digital data value (tap-40.1, 40.2, 40.3, or 

40.4); 
   a memory storage circuit (IDR 18) having a plurality of memory storage 

locations, each of the plurality of memory storage locations having a 
corresponding address and selectively storing one of a plurality of digital data 

values, a first memory storage location having a first address and storing the first 
digital data value, the memory storage circuit being coupled to the input means 

for receiving the first digital data value; 
   a pointer register (132) for storing a first pointer value (PTR bits 142) 

which corresponds to the first address, the pointer register being coupled to the 
memory storage circuit; and 

   a mask register (134) for storing a mask value, the mask value (m bits 144) 
indicating a number of memory storage locations which receive and store the 

first digital data value, the mask register being coupled to the memory storage 
circuit. 
A method for storing digital data in a data processor, comprising the steps 
of: 

   receiving a first digital data value; 
   accessing a pointer value from a pointer register (IPR 132), a first pointer 

value corresponding to a first address of a first memory storage location in a 
memory storage circuit (IDR 18);

 
   accessing a mask value from a mask register (ILMR 134), the mask value 

indicating a number of memory storage locations in the memory storage circuit; 
   storing the first digital data value in the first memory storage location in 

the memory storage circuit; and 
   storing the first digital data value in a first plurality of memory storage 

locations in the memory storage circuit, the first plurality of memory storage 
locations corresponding to the number of memory storage locations indicated by 

the mask value. 
A method of stalling execution of an instruction in a data processor, 
comprising the steps of: 

   receiving a vector instruction; 
   decoding the vector instruction to provide a first plurality of control 

signals; 
   accessing a first enable value (Vt bit 110) in a first storage circuit (VPCR bit 

4) in response to a second portion of the first plurality of control signals, the first 
enable value being used to selectively enable participation of a second storage 

circuit (IDR 18) during execution of the vector instruction; 
   accessing a first validity value (Vid bit 114) in a third storage circuit 

(VPCR bit 6) in response to a second portion of the first plurality of control 
signals, the first validity value selectively indicating when a first vector value is 

invalid; 
   asserting a stall signal when both the first enable value enables 

participation of the second storage circuit and the first validity value indicates 
the first vector value is invalid; 

   delaying execution of the vector instruction in the data processor when the 
stall signal is asserted; and 

   completing execution of the vector instruction in the data processor when 
the stall signal is not asserted. 
A data processor, comprising: 
   interface means (Bus 13 or Bus 27) for receiving a vector instruct
ion;
 

   instruction decoding means (19) for decoding the vector instruction to 
provide a first plurality of control values, the instruction decode means being 

coupled to the interface means for receiving the vector instruction; 
   a first memory storage circuit (IDR 18) for storing a first vector value, the 

first vector value being accessed in response to a first portion of the first plurality 
of control values, the first memory storage circuit being coupled to the 

instruction decoding means for receiving the first portion of the plurality of 
control values; 

   a second memory storage circuit (Vt bit 110) for storing a first enable 
value, the first enable value being accessed in response to a second portion of the 

first plurality of control values, the second memory storage circuit being coupled 
to the instruction decoding means for receiving the second portion of the 

plurality of control values; 
   a third memory storage circuit (Vid bit 114) for storing a first validity 

value, the first validity value being accessed in response to a third portion of the 
first plurality of control values, the third memory storage circuit being coupled to 

the instruction decoding means for receiving the third portion of the plurality of 
control values; 

   logic means (116) for generating a stall signal in one of a first and a second 
logic state in response to the first enable value and the first validity value; and 

   execution means (39) for selectively stalling exection of the vector 
instruction in response to a logic state of the stall signal. 
A data processor, comprising 
   interface means (bus 13 
&
 bus 27) for receiving an instruction; 
   instruction decoding means (decode 19) for decoding the instruction to 

provide a plurality of control signals, a first portion of the plurality of control 
signals indicating that the instruction is one of a vector instruction and an 

instruction which uses a scalar value, the instruction decoding means being 
coupled to the interface means for receiving the instruction; 

   a first memory storage circuit (IDR 18) having a plurality of storage 
locations for storing a plurality digital data values, each of the plurality of digital 

data values being one of a scalar value and a portion of a vector value;
 

   a second memory storage circuit (Vt bit 110 in multiple PE's 120) for 
storing a plurality of enable values, each of the plurality of enable values 

corresponding to a predetermined one of the plurality of storage locations in the 
first memory storage circuit, each of the plurality of enable values indicating 

when a corresponding one of the plurality of storage locations is enabled; 
   a third memory storage circuit (Vid bit 114 in multiple PE's 16) for storing 

a plurality of validity values, each of the plurality of validity values 
corresponding to a predetermined one of the plurality of digital data values, each 

of the plurality of validity values indicating when a corresponding one of the 
plurality of digital data values is valid; 

   logic means (116) for generating one of a scalar stall signal (122) and a 
vector stall signal (124), the logic means asserting a scalar stall signal when: 


i) the first portion of the plurality of control signals indicates that the 
instruction uses a scalar value; 
ii) a scalar value is located in the first memory storage circuit; and 
iii) a validity value corresponding to the scalar value indicates that the 
scalar value is invalid; 

   the logic means asserting a vector stall signal when: 
iv) the first portion of the plurality of control signals indicates that the 
instruction uses a vector value; 
v) a portion of a vector value is located in a predetermined storage 
location in the first memory storage circuit; 
vi) an enable value corresponding to the predetermined storage 
location indicates that the predetermined storage location is enabled; and 
vii) a validity value corresponding to the predetermined storage 
location indicates that the portion of the vector value stored in the predetermined 

storage location is invalid; 
 
   stalling means (39) for stalling executing of the instruction when one of the 

scalar stall signal and the vector stall signal is asserted; and 
   execution means (21 or 22) for executing the instruction when both the 

scalar stall signal and the vector stall signal are negated. 
A data processor (10), comprising: 
   storage means (20) for storing a comparison instruction;

 
   an instruction decode circuit (19) for decoding the comparison instruction 

to provide a plurality of control signals (23), the instruction decode circuit 
coupled to the storage means for receiving the comparison instruction; 

   instruction execution means (21) for controlling execution of the 
comparison instruction in response to the plurality of control signals, the 

instruction execution means coupled to the instruction decode circuit for 
receiving the plurality of control signals; 

   a plurality of enabled processing elements (PE's 16) wherein each one of 
the plurality of enabled processing elements stores a data value, each one of the 

enabled plurality of processing elements being coupled to the instruction 
execution means, the instruction execution means selecting each of the plurality 

of enabled processing elements to output a first portion of the data value stored 
therein during execution of the comparison instruction; and 

   a comparison conductor (158) connected to each one of the plurality of 
enabled processing elements for receiving the first portion of the data value 

stored therein, the comparison conductor performing a comparison operation in 
response to execution of the comparison instruction, the comparison conductor 

being in a first logic state when the first portion of the data value provided by at 
least one of the plurality of enabled processing elements is in the first logic state, 

the comparison conductor being in a second logic state when the first portion of 
the data value provided by each of the plurality of enabled processing elements 

is in the second logic state. 
A method of comparing a plurality of data values in a data processor, 
comprising the steps of: 

   receiving a comparison instruction (locmax, colmax, rowmax, locmin, 
colmin, rowmin); 

   decoding the comparison instruction to provide a plurality of control 
signals; 

   determining which of a plurality of processing elements (16) are enabled, 
each processing element of an enabled portion of the plurality of processing 

elements providing a first portion of a data value stored therein to a comparison 
line (158);

 
   providing the comparison line in a first logic state when at least one of the 

enabled portion of the plurality of processing elements provides the first portion 
of the data value stored therein in the first logic state; 

   providing the comparison line in a second logic state when each of the 
enabled portion of the plurality of processing elements provides the first portion 

of the data value stored therein in the second logic state; and 
   selectively modifying a plurality of enable bits (Vt bits 110) in response to a 

logic state of the comparison line, each of the plurality of enable bits 
corresponding to one of the enabled portion of the plurality of processing 

elements. 
A data processing system (57.3), comprising: 
   a plurality of data processors (10.72 through 10.80) arranged in an array, 

each one of the plurality of data processors, comprising: 
   storage means (20) for storing a comparison instruction; 

   an instruction decode circuit (19) for decoding the comparison instruction 

to provide a plurality of control signals, the instruction decode circuit coupled to 
the storage means for receiving the comparison instruction; 

   instruction execution means (21) for controlling execution of the 
comparison instruction in response to the plurality of control signals, the 

instruction execution means coupled to the instruction decode circuit for 
receiving the plurality of control signals; 

   a plurality of enabled processing elements wherein each one of the 
plurality of enabled processing elements stores a data value, each one of the 

plurality of enabled processing elements being coupled to the instruction 
execution means, the instruction execution means selecting the plurality of 

enabled processing elements to output a first bit of the data value stored therein 
during execution of the comparison instruction; 

   a comparison conductor (158) connected to each one of the plurality of 
enabled processing elements for receiving the first bit of the data value stored 

therein, the comparison conductor performing a comparison operation in 
response to execution of the comparison instruction, the comparison conductor 

being in a first logic state when the first bit of the data value provided by at least 
one of the plurality of enabled processing elements is in the first logic state, the 

 
comparison conductor being in a second logic state when the first bit of the data 

value provided by each of the plurality of enabled processing elements is in the 
second logic state; and 

   each one of the plurality of data processors being selectively coupled to an 
adjacent data processor to communicate information, the comparison conductor 

of a first one of the plurality of data processors being coupled to the comparison 
conductor of a second one of the plurality of data processors. 
A method for executing an instruction in a data processor, comprising the 
steps of: 

   receiving the instruction; 
   decoding the instruction to provide a plurality of control signals; 

   accessing a first digital data value from a first storage location; 
   accessing a second digital data value from a second storage location; 

   comparing the second digital data value and the first digital data value to 
determine and select one of a greater value and a lesser value (min, minp, 

max,maxp); and 
   storing the one of the greater value and the lesser value in a destination 

storage circuit. 
A data processor (10), comprising: 
   an instruction storage circuit (20) for storing an instruction; 

   a decoder (19) for decoding the instruction to provide a plurality of control 
signals, the decoder being coupled to the instruction storage circuit for receiving 

the instruction; 
   a first storage circuit (vreg2 or sreg, V[0-7]
 registers 128 or G[0-7] registers 

302) for storing a first digital data value; 
   a second storage circuit (vreg1 or sreg) for storing a second digital data 

value; 
   comparison means (ALU 119 or ALU 304) for comparing the first digital 

data value and the second digital data value, the comparison means having a 
first input coupled to the first storage circuit for receiving the first digital data 

value, the comparison means having a second input for receiving the second 
digital data value, the comparison means having an output for providing a result 

 
which indicates which of the first digital data value and the second digital data 

value is one of a greater value and a lesser value; and 
   selection means (115 or 308) for selectively providing the second digital 

data value to the first storage circuit when the second digital data value is the 
one of the greater and the lesser value, the selection means being coupled to the 

first storage circuit and to the second storage circuit. 
A data processor (10) , comprising: 
   an instruction storage circuit (20) for storing a data processing instruction; 

   instruction execution means (22) for executing a data processing operation 
in response to the data processing instruction, the instruction execution means 

being coupled to the instruction storage circuit for receiving the data processing 
instruction; 

   storage means for storing a plurality of extension values, each of the 
plurality of extension values being used during execution of the data processing 

operation, the storage means being coupled to the instruction execution means 
for communicating each of the plurality of extension values; and 

   modification means (118 (vector) or 306 (scalar)) for conditionally 
modifying each of the plurality of extension values during execution of the data 

processing instruction, the modification means being coupled to the storage 
means for communicating each of the plurality of extension values being 

conditionally modified in response to the data processing instruction. 
A method of executing an arithmetic instruction in a data processor, 
comprising the steps of: 

   receiving the arithmetic instruction having a source operand and a 
destination operand; 

   decoding the arithmetic instruction to provide a plurality of control 
signals; 

   accessing a first extension bit from a first storage location, the first 
extension bit providing a status information value; 

   accessing a second extension bit from a second storage location, the 
second extension bit providing a sign value corresponding to the source operand 

of the arithmetic instruction;
 

   executing an arithmetic operation in response to the plurality of control 
signals, both the first extension bit and the second extension bit being used 

during execution of the arithmetic operation to provide a result; 
selectively modifying the first extension bit to store a modified status information 

value corresponding to the result; and 
   selectively modifying the second extension bit to store a modified sign 

value corresponding to the result. 
A method of executing a comparative instruction in a data processor, 
comprising the steps of: 

   receiving the comparative instruction having a source operand and a 
destination operand; 

   decoding the comparative instruction to provide a first plurality of 
control signals; 

   accessing a first extension bit from a first storage location and a second 
extension bit from a second storage location; 

   comparing the source operand with the destination operand in response 
to the first plurality of control signals, both the first extension bit and the second 

extension bit being selectively used during execution of the comparative 
operation to provide a result; and 

   selectively modifying the first extension bit and the second extension bit to 
indicate a current result of the step of comparing the source operand with the 

destination operand. 
A method of executing a shift instruction in a data processor, comprising 
the steps of: 

   receiving the shift instruction having a source operand; 
   decoding the shift instruction to provide a plurality of control signals; 

   accessing a first extension bit from a first storage location and a second 
extension bit from a second storage location; 

   shifting a shift value into a first bit of the source operand to generated a 
shifted data value, the shift value being determined in response to both the first 

extension bit and the second extension bit; and
 

   selectively modifying the first extension bit to provide a modified first 
extension bit in response to execution of the shift instruction. 
A method for executing a data processing instruction comprising the steps 
of: 

   receiving a data processing instruction; 

   decoding the data processing instruction to provide a plurality of control 
signals (23 or 25); 

   accessing an overflow value (SV bit 214 or VV bit 106, one bit in SPCR reg 
208 or VPCR reg. 102) from a first storage location, the overflow value being 

asserted when the result is not one of a range of data values, the overflow value 
being negated when the result is one of the range of data values; and 

   modifying the result to be equal to a predetermined value when the 
overflow value is asserted. 
A data processor (10), comprising: 
   interface means (20 or CMA 14) for receiving a data processing 

instruction; 
   a sequencer for decoding the data processing instruction to provide a 

plurality of control signals, the sequencer being coupled to the interface means 
for receiving the data processing instruction; 

   instruction execution means (304 
&
 308 or 119 
&
 115) for executing a data 
processing operation in response to the plurality of control signals, the 

instruction execution means providing a result of the data processing operation, 
the instruction execution means being coupled to the sequencer for receiving the 

plurality of control signals; 
   a first storage circuit (one bit in SPCR 208 or VPCR 102) for storing an 

overflow value (SV bit 214 or VV bit 106), the overflow value being asserted 
when the result is not one of a range of data values, the overflow value being 

negated when the result is one of the range of data values; and 
   a first modification circuit (vector 118 or scalar 306) coupled to the first 

storage circuit for receiving the overflow value and coupled to the instruction 
execution means for receiving the result, the first modification circuit modifying 

 
the result to be equal to a predetermined value when the overflow value is 

asserted. 
A method for executing a data processing instruction in a data processor 
(10) having a plurality of processing elements (16), comprising the steps of: 

   receiving the data processing instruction (DADD, DMIN, DMAX, 
DSROT); 

   accessing a downward shift value (#S) in response to the data processing 
instruction (DADD #S, V0); 

   selectively accessing a first data value from a first portion of the plurality 
of processing elements (16), the first portion of the plurality of processing 

elements (16) being determined in response to the downward shift value; 
   transferring the first data value to each of a second portion of the plurality 

of processing elements (16), the second portion of the plurality of processing 
elements (16) being determined in response to the downward shift value; 

   performing a data processing operation using the first data value in each 
of the second portion of the plurality of processing elements (16); and 

   storing a result of the data processing operation in each of the second 
portion of the plurality of processing elements (16). 
A data processor, comprising: 
   an interface circuit (20 or CMA 14) for receiving the data processing 

instruction (DADD, DMIN, DMAX, DSROT); 
   means for accessing (22) a downward shift value in response to the data 

processing instruction, the means for accessing being coupled to the interface 
circuit for receiving the data processing instruction; 

   a plurality of processing elements (16) for storing a plurality of data 
values; 

   means for selectively accessing (115) a first data value from a first portion 
of the plurality of processing elements, the first portion of the plurality of 

processing elements being determined in response to the downward shift value, 
the means for selectively accessing being coupled to the plurality of processing 

elements;
 

   means for transferring (selected ones of mux 310, 312, 314, 316, 318, 320, 
322, 
&
 324) the first data value to each of a second portion of the plurality of 
processing elements, the second portion of the plurality of processing elements 

being determined in response to the downward shift value, the means for 
transferring being coupled to the means for selectively accessing; 

   enable means for enabling (119) each of the second portion of the plurality 
of processing elements to perform a data processing operation using the first 

data value, the enable means being coupled to the plurality of processing 
elements; and 

   a first storage circuit (one of the [x] registers 128) for storing a result of the 

data processing operation in each of the second portion of the plurality of 
processing elements. 
A method of executing an instruction in a data processor (10), comprising 
the steps of: 

   receiving a first instruction; 
   decoding (19) the first instruction to provide a first plurality of control 

signals (part of signals 23); 
   accessing an enable value (Vt bit 110) from an enabled one of a plurality of 

processing elements (16) in response to a first portion of the plurality of control 
signals, the enable value selectively enabling the enabled one of a plurality of 

processing elements to participate in execution of an instruction; 
   accessing a history value (VH bit 112) from the enabled one of a plurality 

of processing elements in response to a second portion of the plurality of control 
signals; and 

   selectively modifying (115, 118 
&
 102) the enable value in response to a 
logic state of the history value. 
A data processor, comprising: 
   storage means (20 or 17) for storing a first instruction; 

   instruction decoding means (19) for decoding the first instruction to 
provide a first plurality of control values (23), the instruction decode means 

being coupled to the storage means for receiving the first instruction; 
   a processing element (16) for storing a digital data value;

 
   a first storage circuit (Vt bits 110) for storing an enable value, the enable 

value corresponding to the processing element, the enable value selectively 
enabling the processing element to participate in execution of an instruction; 

   a second storage circuit (Vh bits 112) for storing a history value, the 
history value corresponding to the processing element, the history value being 

used to selectively modify the enable value; and 
   a modification circuit (118) for selectively modifying the enable value in 

response to a logic state of the history value, the modification circuit being 
coupled to both the first storage circuit and the second storage circuit. 
A method for executing an instruction in a data processor, comprising the 
steps of: 

   receiving the instruction, the instruction having an operand; 
   decoding the instruction to provide a plurality of control signals; 

   accessing a data value stored in a storage location indicated by the 
operand of the instruction in response to the plurality of control signals; 

   adjusting the data value stored in the storage location by an adjust value 
to generate an adjusted data value; 

   asserting an enable value corresponding to the storage location, the enable 
value selectively enabling the storage location to participate in execution of the 

instruction; 
   negating a history value corresponding to the storage location, the history 

value indicating whether the storage location has been used previously in 
execution of a conditional instruction; 

   performing a comparison test to compare the adjusted data value with a 
predetermined value; 

   executing a next instruction when a result of the comparison test is false; 
and 

   skipping execution of the next instruction when a result of the comparison 
test is true. 
A method for executing a repeat instruction in a data processor, 

comprising the steps of: 
i) receiving the repeat instruction at a first address in a program, the 
repeat instruction having a first operand and a second operand; 
ii) decoding the repeat instruction to provide a plurality of control 
signals; 
iii) accessing a data value stored in a storage location indicated by the 
second operand of the repeat instruction in response to the plurality of control 

signals; 
iv) executing the following steps for a preselected number of times, the 
preselected number of times being provided by the second operand of the repeat 

instruction; 
v) sequentially executing a plurality of instructions, a first one of the 
plurality of instructions being at a second address and a last one of the plurality 

of instructions being at a third address, the second address being an address 
following the first address and the third address being based upon the first 

operand of the repeat instruction; 
vi) asserting an enable value corresponding to a storage location 
accessed during execution of the last one of the plurality of instructions, the 

enable value selectively enabling the storage location to participate in execution 
of the one of the plurality of instructions; and 
vii) negating a history value corresponding to the storage location 
accessed during execution of the last one of the plurality of instructions, the 

history value indicating whether the storage location has been used previously in 
execution of a instruction. 
</CLAIMS>
</TEXT>
</DOC>
