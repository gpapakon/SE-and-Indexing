<DOC>
<DOCNO>EP-0639006</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Multiplexed control pins for in-system programming and boundary scan testing using state machines in a high density programmable logic device
</INVENTION-TITLE>
<CLASSIFICATIONS>H03K19173	G06F122	G01R313185	G06F1122	G06F1122	G01R3128	H03K19173	G06F122	G01R3128	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H03K	G06F	G01R	G06F	G06F	G01R	H03K	G06F	G01R	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H03K19	G06F1	G01R31	G06F11	G06F11	G01R31	H03K19	G06F1	G01R31	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A structure and a method to implement in-system 
programming (ISP) and boundary-scan testing in an 

integrated circuit using the same pins to control both 
functions. The SDI, SCLK, MODE and SDO connections 

required for in-system programming and the TDI, TCK, TMS 
and TDO connections required for boundary-scan testing are 

multiplexed such that they are provided from the same four 
pins. An in-system programming enable pin is used to 

control the multiplexing of these pins. 
In an alternative embodiment, both in-system 
programming and boundary-scan testing are performed using 

the same pins and the same state machine. The test logic 
architecture specified in IEEE Standard 1149.1-1990 is 

utilized. To implement the in-system programming 

instructions, the instruction register of Std. 1149.1-1990 
is modified to include private instructions which perform 

the desired programming functions. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
LATTICE SEMICONDUCTOR CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
LATTICE SEMICONDUCTOR CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHAN ALBERT L
</INVENTOR-NAME>
<INVENTOR-NAME>
SHANKAR KAPIL
</INVENTOR-NAME>
<INVENTOR-NAME>
SHEN JU
</INVENTOR-NAME>
<INVENTOR-NAME>
TSUI CYRUS Y
</INVENTOR-NAME>
<INVENTOR-NAME>
CHAN, ALBERT L
</INVENTOR-NAME>
<INVENTOR-NAME>
SHANKAR, KAPIL
</INVENTOR-NAME>
<INVENTOR-NAME>
SHEN, JU
</INVENTOR-NAME>
<INVENTOR-NAME>
TSUI, CYRUS Y
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to the design of integrated
circuits, and in particular, to the design of programmable
logic devices.Unlike a conventional programmable logic device
(PLD), an in-system programmable logic device (ISPLD) can
be reprogrammed in place, i.e. without removal from the
system in which it is deployed. The method of
reprogramming a programmable logic device in place is
known as in-system programming (ISP). The standard pins
utilized in in-system programming include a serial data
input pin (SDI), a serial data output pin (SDO), a select 
mode pin (MODE) and a shift clock pin (SCLK). In-system
programming is discussed in Application Serial No.
07/695,356, filed 05/03/91 and assigned to Lattice
Semiconductor Corporation, which will issue as U.S. Patent
5,237,218 on August 17, 1993.U.S. Patent 5,237,218 allows an in-system
programmable logic device to be implemented using only one
dedicated in-system programming pin (ISP bar). The
additional in-system programming pins (MODE, SCLK, SDI and
SDO) are made available by multiplexing pins which are
used as functional pins (such as input pins) when not in
in-system programming mode. The in-system programming is
controlled by an instruction-based state machine. An
instruction set is provided to control the in-system
programming activities.In integrated circuit testing, a technique called
"boundary scan" has been developed in recent years. On
February 15, 1990, the Institute of Electrical and
Electronics Engineers (IEEE) approved standard 1149.1-1990.
This standard defines a standard test logic
architecture for implementing boundary scan functions
which can be included in an integrated circuit for the
purpose of testing the integrated circuit. The test
architecture is defined to include a test access port
(TAP) having connections for a test clock pin (TCK), a
test mode select pin (TMS), a test data input pin (TDI) 
and a test data output pin (TDO). The test architecture also includes a
TAP controller (boundary-scan state machine). The state diagram of the
TAP controller is shown in Fig. 1. Finally, the test architecture
includes an instruction register and a group of test data registers. The
test data registers include at least a bypass register and a boundary-scan
register. A block diagram of the test logic is illustrated in Fig.
2.FR-A-2 643 992 as well as P. Thorel et al. "Implementing
boundary-scan and pseudo-random BIST in an asynchronous transfer mode
switch.", IEEE International Test Conference 1991, paper 5,2 & XP
000272243 disclose both
</DESCRIPTION>
<CLAIMS>
An in-system programmable logic device comprising a common
interface for accessing boundary scan testing and in-system programming

functions,
having a first state and a second

state, said first state enabling in-system programming of said device and
said second state enabling a boundary-scan test function of said device,

said in-system programmable logic device further comprising:

a first pin (603) for receiving a mode input signal (MODE)
for performing in-system programming

in said first state, said first pin (603) receiving a test mode select
signal (TMS) for performing a boundary-scan test function

in said second state;
a second pin (604) for receiving a serial data input signal
(SDI) for performing in-system programming

in said first state, said second pin (604) receiving a test data
input signal (TDI) for performing a boundary-scan test function

in said second state;
a third pin (602) for receiving a shift clock signal (SCLK)
for performing in-system programming

in said first state, said third pin (602) receiving a test clock signal
(TCK) for performing a boundary-scan test function

in said second state; and
a fourth pin (605) for providing a serial data output (SDO)
signal for performing in-system programming

in said first state, said fourth pin (605) providing a test data
output (TDO) signal for performing a boundary-scan function

in said second state, further 
characterized in
that
said first and second states are instruction-based, and 
in that

said common interface comprises a common state machine 
(610) for performing both in-system programming of said device and

boundary-scan testing said device, said state machine executing an
instruction set including an instruction for an in-system programming

function and an instruction for a boundary-scan testing function.
The in-system programming logic device of claim 1, wherein
said common interface distinguishes boundary-scan testing and in-system

programming functions using a control signal protocol applied to a set of
pins of said common interface.
The in-system programmable logic device of claim 1, wherein
said common interface invokes an in-system programming state machine (16)

to perform in-system programming functions and a boundary-scan state
machine (18) to perform boundary scan testing functions.
The in-system programmable logic device of claim 3, wherein
said state machine uses an instruction register (612), said instruction

register (612) providing an instruction to perform said in-system
programming of said device.
The in-system programmable logic device of claim 4,
wherein said state machine further comprises,

   an address shift register (622);

   a data shift register (623);

   a GLB register (624); and

   an input/output register (625);

   wherein said address shift register (622), said data shift
register (623), said GLB register (624) and said input/output register

(625) receive said instructions from said instruction register (612).
The in-system programmable logic device of claim 3, 4 or 5,
wherein said state machine meets the requirements of IEEE Standard

1149.1-1990.
A method for controlling an in-system programmable logic
device comprising the steps of:


providing a common interface for accessing boundary scan 
testing and in-system programming functions; and
invoking through said common interface alternatively said
boundary-scan testing functions and said in-system programming functions.

according to instruction received via said common interface,
wherein said step of invoking further comprises the steps of:


invoking a first state and
a second state of said device;
accessing an in-system programming function of said device
in said first state; and
accessing a boundary-scan test function of said device
in said second state, said method further

comprising the steps of:

utilizing a signal on a first pin (603) as a mode input
signal (MODE) for in-system programming

in said first state and utilizing said signal on said first pin (603)
as a test mode select signal (TMS) for boundary-scan testing

in said second state;
utilizing a signal on a second pin (604) as a serial data
input signal (SDI) for in-system programming

in said first state and utilizing said signal on said second
pin (604) as a test data input signal (TDI) for boundary-scan testing

in said second state;
utilizing a signal on a third pin (602) as a shift clock
signal (SCLK) for in-system programming

in said first state and utilizing said signal on said third pin (602)
as a test clock signal (TCK) for boundary-scan testing

in said second state; and
utilizing a signal on a fourth pin (605) as a serial data
output signal (SDO) for in-system programming

in said first state and utilizing said signal on said fourth
pin (5) as a test data output signal (TDO) for boundary-scan testing 

in said second state, wherein the method is
further 
characterized in that
 said first and second states are instruction-based and said step of providing a common interface
comprises the step of providing a state machine (610) for performing both

boundary-scan testing and in-system programming, said state machine
executing instructions from an instruction set including an instruction

for a boundary scan testing function and an instruction for an in-system
programming function.
The method of claim 7, wherein said step of providing a
common interface comprises the steps of:


providing an in-system programming state machine (16) to
perform in-system programming functions; and
providing a boundary-scan testing state machine (18) to
perform boundary-scan testing functions.
The method of claim 7, wherein said step of providing a
common interface provides an interface distinguishing boundary-scan

testing and in-system programming functions according to a control signal
protocol applied to a set of control pins of said interface.
The method of claim 9, further comprising the step of
loading an instruction register (612) in accordance with said state

machine (610) to provide instructions to perform said in-system
programming.
The method of claim 9, wherein said state machine is a
boundary-scan state machine in accordance with IEEE Standard 1149.1-1990.
</CLAIMS>
</TEXT>
</DOC>
