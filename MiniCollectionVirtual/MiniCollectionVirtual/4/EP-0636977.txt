<DOC>
<DOCNO>EP-0636977</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and apparatus for detection of computer viruses
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1126	G06F2100	G06F1126	G06F100	G06F2100	G06F100	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F21	G06F11	G06F1	G06F21	G06F1	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A behavior analyzing antivirus program detects viral 
infection of a target program by emulating the execution of 

the target program and analyzing the emulated execution to 
detect viral behavior. The antivirus monitor program contains 

both variables corresponding to the CPU's registers and 
emulation procedures corresponding to the CPU's instructions. 

The target program is loaded into memory and its execution is 
emulated by the antivirus monitor program. Intelligent 

procedures contained in the monitor program are given control 
between every instruction emulated so as to detect aberrant or 

dangerous behavior in the target program in which case the 
danger of a viral presence is flagged and emulation is 

terminated. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
CHAMBERS DAVID ALAN
</APPLICANT-NAME>
<APPLICANT-NAME>
CHAMBERS, DAVID ALAN
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHAMBERS DAVID ALAN
</INVENTOR-NAME>
<INVENTOR-NAME>
CHAMBERS, DAVID ALAN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to a method
and apparatus for emulating the execution of a program on a
computer system. In particular, the present invention relates
to monitoring program behavior to detect and terminate harmful
or dangerous behavior in a program. More particularly, the
present invention relates to monitoring program behavior to
detect computer viruses.In recent years, the proliferation of "computer
viruses" (generally designed by rogue programmers either
maliciously or as "pranks") has become an increasingly
significant problem for the owners and users of computer
systems. True computer viruses vary, but they share the
general characteristic that they comprise executable computer
code capable of replicating itself by attachment to and
modification of standard computer files. Such files are then
considered "infected". On most computer systems, viruses are
limited to infecting program applications. When the
application is executed, the virus can then replicate and
attach copies to further application files. Typically, 
viruses also engage in other forms of behavior that are
considered undesirable, such as re-formatting a hard disk.Often grouped with true computer viruses are some
other types of malevolent computer programs: worms and trojan
horses. Worms do not infect other applications but merely
replicate, either in memory or in other storage media. The
harmful effect of worms is generally to reduce system
performance. Worms are of concern for large multiuser
computer systems, but are generally not of concern for
personal computers. Trojan horses are programs that
masquerade as useful programs or utilities; they generally run
only once and have a harmful effect (such as destroying or
damaging the computer system data storage). Trojan horses do
not replicate, and after being run once by a user, the user is
usually alerted to the harmful behavior and will not run the
trojan horse again.In response to the proliferation of computer
viruses, a variety of "antivirus" methodologies and programs
have been developed to detect the presence of infected files.
These antivirus programs can be generally categorized into
groups: behavior interceptors, signature scanners, and
checksum monitors.The earliest antivirus programs were generally of the behavior
interceptor type: they would allow a virus program to execute
in memory but would intercept strategic operating system
function requests made by the computer virus. Such requests
would generally be functions which the virus required to be
perf
</DESCRIPTION>
<CLAIMS>
A computer system configured to monitor the
execution of a target program, said computer system

comprising:

a processing unit having an instruction set;
an instruction emulator for emulating instructions
corresponding to the instruction set;
an entry point access controller for controlling
access to operating system entry points;
a logger for logging improper access by said
instructions to operating system entry points; and
an interrupt tester, wherein said interrupt tester
executes a guinea pig file and tests for modification

of the guinea pig file to determine if a viral
interrupt has been installed.
The computer system of claim 1 wherein said
interrupt tester opens and closes a guinea pig file and

tests for modification of the guinea pig file to
determine if a viral interrupt has been installed.
The computer system of claim 1 wherein said
interrupt tester executes the guinea pig file as a new

target program, thereby creating a second guinea pig
file, and tests for modification of the second guinea

pig file to determine if a replicative viral interrupt
has been installed.
The computer system of claim 1 further
comprising a procedure access controller for

controlling access to procedures during instruction
emulation, wherein said logger logs improper access by

said instructions to procedures.
The computer system of claim 1 further 
comprising a memory access controller for controlling

access by said instructions to memory during
instruction emulation wherein said logger logs improper

access by said instructions to memory.
A computer system configured to monitor the
execution of a target program, said computer system

comprising;

a processing unit having an instruction set;
an instruction emulator for emulating instructions
corresponding to the instruction set;
an entry point access controller for controlling
access to operating system entry points;
a logger for logging improper access by said
instructions to operating system entry points; and
an interrupt tester, wherein said interrupt tester
opens and closes a guinea pig file and tests for

modification of the guinea pig file to determine if a
viral interrupt has been installed.
The computer system of claim 6 wherein said
interrupt tester executes the guinea pig file as a new

target program, thereby creating a second guinea pig
file, and tests for modification of the second guinea

pig file to determine if a replicative viral interrupt
has been installed.
The computer system of claim 6 further
comprising a procedure access controller for

controlling access to procedures during instruction
emulation, wherein said logger logs improper access by

said instructions to procedures.
The computer system of claim 6 further
comprising a memory access controller for controlling

access by said instructions to memory during
instruction emulation wherein said logger logs improper 

access by said instructions to memo
Method, in a computer system, for monitoring
execution of a target program comprising the steps of;


emulating instructions corresponding to the instruction set of the target program;
controlling access to operating system entry points;
logging improper access by said instructions to
operating system entry points; and
monitoring emulation of the target program to
detect a predetermined behaviour indicating presence of

a virus, by:

   opening and closing a guinea pig file and testing
for modification of the guinea pig file to determine if

a viral interrupt has been installed.
Method, in a computer system, for monitoring
execution of a target program comprising the steps of:


emulating instructions corresponding to the instruction set of the target program;
controlling access to operating system entry points;
logging improper access by said instructions to
operating system entry points; and
monitoring emulation of the target program to
detect a predetermined behaviour indicating presence of

a virus, by:

   executing a guinea pig file and testing for
modification of the guinea pig file to determine if a

viral interrupt has been installed.
</CLAIMS>
</TEXT>
</DOC>
