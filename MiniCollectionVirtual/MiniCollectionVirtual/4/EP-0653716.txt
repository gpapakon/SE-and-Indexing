<DOC>
<DOCNO>EP-0653716</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method of verification of a finite state sequential machine
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1900	G06F1750	G06F1750	G06F1900	G06F700	G06F700	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F19	G06F17	G06F17	G06F19	G06F7	G06F7	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The method of computing the reverse image of the transition function Δ(δ, δ') of a 
product finite state machine (PFSM) : Δ⁻¹(E
n-1
) from the set of n-1 equivalent 
states comprises the steps of (a) constructing in a canonical way, from the BDD of 

the graph of the equivalence relation E
n-1
, the BDD of the graph of a total function 
from S into S, named cross-section and denoted C(E
n-1
), (b) constructing from the 
cross-section and vector δ a new vector 


δ
n-1
 = C(E
n-1
) ∘ δ 
 
, and (c) computing the 

equivalent pairs of states with respect to the vector δ
n-1
 to have the pairs of (∀xΔ⁻¹(E
n-1
)). 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
BULL SA
</APPLICANT-NAME>
<APPLICANT-NAME>
BULL S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
TAMISIER THOMAS
</INVENTOR-NAME>
<INVENTOR-NAME>
TAMISIER, THOMAS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to a method of verification of a finite state sequential
machine representing a technical system and more particularly to a method of computing by means of a computer
an equivalence relation of a finite state machine.The design of very large integration circuits requires zero-defect circuits because
prototyping is very expensive to debug circuits. Hardware design and verification
use an abstract description of a circuit realization (hardware device) and a circuit
specification (expected behaviour) in the shape of a finite automaton, called finite
state machine or FSM. The finite state machine is obtained from a description in an
hardware description language (e. g., VHDL) of the circuit realization or the circuit
specification by abstraction tools. The finite state machine performs the
comparison by equivalence or implication of the circuit realization with the circuit
specification. An example of a finite state machine is described in publication (1) :
Workshop on Automating Verification Method for Finite State Systems, Grenoble,
July 1989, "Verification of Synchronous Sequential Machines Based on Symbolic
Execution", Coudert et al. In a finite state machine is used a method of computing
equivalence relations, in particular the observable equivalence. A present
application of observable equivalence in hardware design and verification is
mainly the tool called Auto/Autograph as described for example in Proceedings of
the DIMACS Workshop on Computer-Aided Verification, Vol. 3, DIMACS Series
in Discrete Mathematics and Theoretical Computer Science, 1990, pages 477-492,
Roy et al. "Auto/Autograph". This tool allows a reduction of complexity of
reachable states from the initial states while minimizing the number of state
variables, which results in hardware design in a reduction of the number of state
registers in a circuit.In Figure 1 is a block diagram illustrating the operation of a finite state machine
FSM. It uses three sets and two functions. The three sets comprise a set of inputs.
named I, a set of states, named S, and a set of outputs, named O, and the functions
comprise a transition function δ of the type I x S → S and an output function λ of
the type I x S → O. The three sets I, S and O are finite sets and made of inputs x.
states s and outputs o, respectively. In the machine as illustrated in Figure 1, the
transition function δ uses the set I of inputs as a first input and the set S of states as 
a second input to provide an output to the set S of states. The output faction
</DESCRIPTION>
<CLAIMS>
Method of verification of a finite state sequential machine (FSM) representing a
technical system, said method comprising computing by means of a data

processing machine a set Y defined from two finite sets B and S encoded on
boolean variables, a function δ : B → S expressed by a vector of boolean functions,

and an equivalence relation A on S, the set B being encoded on variables s = s
1
, ...,
s
n
 and x = x
1
, ..., x
k
, in which x can be void, and Qx
i
 designating either ∃x
i
 or ∀x
i
,
so that :


Y = {(s, s') ∈ (∃x
1
, ..., ∃x
k
 B)
2
 | Qx
1
, ..., Qx
k
 [(δ(s, x), δ(s',x)) ∈ A]},

said computation of said set Y comprising the steps of (a) constructing in a
canonical way, from the BDD of the graph of the equivalence relation A, the BDD

of the graph of a total function from S x S, named cross-section and denoted C(A),
(b) constructing from the cross-section and the vector 6 a new vector denoted δ* =

C(A) o δ, and (c) computing the pairs (s, s') such that Q x
1
, ... Qx
k
 .(δ*(s, x) = δ(s',
x)).
Method according to claim 1, characterised in that it is used to compute an
equivalence relation E of the finite state machine (FSM), the equivalence relation E

being defined as the fixpoint of a monotonic suite E
1
, ..., E
n
 = E , the computation
of the equivalence relation E being made by successively constructing the set E
n
 by
use of the reverse image of the set E
n-1
 defined in terms of said set Y and
corresponding to Δ
-1
(E
n-1
).
Method according to claim 1 or 2, characterised in that said step (a) is computed
from the compatible projection in which is used the following definition : let B and

C be two sets and ϕ a relation from B into C and let 
<
 be a total strict order on C,
then the cross-section of ϕ is the partial function C(ϕ) defined as :


C(ϕ): | B → C
| x ↦ min({y|(x, y) ∈ ϕ}).
Method according to claim 1 or 2, characterised in that said step (a) is computed
from the compatible projection in which is used the following definition : let B and

C be two sets and ϕ a relation from B into C and let ≤ be a total order on C, then
the cross-section of (ϕ is the partial function C((ϕ) defined as :


C(ϕ): | B → C
| x ↦ min({y|(x, y) ∈ ϕ})

and the order is selected to be a successive increasing order. 
Method according to anyone of claims 1 to 4, characterised in that in the step (b)
the vector δ* is built from the vector δ and the graph C(A), this graph being

encoded on said variable s = s
1
, ..., s
n
 for the domain and on a variable s' = s'
1
, ...,
s'
n
 for the codomain, and δ* is also built by using the sets D
j
 = ∃s'(¬(s
j
  s'
j
) Λ
C(A)) and performing the reverse image computation uniquely for the sets Dj.
Method according to anyone of claims 2 to 5, characterised in that said step (b)
comprises constructing from said cross-section and said vector 6 a new vector δ
n-1

= C(E
n-1
) o δ.
Method according to claim 6, characterised in that it further comprises a step (c)
of computing the equivalent pairs of states with respect to the vector δ
n-1
 to have
the pairs of (∀xΔ
-1
(E
n-1
)).
</CLAIMS>
</TEXT>
</DOC>
