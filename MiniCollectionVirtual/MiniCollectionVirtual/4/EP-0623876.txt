<DOC>
<DOCNO>EP-0623876</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and apparatus for linking object managers for cooperative processing in an object oriented computing environment.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	G06F946	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Object managers on different computing platforms (14a, 14b) communicate 
with each other in a cooperative manner, while allowing the objects on 

the computing platforms to communicate with each other using a remote procedure 
call which preserves the object oriented characteristics of data independence 

and encapsulation. Preferably, each object manager indicates to the 
other object manager whether local objects have successfully responded to remote 

messages. The object manager can thereby preserve integrity of the object 
oriented system by committing or rolling back the system in response to 

completion of specific tasks or failure to complete specific tasks, even though 
some of the tasks occurred outside the local object oriented computing environment. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SKINNER HAROLD R
</INVENTOR-NAME>
<INVENTOR-NAME>
SKINNER HAROLD R
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to data processing systems and methods and 
more particularly to object oriented computing systems and methods. Object oriented programming systems and processes, also referred to 
as "object oriented computing environments", have been the subject of much 
investigation and interest in state of the art data processing environments. As 
is well known to those having skill in the art, object oriented computing environments 
are composed of a large number of "objects". An object is a data 
structure, also referred to as a "frame", and a set of operations or functions, 
also referred to as "methods", that can access that data structure. The frame 
has many "slots", each of which contains an "attribute" of the data in the slot. 
The attribute may be a primitive (such as an integer or string) or an object 
reference which is a pointer to another object. Each defined object will usually be manifested in a number of "instances". 
Each instance contains the particular data structure for a particular 
example of the object. Each instance of an object is identifiable by an assigned 
"instance identifier". In an object oriented computing environment, data is 
processed by requesting an object to perform one of its methods by sending the 
object a "message" which names an instance of an object and a method of that 
object. The receiving object responds to the message by choosing the method 
that implements the message name, executing this method on the named instance, 
and returning control to the calling mechanism along with the results 
of the method. The sending and receiving of messages is typically controlled 
by an object manager. Object oriented computing environments provide two primary characteristics 
which allow flexible and reusable programs to be developed. These  
 
characteristics are referred to as "encapsulation" and "inheritance". As already 
described, each object frame is encapsulated by its surrounding methods so 
that all access to the frame is handled by the surrounding methods. Data independence 
is thereby provided because an object's data structure is accessed 
only by its methods. The "inheritance" property allows previously written 
programs to be broadened by creating new superclasses and subclasses of objects. 
New objects are described by how they differ from preexisting objects 
so that entirely new programs need not be written to handle new types of data 
or functions. As object oriented computing environments become increasingly used 
to perform complex data
</DESCRIPTION>
<CLAIMS>
An object oriented cooperative data processing system comprising: 
   a first computing platform; 

   a first object oriented computing environment executing on said first 
computing platform, said first object oriented computing environment comprising: 

      a plurality of first objects, each 
including associated data and at least one 

method; and 
      a first object manager including means 

for directing action messages between said 
plurality of first objects; 

   a second computing platform; 
   a second object oriented computing environment executing on said second 

computing platform, said second object oriented computing environment 
comprising: 

      a plurality of second objects, each 
including associated data and at least one 

method; and 
      a second object manager including means 

for directing action messages between said 
plurality of second objects; and 

   means for communicatively connecting said first computing environment 
and said second computing environment; 

   said first object manager further comprising: 
      means for identifying a first action 

message from one of said first plurality of 
objects which is directed to one of said 

second plurality of objects; and 
      means, responsive to said identifying 

means, for transmitting said first action 
message to said one of said second objects 

via said connecting means; 
   said second object manager further comprising:

 
      means for determining whether said one 

of said second objects successfully performed 
said first action message; and 

      means, responsive to said determining 
means, for providing to said first object 

manager an indication of whether said one of 
said second objects successfully performed 

said first action message. 
The object oriented cooperative data processing system of Claim 1 
wherein said second object manager further comprises: 

      second means for identifying a second 
action message from one of said second 

plurality of objects which is directed to one 
of said first plurality of objects; and 

      means, responsive to said second 
identifying means, for transmitting said 

second action message to said one of said 
first objects via said connecting means; and 

wherein said first object manager further comprises: 
      second means for determining whether 

said one of said first objects successfully 
performed said second action message; and 

      second means, responsive to said second 
determining means, for providing to said 

second object manager an indication of 
whether said one of said first objects 

successfully performed said second action 
message. 
The object oriented cooperative data processing system of Claim 1 
wherein said first object manager further comprises means for assigning selected 

ones of said first objects and selected ones of said second objects to a 
unit-of-work; and wherein said second providing means further comprises 

means for providing to said first object manager a unit-of-work identification 
associated with said one of said second objects, along with said indication of 

whether said one of said second objects successfully performed said first action 
message. 
The object oriented cooperative data processing system of Claim 2 
wherein said second object manager further comprises means for assigning selected 

ones of said first objects and selected ones of said second objects to a 
unit-of-work; and wherein said providing means further comprises means for 

providing to said second object manager a unit-of-work identification associated 
with said one of said first objects, along with said indication of whether 

said one of said first objects successfully performed said second action message. 
The object oriented cooperative data processing system of Claim 1 
wherein each of said indications comprises one of a successful completion code 

and an error code. 
A method for providing cooperative processing in an object oriented 
data processing system, said object oriented data processing system comprising: 

   a first computing platform; 
   a first object oriented computing environment executing on said first 

computing platform, said first object oriented computing environment comprising: 
      a plurality of first objects, each 

including associated data and at least one 
method; and 

      a first object manager including means 
for directing action messages between said 

plurality of first objects; 
   a second computing platform;

 
   a second object oriented computing environment executing on said second 

computing platform, said second object oriented computing environment 
comprising: 

      a plurality of second objects, each 
including associated data and at least one 

method; and 
      a second object manager including means 

for directing action messages between said 
plurality of second objects; and 

   means for communicatively connecting said first computing environment 
and said second computing environment; 

   said cooperative processing method comprising the following steps 
performed by said first object manager: 

      identifying a first action message from 
one of said first plurality of objects which 

is directed to one of said second plurality 
of objects; and 

      transmitting said first action message 
to said one of said second objects via said 

connecting means; 
   said cooperative processing method further comprising the following 

steps performed by said second object manager: 
      determining whether said one of said 

second objects successfully performed said 
first action message; and 

      providing to said first object manager 
an indication of whether said one of said 

second objects successfully performed said 
first action message. 
The method of Claim 6 wherein the following steps are also performed 
by said second object manager: 

      identifying a second action message from 
one of said second plurality of objects which 

 
is directed to one of said first plurality of 

objects; and 
      transmitting said second action message 

to said one of said first objects via said 

connecting means; and 
   wherein the following steps are also performed by said first object 

manager: 
      determining whether said one of said 

first objects successfully performed said 
second action message; and 

      providing to said second object manager 
an indication of whether said one of said 

first objects-successfully performed said 
second action message. 
The method of Claim 6 wherein said first object manager further 
comprises means for assigning selected ones of said first objects and selected 

ones of said second objects to a unit-of-work; and wherein said providing step 
comprises the step of providing to said first object manager a unit-of-work 

identification associated with said one of said second objects, along with said 
indication of whether said one of said second objects successfully performed 

said first action message. 
The method of Claim 7 wherein said second object manager further 
comprises means for assigning selected ones of said first objects and selected 

ones of said second objects to a unit-of-work; and wherein said second object 
manager providing step comprises the step of providing to said second object 

manager a unit-of-work identification associated with said one of said first 
objects, along with said indication of whether said one of said first objects 

successfully performed said second action message. 
The method of Claim 6 wherein each of said indications comprises 
one of a successful completion code and an error code. 
</CLAIMS>
</TEXT>
</DOC>
