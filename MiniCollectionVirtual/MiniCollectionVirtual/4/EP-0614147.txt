<DOC>
<DOCNO>EP-0614147</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Software data protection mechanism
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1214	H04L900	H04L900	G06F1214	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	H04L	H04L	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F12	H04L9	H04L9	G06F12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A protection mechanism includes means for taking an 
input binary value and generating a unique key value as 

well as performing the reverse operation of taking a key 
value and generating an input binary value. The 

mechanism includes a scrambler which includes an array 
having a number of multibit container locations for 

storing a unique sequence of random numbers. The 
scrambler forms another binary value by rearranging the 

bits of the input binary value as a function of the 
random number values in addition to altering the states 

of such bits as a function of the random number values 
and the numeric bit position values of sources of the 

input binary bits. The resulting binary value is 
applied to an alphanumeric encoder which converts the 

binary value into a series of alphanumeric characters 
containing a valid key value. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
BULL HN INFORMATION SYST
</APPLICANT-NAME>
<APPLICANT-NAME>
BULL HN INFORMATION SYSTEMS INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HIRSCH THOMAS S
</INVENTOR-NAME>
<INVENTOR-NAME>
HIRSCH, THOMAS S.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention pertains to data protection
systems and, more particularly, to systems useful in
performing software licensing verification.Software is viewed as an important valuable asset
whose use must be protected to the extent possible from
unauthorized copying and distribution. Many companies
protect software through the use of license agreements.
In certain instances, locking mechanisms have been
incorporated into software packages distributed to end
users which prevent the making of copies of such
software after the software is installed into a system.
However, this type of approach has been found
inconvenient to users since it does not allow users to
make necessary copies (e.g. archival copies) to prevent
interruptions in normal business operations. Others
have employed encryption and decryption techniques to
protect unauthorized copying. The overhead in
performing such operations is substantial which reduces
processing system efficiency.Still others have utilized programmed algorithms to
protect against unauthorized access. Such algorithms
can be ascertained from an examination of the program's
source code. Also, decompiler products are available on
the market which can be used to extract the algorithms
from the object code version of the program. Thus, it
has become difficult to ensure the security of such
algorithms in such cases. Further, the above approaches
have been found to be costly to implement, complex or
complicated to use or inconvenient to end users. U.S. Patent No. 4,888,798, entitled "Modular Software Security"
concerns already an apparatus for protecting software
elements in a computer system from unauthorized copying and
distribution by generating user keys from input binary values
and for transforming user keys vice versa into said input binary
values, said apparatus comprising:
an input register for storing a first n-bit binary value
including a predetermined number of bytes, said first binary
value to be converted into a user key;a pseudo random number generator which in response to seed
values generates a repeatable sequence of random numbers
wherein said seed values are arbitrary values which require
safeguarding to prevent duplication of valid keys notwithstanding
disclosure of the protection mechanism;a scrambler having an output register for storing a second
n-bit binary value, and rearranging means for moving each of
said n bits of said first n-bit binary value to a new bit position
of said output register as a function of said repeatable
sequence of random
</DESCRIPTION>
<CLAIMS>
Apparatus for protecting software elements in a computer
system from unauthorized copying and distribution by generating

user keys from input binary values and for transforming
user keys vice versa into said input binary values, said

apparatus comprising:

an input register (12) for storing a first n-bit binary
value including a predetermined number of bytes, said first

binary value to be converted into a user key;
a pseudo random number generator (16) which in response
to a seed value generates a repeatable sequence of random numbers

and which in response to a start value skips a designated
number of random number sequences and wherein said seed

and start values are arbitrary values which require safeguarding
to prevent duplication of valid keys notwithstanding disclosure

of the protection mechanism;
a scrambler (14) having n multibit containers (140-0 ... 140-31)
for storing n multibit random numbers included in said repeatable

sequence;
an output register (18) for storing a second n-bit binary
value; and
rearranging means (140-0 ... 140-31, Fig.1C; Fig.4A) for
moving randomly each of said n bits of said first n-bit binary

value to a new bit position of said output register as a function
of one of said n random numbers stored in a corresponding one

of said containers, and
said scrambler (14) further comprising means (140-0 ...
140-31; Fig.1C; Fig.4A) for exclusive ORing a numeric value for

each bit position of said input register with a random number
value of a corresponding one of said containers to produce a 

least significant bit whose state selects either a complement or
a non-complement of a corresponding output of said rearranging

means (140-0 ... 140-31; Fig.1C; Fig.4A) for moving to said
output register (18);
and an alphanumeric encoder (20) operatively coupled to said
scrambler (14) for receiving said second n bit binary value

to extract overlapping portions (200-1a, 200-1b ... ) of said
second binary value corresponding to groups of m bits from

each byte of said second binary value wherein m has a value
less than the number of bits of a byte and to use said groups

of bits as indexes into a table (204) for referencing different
ones of alphanumeric characters stored in said table to produce

a series of alphanumeric characters representing one of said
user keys.
Method for protecting software elements in a computer
system from unauthorized copying and distribution by generating

user keys from input binary values and for transforming
user keys vice versa into said binary values, said method comprising

the steps of:

(a) storing in an input register a first n-bit binary value
including a predetermined number of bytes, said first binary

value to be converted into a user key;
(b) generating a repeatable sequence of random numbers by
applying a seed value to a pseudo random number generator

which in response to a start value skips a designated number
of random number sequences;
(c) storing n random numbers in a corresponding number of
multibit container locations;
(d) scrambling the bits of said first n-bit binary value
by moving randomly each of said n bits of said first n-bit

binary value to a new bit position of an output register as
a function of one of said n random numbers stored in a corresponding

one of said container locations; 
(e) assigning to said first n-bit binary value a corresponding
number of bit position values defined by the positions

of said input register;
(f) exclusive ORing each of said bit position values with
a corresponding one of said n multibit random numbers to produce

n least significant bits which are used for determining
whether a corresponding bit of said first n-bit binary values

is to be complemented when moving to said new bit position
of said output register;
(g) encoding said second binary value into a series of
alphanumeric characters usable as one of said user keys by

extracting different overlapping portions from said second
binary value wherein said different portions correspond to

groups of m bits extracted from each byte of said second binary
value with m having a value less than the number of bits

of a byte and by using said group of bits as indexes into a
table for referencing different ones of alphanumeric characters

stored in said table to produce said series of alphanumeric
characters.
</CLAIMS>
</TEXT>
</DOC>
