<DOC>
<DOCNO>EP-0628907</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method of running on a computer system an application not designed to run on the computer system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F3033	G06F3023	G06F3023	G06F3048	G06F3048	G06F944	G06F3033	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F3	G06F3	G06F3	G06F3	G06F3	G06F9	G06F3	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method in computing system having an object 
management facility (100) which manages a first 

plurality of objects (201-205, 206-210), each object 
(201-205,206-210) referencing an application (101) 

designed to run in conjunction with the object 
management facility (100), for adapting into the object 

management facility (100) files (849) generated by a 
first application (846) not designed to run in 

conjunction with the object management facility (100), 
the method comprising the steps of: 


(a) placing data files (849) generated by the first 
application (846) into a default directory (858-861); 
(b) upon closing the first application (846), searching 
the default directory (858-861) for files (849) created 

or modified while the first application (846) was open; 
and, 
(c) for every created or modified file (849) found in 
step (b) which is not already linked to an object (201-205, 

206-210), creating a new object (201-205, 206-210) 
referencing the first application (846) and linking the 

new object (201-205, 206-210) to the file (849) found in 
step (b). 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CROW WILLIAM M
</INVENTOR-NAME>
<INVENTOR-NAME>
EHRLICH YITZCHAK
</INVENTOR-NAME>
<INVENTOR-NAME>
CROW WILLIAM M.
</INVENTOR-NAME>
<INVENTOR-NAME>
EHRLICH, YITZCHAK
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the encapsulation of
applications to be run on an object management facility.One problem that has made computer use difficult is
inefficient file management systems. For instance, in a
directory, there cannot exist two files with the same name.Further, there is data incompatibility between data
files which are originated by different computer
applications. Typically, each computer application operates
independently from other computer applications. It is
extremely rare that data from one computer application may be
effectively incorporated into data from another application.
If data is incorporated, it is difficult if not impossible to
modify. Furthermore, once data has been transferred from a
first application to a second application, it is usually
impossible to return the data back to the first application
to be modified.Once an environment has been presented which allows the
effective transfer of data between applications, there
remains the problem of upward compatibility for applications
which were not originally designed to function in the
environment. According to an aspect of the present invention there
is provided a method for a computing system having an object
management facility, elements of which method are provided
in claim 1.In accordance with the preferred embodiment of the
present invention, a computing system having an object
management facility is presented. The object management
facility manages a plurality of objects. Each object
references an application designed to run in conjunction
with the object management facility. The computing system
also includes an encapsulation system which facilitates the
inclusion in the computing system of a first application not
designed to run in conjunction with the object management
facility. The encapsulation facility includes an
encapsulation shell and a shell filter. The encapsulation
shell is referenced by objects as if the encapsulation shell
was an application designed to run in conjunction with the
object management facility. The encapsulation shell also
acts as an interface between the object management facility
and the first application. The shell filter interacts with
the encapsulation shell and upon instruction from the
encapsulation shell is able to intercept commands from a
user to the first application. The shell filter also
forwards to the first application commands generated by the
encapsulated shell.The encapsulated shell may be used for a variety of
applications. In order that the encapsulated
</DESCRIPTION>
<CLAIMS>
A method for a computing system having an object
management facility (100) which manages a first plurality of

objects (201-205, 206-210), each object (201-205, 206-210)
having properties including descriptive data about the

object and a reference to an application designed to run in
conjunction with the object management facility (100), the

application being designed to interact with said objects
(201-205, 206-210) manag
ed by the object management facility
(100), the method being for adapting into the object

management facility (100) files (849) generated by a first
application (846) not designed to run in conjunction with

the object management facility (100) such that said files interact with said
objects (201-205, 206-210) managed by the object management

facility (100), the method comprising the steps of:

(a) providing an encapsulation shell (845) serving as on interface between the first application (846) and the object management facility (100)
(b) placing data files (849) generated or modified by
the first application (846) into a default directory

(858-861);
(c) upon closing the first application (846), said encapsulation shell
searching the default directory (858-861) for files (849)

generated or modified while the first application (846) was
open; and
(d) for every created or modified file (849) found in
step (c) which is not already linked to an object (201-205,

206-210), creating a new object (201-205, 206-210)
referencing the first application and the encapsulation shell (846) and linking the new 

object (201-205, 206-210) to the file (849) found in step
(c).
A method as in Claim 1 additionally comprising the
following step:

(d) for every created or modified file (849) found in step
(b) which is already linked to an object (201-205, 206-210),

if the object (201-205, 206-210) is currently active,
sending a message to the object (201-205, 206-210)

indicating the created or modified file (849) has changed. 
A method as in Claim 1 comprising the steps of:

(b1) placing data files (849) generated by the first
application (846) for use by the first application (846)

into a first default directory (858-861);
(b2) placing data files (849) generated by the first
application (846) for use by second application (101)

into a second default directory (858-861) ;
(c) upon closing the first application (846), said encapsulation shell searching
the first default directory (858-861) for files (849)

created or modified while the first application (846)
was open;
(d) for every created or modified file (849) found in step
(c) which is not already linked to an object (201-205,

206-210), creating a n object (201-205, 206-210),
referencing the first application (846) and the encapsulation shell and linking the

new object (201-205, 206-210) to the file (849) found in
step (b);
(e) upon closing the first application (846), said encapsulation shell searching
the second default directory (858-861) for files (849)

created or modified while the first application (846)
was open;
(f) for every created or modified file (849) found in
step (e) which is not already linked to an object (201-205,

206-210), creating a new object (201-205, 206-210)
referencing the first application (846) and said encapsulation shell and linking the

new object (201-205, 206-210 to the file (849) found in
step (e).
A method as in Claim 3 additionally comprising the
following steps:

(g) for every created or modified file (849) found in
step (c) or step (e) which is already linked to an

object (201-205, 206-210), if the object (201-205, 206-210)
is currently active, sending a message to the

object (201-205, 206-210) indicating the created or
modified file (849) has changed.
</CLAIMS>
</TEXT>
</DOC>
