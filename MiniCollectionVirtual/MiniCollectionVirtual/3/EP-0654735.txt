<DOC>
<DOCNO>EP-0654735</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Apparatus and methods for analyzing a system of processes
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F948	G06F1132	G06F1128	G06F1136	G06F1132	G06F1128	G06F946	G06F946	G06F1136	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F11	G06F11	G06F11	G06F11	G06F11	G06F9	G06F9	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Techniques for analyzing and controlling operation of a system of cooperating 
processes. A library of system calls used by the processes is replaced by a 

dynamically-linked library which performs the system calls and also sends messages 
indicating that the system calls have been performed. The messages are received by 

a display system which responds to the messages by making a graphical display 
showing the current state of the system of processes. The graphical display displays 

the system of processes as a tree. Nodes in the tree represent the processes in the 
system and resources such as files used by the processes; edges in the tree represent 

relationships between processes and other processes or resources. Users may control 
which system calls result in messages, may control the rate at which the display 

system responds to the messages, and may also control execution of the processes. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AT 
&
 T CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AT
&
T CORP.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
FOWLER GLENN STEPHEN
</INVENTOR-NAME>
<INVENTOR-NAME>
KORN DAVID GERARD
</INVENTOR-NAME>
<INVENTOR-NAME>
KOUTSOFIOS ELEFTERIOS
</INVENTOR-NAME>
<INVENTOR-NAME>
NORTH STEPHEN C
</INVENTOR-NAME>
<INVENTOR-NAME>
FOWLER, GLENN STEPHEN
</INVENTOR-NAME>
<INVENTOR-NAME>
KORN, DAVID GERARD
</INVENTOR-NAME>
<INVENTOR-NAME>
KOUTSOFIOS, ELEFTERIOS
</INVENTOR-NAME>
<INVENTOR-NAME>
NORTH, STEPHEN C.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention concerns analysis and control of systems and more nearly concerns
analysis and control of systems made up of processes executing in computers.An important part of building large systems is debugging, that is, detecting,
analyzing, and correcting errors in an implementation of the system. When a
system is implemented by means of programs executing in computers, there
are many tools available for debugging the programs. There are discovery
programs such as cia which help programmers understand how a program is
organized and programs called debuggers, which permit the programmer to
see what happens when a program being debugged is executed. Modern debuggers
permit the programmer to interactively control the execution of the
program being debugged. An example of such a debugger is the GDB debugger,
available from the Free Software Foundation. Debuggers have further 
begun to use graphical interfaces to show information such as the call history
of a program, events generated by distributed-memory parallel programs, or
a trace of a parallel execution of a program. One example of such graphical
interfaces may be found in Adam Beguelin, et al., "Visualization and Debugging
in a Heterogeneous Environment", in: IEEE Computer, June, 1993, pp.
88-95.The discovery programs and debuggers just described are perfectly adequate
for their task; however, modern systems are typically implemented
not just as sets of cooperating subroutines, but rather as sets of cooperating
processes. For purposes of the present discussion, a process may be defined as
the entity in a computer system which actually executes a program for a user.
In many systems, the cooperating processes execute on different computers.
When a system is implemented as a set of cooperating processes, debugging
the system involves not only understanding and debugging the individual
programs executed by the processes, but also understanding and debugging
the cooperation of the processes. The latter tasks cannot be performed by
the program discovery tools and debuggers just described.Present-day computer systems provide only meager resources for debugging
systems made up of cooperating processes. In computer systems employing
the UNIX operating system (UNIX is a registered trademark of UNIX
Systems Laboratories), for example, there is a trace utility which outputs a
list of the calls made by the process to the operating system. There are also
an ofiles utility which tells the user what files a given process has open
and a fuser utility which
</DESCRIPTION>
<CLAIMS>
Analysis apparatus for analyzing operation of a system which is
implemented in a computer and which uses a first library of first routines, the

apparatus comprising:

a second library of second routines which perform the same functions as
the first routines and additionally generate messages indicating changes in the

system;
means for dynamically replacing the executable code for the first library
with the executable code for the second library;
masking means accessible to the second routines which indicate how the
second routines generate the messages, the second routines responding to the

masking means by generating the messages as indicated therein; and
means responsive to the messages for outputting a state of the system.
The analysis apparatus set forth in claim 1 wherein means are provided
for outputting the state of the system as a graphical display of the system.
The analysis apparatus set forth in claim 2 wherein:

   the graphical display of the system comprises displaying means for the system as a directed
acyclic graph wherein entities in the system appear as nodes in the graph and

relationships between entities appear as edges in the graph.
The analysis apparatus set forth in claim 1 further comprising:

means whereby a user of the analysis apparatus provides a control
message therefor;
and wherein
the second library includes a control message receiving routine; and
the second routines are responsive to the control message.
</CLAIMS>
</TEXT>
</DOC>
