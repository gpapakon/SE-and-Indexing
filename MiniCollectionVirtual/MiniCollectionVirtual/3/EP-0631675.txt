<DOC>
<DOCNO>EP-0631675</DOCNO> 
<TEXT>
<INVENTION-TITLE>
USE OF A LANGUAGE HAVING A SIMILAR REPRESENTATION FOR PROGRAMMES AND DATA IN DISTRIBUTED DATA PROCESSING
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F945	G06F944	G06F944	G06F1516	G06F1516	G06F946	G06F954	G06F1300	G06F945	G06F1300	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F15	G06F15	G06F9	G06F9	G06F13	G06F9	G06F13	</CLASSIFICATIONS-FOURTH>
<APPLICANTS>
<APPLICANT-NAME>
BULL SA
</APPLICANT-NAME>
<APPLICANT-NAME>
BULL S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ATTAL DENIS
</INVENTOR-NAME>
<INVENTOR-NAME>
ATTAL, DENIS
</INVENTOR-NAME>
</INVENTORS>
<CLAIMS>
Use of a language having a similar representation for 
programs and data for the distribution of information 

and processes in a network management system 
characterised in that direct symmetrical communication 

is created according to executable messages conveying 
the code to be executed, that is, simultaneously the 

functions to be applied and the data to which the 
functions have to be applied, asynchronous messages 

sent over the network in a free format from one 
interpreter of said language of one machine to another 

interpreter of said language of another machine, also 
permitting a dynamic modification of the code as a 

function of the data manipulated during execution and 
a dynamic migration of different fragments of code on 

the different machines of the management system, 
programs written in said language initiated in various 

ways on one or more machines establishing communication 
links then exchanging data, programs or fragments of 

programs, thus creating a symmetrical co-operative 
network of interpreters in which the burden of the 

different machines is dynamically balanced. 
Use of LISP as a language according to Claim 1. 
Interpreter (INT) of a machine using the language 
according to Claim 1 or 2, characterised in that it is 

constituted mainly of a core (K) for processing the 
program to be executed relying both on internal 

services: evaluator, memory management, and on the code 
executing the primitive functions (SOF) of the 

language, of a documented program interface (API) 
between the core and the code executing the primitive 

functions in order to permit access to a plurality of 
services and facilitate the extension of the language 

and the interpreter to new primitive functions.  
 
Interpreter according to Claim 3, characterised in that 
it comprises a set of functions implementing the 

primitive functions, a set of functions constituted on 
the one hand by functions specific to the language 

having a similar represention for programs and data 
and, on the other hand, by extended functions allowing 

access to the plurality of services. 
Interpreter according to Claim 4, characterised in 

that, when an application requests access to 
information system and network management services, the 

following operations are performed: 

1) initialisation of services, 
2) waiting for action by a user, 
3) transmission of a request for information system 
and network management services, 
4) establishment of a recall procedure for said 
request, 
5) execution of the recall procedure when the 
response to the request arrives, 
6) repetition starting from step 2, until the last 
user request, 
7) end of the application. 
Interpreter according to Claim 4, characterised in 
that, when an application requests access on the one 

hand to management information system and network 
services and, on the other hand, to libraries providing 

components for the development and management of 
graphic user interfaces, the following operations are  

 
performed: 


1) initialisation of the two types of services, 
2) creation and representation of user interface 
components called "widgets", 
3) establishment of recall procedures for user 
interactions, 
4) waiting for action by a user, 
5) transmission of a request, by means of a recall 
procedure, for information system and network 

management services, 
6) establishment of a recall procedure for said 
request, 
7) execution of the recall procedure when the 
response to the request arrives, 
8) repetition starting from step 4 until the last 
user request, 
9) end of the application. 
</CLAIMS>
</TEXT>
</DOC>
