<DOC>
<DOCNO>EP-0646864</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Optimising compiler
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F945	G06F945	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A compiler includes an optimizing function combination table, so 
that a plurality of optimization processings are carried out in accordance 

with different combinations of optimizing functions in the combination 
table. Thus, a corresponding number of output files are outputted 

together with output file information. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
NIPPON ELECTRIC CO
</APPLICANT-NAME>
<APPLICANT-NAME>
NEC CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ONO HIROHIKO
</INVENTOR-NAME>
<INVENTOR-NAME>
ONO, HIROHIKO
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a compiler system for a language
processing program.Conventionally, a computer program is developed in such a manner
that a source program is created by a program developer, and the created
source program is processed by a language processing program (for
example, compiler) so that it it translated into a sequence of machine
language instructions for a microcomputer, and the sequence of machine
language instructions is installed in a memory within the microcomputer
and then, executed by the microcomputer. A source program written in a
high level language is translated by a compiler to be converted into an
object machine language sequence.Referring to Figure 1, there is shown a block diagram illustrating a
conventional compiler system.In a compiler 102A, a source program 101 is analyzed by a syntax
analysis part 103 so that a pre-optimization intermediate code information
104 is prepared. Thereafter, in an optimization part 105A, the
intermediate code information is analyzed for optimization, so that 
optimization analyzed information 107 is created. With reference to the
optimization analyzed information 107, the intermediate code is optimized
so as to create a post-optimization intermediate code information 108. In
a code generator 109A, the optimized intermediate code information 108
is converted into a sequence of machine language instructions, thereby to
prepare an output file 111A.Here, the "optimization" is to modify, eliminate and improve the
intermediate code information, for the purpose of reducing the machine
language instructions outputted in the code generator 109A and to elevate
a performance of executing the obtained instructions. In the modification
and elimination in the process of the optimization, an improved
intermediate code information is required to have the same function as
that of an input intermediate code information. The optimization is
realized in various methods, and one example of the optimization is
described in detail in Chapter 10 of Alfred V. AHO et al., "Compilers :
Principles, Techniques, and Tools", Addison-Wesley Publishing Company
(U.S.A.), 1986.For example, in the optimization for common subexpressions, the
result of an equivalent operation expression is held so as to avoid
re-calculation, so that the size and the execution performance of the
obtained sequence of machine language instructions are improved. The
other optimization includes a loop optimization, a register assignment, a
branch optimization, and others.From a different
</DESCRIPTION>
<CLAIMS>
A compiler system for a language processing program, comprising:

means (103) for analyzing an input source program (101) and converting
the input source program into a first intermediate code information (104);
optimizing means (105) having a plurality of optimizing functions for
optimizing the first intermediate code information into a second intermediate code

information (108); and
a code generator means (109) for converting the second intermediate code
information into a sequence of machine language instructions to prepare an output

file (111); said system being characterized by:

an optimization combination table (106) for holding a plurality of optimizing
functions combinations to the optimizing means;
means for carrying out a plurality of optimization processings in accordance
with different combinations of optimizing functions in said optimization combination

table to optimize the first intermediate code information into a corresponding
number of second intermediate code information; and
the code generator means (109) outputting output file information (110) and
a corresponding number of output files based on the optimizing functions

combinations
A compiler system claimed in Claim 1 wherein said optimizing
means is configured to generate a code during a period in which there

exists the intermediate code optimized in accordance with the optimization
combination.
A compiler system claimed in Claim 1 wherein said optimizing
means (105) is configured to generate a code directly from the intermediate

code optimized in accordance with the optimization combination.
</CLAIMS>
</TEXT>
</DOC>
