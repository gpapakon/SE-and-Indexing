<DOC>
<DOCNO>EP-0640914</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and apparatus for configuring computer programs from available subprograms
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A graphic program configuration system is described that allows a user 
to create complete computer programs. In particular, the present invention improves 

on the prior art by providing a system and process that permits a subprogram to have 
an arbitrary number of outlets that may be defined at program configuration time by 

stimulating the subprogram to create new outlets that facilitate connecting the 
subprogram to other subprograms. In particular embodiments of the invention the 

names for the new outlets may either a) be obtained by virtue of the attempted 
connection of a subprogram to other subprograms or b) be provided direct entry of 

the outlet name by a user of the program configuration system, e.g., by typing the 
outlet names on the keyboard. Additionally, in accordance with an aspect of the 

invention, outlets can be augmented to have one or more constraining parameters 
that can be used to ensure that only appropriate relationships are established by 

connections. Such constraining parameters include: a) number of connections 
allowed, b) types of connections allowed, c) destination object class, and d) 

destination object operations required. Thus, a non-programmer or a person with 
only rudimentary programming skills can configure a collection of one or more 

subprograms into a complete computer program. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
AT 
&
 T CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
AT
&
T CORP.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
HURLEY DANIEL F
</INVENTOR-NAME>
<INVENTOR-NAME>
WEST EARLE H
</INVENTOR-NAME>
<INVENTOR-NAME>
HURLEY, DANIEL F.
</INVENTOR-NAME>
<INVENTOR-NAME>
WEST, EARLE H.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to developing computer programs, such
as so-called "object oriented" programs, by connecting and configuring available
subprograms.Computer programs allow computers to perform many useful tasks.
However, in order to write computer programs, and especially so-called "objected
oriented" computer programs, one must have the necessary computer programming
skills and knowledge of the syntax of a particular programming language.
Developing the necessary programming skills and knowledge requires the
investment of a significant amount of time, and usually money. Hence, it is a goal of
the art to facilitate the development of computer programs by non-computer
programmers or by programmers who only have rudimentary training.One prior art system disclosed in United States Patent No. 5,163,130
issued to Hullot on November 10, 1992 and assigned to NeXT Computer, Inc.,
advanced toward this goal by using graphical user interface techniques for the
development and configuration of a graphical interface for programs that were
already at least partially written. However, such a prior art system did not permit the
development of complete, arbitrary, computer programs from a collection of
subprograms. This is because the prior art system was limited in its ability to handle
outlets.An "outlet" is a data structure or object that provides information that is
needed to create connections between a particular "source" object and one or more
"destination" objects. According to the present state of the art, outlets are defined in
"source" objects that are specifically designed to interwork with other objects. By
virtue of an outlet's name each outlet provides to the user of a program configuration
system an indication of the kind of "destination" object to which a source object
must be connected to function properly. IBM Technical Disclosure Bulletin, vol 36, no [8], August 1993, pages
365-366, discloses a drag-drop technique for connecting source and target objects in an
application builder environment. After a source object is identified, the application
builder provides a handle, which is a meta-symbol in iconic representation, for each
possible action object for the source object. The user may drag a handle and drop on an
object which becomes the target object, to establish the connection for the specific
action.A system and method according to the invention are as set out in the
independent claims.It is a object of this invention to facilitate the creation of computer
programs with a program
</DESCRIPTION>
<CLAIMS>
A system (10,900) for use in configuring a program (130) having at
least two subprograms (133, 134), comprising:


means (901, 903, 904, 905) for sending messages to at least one of said
subprograms,

CHARACTERIZED IN THAT
said means for sending sends messages (20, 21, 30) to a first of said
subprograms to stimulate said first subprogram to create new outlets (1702) that

facilitate connections (501) to other subprograms, each of said outlets being a data
structure or object that provides information that is needed to create connections

between a particular source object and one or more destination objects;
and in that said system includes means (400, 500, 902, 908, 909, 910,
634, 604) responsive to creation of said new outlets for providing an indication that said

new outlets have become available for connection.
The system as defined in claim 1 further including means (20, 21,
423, 510, 901, 903, 904, 905) for establishing connections between said created new

outlets of said first subprogram and at least one other subprogram.
The system as defined in claim 1 wherein said first subprogram
creates said new outlets by using a list of outlet names derived from information

obtained from a second subprogram.
The system as defined in claim 3 wherein the information obtained by
said first subprogram from said second subprogram includes a list of object names from

which said first subprogram creates said new outlets.
The system as defined in claim 1 wherein said first subprogram
creates said new outlets by assembling a list of outlet names using information provided

by a person.
The system as defined in claim 5 wherein said person provides said
information by typing on a keyboard (904). 
The system as defined in claim 3 wherein connections from at least
one of said newly created outlets of said first subprogram and another subprogram are

constrained to conform to at least one specific connection type (420, 520).
The system as defined in claim 7 wherein said specific connection

type includes a limitation on the number of connections of said specific connection type
from said at least one of said newly created outlets of said first subprogram.
The system as defined in claim 7 wherein said specific connection
type includes a requirement that said other subprogram have specific predetermined

characteristics.
A method used in a computer program configuration system to
configure a computer program having at least first and second objects, at least some of

said objects having outlets, said outlets each being a data structure or object that
provides information that is needed to create connections between a particular source

object and one or more destination objects, said outlets having names, the method
comprising the steps of:


sending a message from said first object to said second object;

CHARACTERIZED IN THAT
said message from said first object to said second object requests that
said second object transmit its outlet names to said first object;
and in that said method includes the steps of:
receiving said outlet names from said second object; and
creating an outlet in said first object for each name received from said
second object, said created outlets being for connecting said first object to other objects.
</CLAIMS>
</TEXT>
</DOC>
