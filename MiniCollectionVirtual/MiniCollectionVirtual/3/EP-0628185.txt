<DOC>
<DOCNO>EP-0628185</DOCNO> 
<TEXT>
<INVENTION-TITLE>
DISTRIBUTED DATA PROCESSING SYSTEM.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F946	G06F950	G06F1206	G06F1206	G06F1300	G06F1300	G06F1516	G06F1516	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F12	G06F12	G06F13	G06F13	G06F15	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In a distributed data processing system running multiple applications on the client system resources specific to an application which have no impact on the overall display at the server, are stored in application address space. Resources which have an effect on the overall system and which are managed in the client system are stored in common presentation address in the client system. Resources which have an overall effect and are managed in the server system are stored in the display server system.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ANTHIAS TAF
</INVENTOR-NAME>
<INVENTOR-NAME>
HALLIWELL HARRY
</INVENTOR-NAME>
<INVENTOR-NAME>
MINSHULL JOHN FRANCIS
</INVENTOR-NAME>
<INVENTOR-NAME>
ANTHIAS, TAF
</INVENTOR-NAME>
<INVENTOR-NAME>
HALLIWELL, HARRY
</INVENTOR-NAME>
<INVENTOR-NAME>
MINSHULL, JOHN FRANCIS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
 DISTRIBUTED DATA PROCESSING SYSTEMTechnical FieldThis invention relates to distributed data processing systems. More particularly, this invention relates to the control of resources in distributed data processing systems.Background ArtIn a distributed data processing system such as that schematically illustrated in Figure 1 (the same reference numerals denote the corresponding integers in Figures 2 to 4), a computer user typically interacts with a local terminal 2 (also known as the server system), which is connected to a remote processing system 4 (also known as the client system). The remote processing system 4 may not necessarily be situated any great distance from the local terminal 2, eg a PC workstation and host processor in a local area network where the client processing system and the workstation server are in the same building or possibly even the same office.At the disposal of the computer user are a number of resources such as graphical user interface 6, a graphics tablet 8, a database 10 and a laser printer 12. It is desirable that the user should be able to run more than one application program Al , Î›2, A3 at a time, so called multitasking. At least some of the resources, such as the graphical user interface 6, will be shared between the application programs, whilst others, such as the graphics tablet 8 and database 10, will only be used by one of the applications.Each of the resources has associated with it an area of operating system address space in the computer memory to enable that resource to be controlled and operated. These areas are indicated in Figure 1 by P for the printer, D for the database, W for the graphical user interface and T for the graphics tablet. Each of the application programs execute in separate operating system address space, so as to protect one application program's data from another's. However, in the case of a shared resource all the application programs need to be able t work in some way with the operating system address space for that resource. When a number of application programs are interfacing with a display device, the 

presentation system needs to manage shared resources (such as window geometry, fonts, metafiles, etc) as well as inter-client communication resources (such as window messages, cut-and-paste operations, etc).One possible approach to this problem is that shown in Figure 1. The resources are managed in application processinq mode using shared memory. This provides all the application programs with access to all the resources with a
</DESCRIPTION>
<CLAIMS>
CLAIMS
1. A data processing apparatus having a local processor coupled to a remote processor, for performing distributed multitasking processing with a plurality of application programs executable at said remote processor, and resources including at least one local resource associated with the local processor, at least one shared resource associated with said remote processor and at least one unshared resource associated with said remote processor, wherein said at least one local resource uses address space at said local processor, said at least one shared resource uses protected address space at said remote processor and said at least one unshared resource uses the address space of a corresponding application at said remote processor.
2. A data processing apparatus as claimed in claim 1 wherein the at least one unshared resource associated with the remote processor has no impact on the overall display of the system and is stored in application address space in the remote processor.
3. A data processing apparatus as claimed in any of claims 1 or 2 wherein the at least one shared resource associated with the remote processor has an effect on the overall display of the system and is stored in separate presentation address space common to all applications on the remote system.
4. A data processing apparatus as claimed in any of the preceding claims further comprising means for buffering requests, from the local processor to the remote processor, for access to resources associated with the remote processor.
5. A data processing apparatus as claimed in claim 4 wherein the buffering means buffers the requests from the local processor before sending them to the remote processor.
6. A method of operating a data processing apparatus having a local processor coupled to a remote processor for performing distributed multitasking processing with a plurality of application programs executable at the remote processor, and resources including at least one local resource associated with the local processor, at least one shared 


resource associated with the remote processor and at least one unshared resource associated with the remote processor, the metliod comprising:
storing the local resources at address space at the local processor;
storing the shared resources at protected address space at the remote processor; and
storing the unshared resources at address space of the corresponding application at the remote processor. 

</CLAIMS>
</TEXT>
</DOC>
