<DOC>
<DOCNO>EP-0649094</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Multiprocessor cache hierarchy.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1208	G06F1208	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F12	G06F12	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for managing caches in a multiprocessor having 
multiple levels of caches. An inclusion architecture and procedure are 

defined through which the L2 caches shield the L1 caches from extraneous 
communication at the L2, such as main memory and I/O read/write 

operations. Essential inclusion eliminates special communication from 
the L1 cache to the L2, yet maintains adequate knowledge at the L2, 

regarding the contents of the L1, to minimize L1 invalidations. 
Processor performance is improved by the reduced communication and the 

decreased number of invalidations. The processors and L1 caches practice 
a store-in policy. The L2 cache uses inclusion bits to designate by 

cache line a relationship between the line of data in the L2 cache and 
the corresponding lines as they exist in the associated L1 caches. 

Communication and invalidations are reduced through a selective 
setting/resetting of the inclusion bits and related L2 interrogation 

practice. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SO KIMMING
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG WEN-HANN
</INVENTOR-NAME>
<INVENTOR-NAME>
SO KIMMING
</INVENTOR-NAME>
<INVENTOR-NAME>
WANG, WEN-HANN
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates in general to the memory 
architectures of computers and more particularly, to the interface 
between first level (L1) and second level (L2) caches in a multiprocessor 
architecture involving multiples of caches and cache levels. Computer architectures involving multiple processors and multilevel 
cache architectures related to such multiprocessors have become areas of 
particular interest and technology growth in recent years. The 
prevailing investigations have dealt with two level cache hierarchies and 
the related protocols for operating such caches to maximize individual 
processor performance while satisfying the cache coherence requirements 
of the composite systems. Within such field of investigation, the study of the multilevel 
inclusion properties has proven to be of particular interest. The 
article entitled "Multilevel Cache Hierarchies: Organizations, Protocols 
and Performance" by Baer et al, as appeared in Vol. 6 of the Journal of 
Parallel and Distributed Computing, pp. 451-476 in 1989, considers at 
length not only the implications of a hierarchical system, but more 
particularly the implications of multilevel inclusion. A variation of 
inclusion, the concept which prescribes that the lines of data stored in 
the L2 cache be a superset of the lines stored in the L1 caches supported 
by the L2 cache, is refined through the use of a split directory in the 
article entitled "Extended L2 Directory for L1 Residence Recording", as 
appeared in the IBM Technical Disclosure Bulletin, Vol. 34, No. 8, pp. 
130-133 of January 1992. The extended directory further ensures 
comprehensive inclusion. The use of inclusion bits to selectively enable 
L1 level cache snooping of memory accesses is described in European 
Patent Application No. 91305422.7, published December 18, 1991. The 
prevailing objective of the designs in the various references is to 
define and use a "strong inclusion" architecture in contrast to one 
which provides "weak inclusion". In considering the two extremes of inclusion, a system practising 
"weak inclusion" merely maintains a superset condition between the L2 
cache and associate L1 caches. As such, this technique does not maintain 
at the L2 cache adequate information for the L2 cache to reliably  
 
determine if any of the L1 caches has a line sought by a memory request 
detected at the L2 cache. In contrast, and at the other extreme of 
inclusion, "strong inclusion" mandates that there be comprehensive 
knowledge of the L1 contents and status
</DESCRIPTION>
<CLAIMS>
A data processing system, comprising a plurality of processors (1; 
27, 29): 

   a plurality of first level caches (2; 28, 31) each associated with 
one of the processors and arranged to use a store-in policy for lines of 

data; and 
   one or more second level caches (3; 32), each associated with the 

one or more of the first level caches, for storing supersets of the lines 
of data stored in the or each associated first level cache; characterised 

by 
   means for marking a second level cache line when the line is loaded 

into an associated first level cache and for removing the marking from 
the second level cache line when the line is replaced in the second level 

cache with a line from an associated first level cache; and 
   means for selectively interrogating a first level cache having a 

line corresponding to a marked line in the second level cache responsive 
to a second level cache interrogation of the line. 
A system as claimed in Claim 1, comprising: 
   means for selectively removing a marking from a second level cache 

line upon invalidation of the corresponding line by an associated first 
level cache. 
A system as claimed in Claim 1 or Claim 2, further comprising: 
   means for selectively invalidating a first level cache line upon 

replacement of the corresponding line in the associated second level 
cache. 
A system as claimed in any preceding claim in which: 
   the markings in the second level cache are grouped by cache line 

address. 
A system as claimed in any preceding claim, wherein the marking is 
by inclusion bits. 
A system as claimed in any preceding claim wherein the marking is 
in a directory of the second level cache. 
A method for controlling a hierarchical cache system of a 
multiprocessor, the system having a plurality of first level caches each 

associated with respective processors using a store-in policy for lines 
of data, one or more second level caches, each individually associated 

with a plurality of first level caches for storing supersets of the lines 
of data stored in the associated first level caches, characterised by the 

steps of: 
   marking a second level cache line when loading the corresponding 

line in an associated first level cache; 
   selectively removing a marking from the second level cache line 

when the second level cache line is replaced with a line from an 
associated first level cache; and 

   selectively interrogating a first level cache having a marked line 
responsive to a second level cache interrogation of the corresponding 

line. 
A method as claimed in Claim 7, comprising the step of: 
   selectively removing a marking from a second level cache line upon 

invalidation of the corresponding line by an associated first level 
cache. 
A method as claimed in Claim 7 or Claim 8, further comprising the 
step of: 

   selectively invalidating a first level cache line upon replacement 
of the corresponding line in the associated second level cache. 
A method as claimed in any preceding Claim, comprising:
 

   grouping the markings in the second level cache by cache line 
address. 
</CLAIMS>
</TEXT>
</DOC>
