<DOC>
<DOCNO>EP-0619544</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Object system with derived metaclasses.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for deriving metaclasses of classes of objects 
defined according to traditional subclassing inheritance is disclosed, 

which uses a neutral set of information from which object support is 
enabled for any target language, including support between languages. 

The information defining a new class is parsed and compiled to generate a 
bindings file that is input along with method information to the target 

language compiler to create an object file. The object file is 
thereafter link edited to create an executable program. When this 

program is executed, each defined class of objects is implemented by a 
corresponding object, called a class object, whose parents are determined 

by its definition, and whose class is a metaclass that is automatically 
derived and created at runtime according to the parent classes of the 

class object. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DANFORTH SCOTT HARRISON
</INVENTOR-NAME>
<INVENTOR-NAME>
DANFORTH SCOTT HARRISON
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention generally relates to improvements in object oriented 
applications. More particularly, it relates to deriving a metaclass for 
a new class defined by subclassing in an object oriented system. Among developers of workstation software, object-oriented 
programming (or OOP) is increasingly recognized as an important new 
programming technology. It offers expanded opportunities for software 
reuse and extensibility, with improved programmer productivity when 
compared to conventional software development paradigms. Even so, 
object-oriented technology has not effectively penetrated major 
commercial software products to date. In particular, operating-systems 
have hesitated to embrace the new technology. As with many new programming technologies, the early expressions of 
OOP concepts focused on the creation of new languages and toolkits, each 
designed to exploit some particular aspect. So-called pure 
object-oriented languages, such as Smalltalk, presume a complete run-time 
environment (sometimes known as a virtual machine) because their 
semantics represent a major departure from traditional procedurally 
oriented system architectures. Hybrid languages such as C++, on the 
other hand, require less run-time support but sometimes result in tight 
bindings between programs that provide objects and the client programs 
that use them. Tight binding between object-providing programs and their 
clients often require client programs to be recompiled whenever simple 
changes are made in the providing programs. Examples of such systems are 
found in US Patent 4,885,717; 4,953,080 and 4,989,132. Because different languages and object-oriented toolkits emphasize 
different aspects of OOP, the utility of the resulting software is 
frequently limited in scope. A C++ programmer, for example, cannot 
easily use objects developed in Smalltalk, nor can a Smalltalk programmer 
make effective use of C++ objects. Objects and classes implemented in 
one language simply cannot be readily used from another. Unfortunately, 
when this occurs, one of the major benefits of OOP, the increased reuse  
 
of code, is severely curtailed. Object-oriented language and toolkit 
boundaries become, in effect, barriers to interoperability. As taught in commonly assigned, copending European Patent 
Application, 92310241.2, entitled "The System Object Model Object 
Interface Definition Language" to M.H. Conner et al., a new language 
neutral object oriented programming mechanism called SOM (for System 
Object Model) alleviates
</DESCRIPTION>
<CLAIMS>
A method for deriving a metaclass for a new class defined by 
subclassing at least one parent class, comprising the steps of: 

   executing a set of instructions to construct for the new 
class stored in a memory; 

   deriving a new class metaclass for the new class given both a 
parent class metaclass for the at least one parent class and a 

second metaclass; and, 
   creating the new class in the memory according to the new 

class metaclass. 
A method as claimed in claim 1 wherein the new class metaclass is 
derived from a plurality of parent class metaclasses, and the 

second metaclass is a second parent class metaclass for a second 
parent class from which the new class is subclassed. 
A method as claimed in any preceding claim wherein the second 
metaclass is a defined metaclass for the new class. 
A method as claimed in claim 3 wherein the defined metaclass is an 
implicit metaclass. 
A method as claimed in claim 3 wherein the defined metaclass is an 
explicit metaclass. 
A method as claimed in any preceding claim wherein the deriving 
step further comprises the steps of: 

   determining a list of parent class metaclasses from a 
plurality of parent classes; 

   filtering (1630) the list of parent class metaclasses to 
create a list of covering metaclasses; and 

   deriving (1660) the new class metaclass by subclassing the 
list of covering metaclasses. 
A method as claimed in claim 6 which further comprises the step of 
appending an additional defined metaclass to the list of parent 

class metaclasses. 
A system for deriving a metaclass for a new class derived by 
subclassing at least one parent class comprising: 

   means for executing an object module for the new class stored 
in a memory; 

   means for deriving a metaclass for the new class given on 
both a parent class metaclass for the at least one parent class and 

a second metaclass; and 
   means for creating the new class in memory according to the 

new class metaclass. 
A system as claimed in claim 8 wherein the new class metaclass is 
derived from a plurality of parent class metaclasses, and the 

second metaclass is a second parent class metaclass for a second 
parent class from which the new class is subclassed. 
A system as claimed in claim 8 wherein the second metaclass is a 
defined metaclass for the new class. 
A system as claimed in claim 10 wherein the defined metaclass is an 
implicit metaclass. 
A system as claimed in claim 10 wherein the defined metaclass is an 
explicit metaclass. 
A system as claimed in claim 9 wherein the deriving means further 
comprises: 

   means for determining a list of parent class metaclasses from 
a plurality of parent classes; 

   means for filtering the list of parent class metaclasses to 
create a list of covering metaclasses; and

 
   means for deriving the new class metaclass by subclassing the 

list of covering metaclasses. 
A system as claimed in claim 13 which further comprises the step of 
appending an additional defined metaclass to the list of parent 

class metaclasses. 
</CLAIMS>
</TEXT>
</DOC>
