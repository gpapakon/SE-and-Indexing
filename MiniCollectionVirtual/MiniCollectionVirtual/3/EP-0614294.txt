<DOC>
<DOCNO>EP-0614294</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for generating a frame check sequence.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1110	G06F1110	H03M1300	H03M1300	H03M1309	H04L100	H04L100	H04Q300	H04Q300	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	H03M	H03M	H03M	H04L	H04L	H04Q	H04Q	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F11	H03M13	H03M13	H03M13	H04L1	H04L1	H04Q3	H04Q3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method and an apparatus for calculating and checking the 
Frame Check Sequence (FCS) of a message comprising a sequence 

of data bytes. A Cyclic Redundancy Code (CRC)is 
used to generate the FCS at one end and check the message 

at the other end. For each new byte of the sequence of 
data bytes, the current FCS, which is a vector of the 

Galois Field is multiplied by α⁸, another vector of the 
Galois Field. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GLAISE RENE
</INVENTOR-NAME>
<INVENTOR-NAME>
JACQUART XAVIER
</INVENTOR-NAME>
<INVENTOR-NAME>
GLAISE, RENE
</INVENTOR-NAME>
<INVENTOR-NAME>
JACQUART, XAVIER
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to telecommunications networks and 
more particularly to an improved method for ensuring data 
integrity in a fast packet switching network. In a digital transmission network data from a large number 
of users are serially transmitted from one network 
node to another network node, up to their respective final 
destination. Due to the evolution of networks towards more 
and more complex mixings of sub-networks with heterogeneous 
architectures, it is clear that there is a future 
requirement to support distributed computing applications 
across high speed backbones that may be carrying LAN traffic, 
voice, video and traffic among channel-attached hosts 
and workstations. Perhaps the fundamental challenge for 
high speed networking is to minimize the processing time 
within each node in the network. Packet switching is now commonly used to accommodate the 
bursty, multiprocess communication found in distributed 
computing environments. Packets are pieces of data produced 
by an originating user, which are prefixed with 
headers containing routing information that identifies the 
originating and destination users. Small computers, called 
packet switches or nodes are linked to form a network. 
Some of these nodes are called end nodes and provide user 
access to the network. Adapters circuit at each of the 
switching nodes adapt the packet signals for transmission  
 
or delivery to the transmission links and user applications, 
respectively. Each node examines each header and 
decides where to send the packet to move it closer to its 
final destination. When messages are transmitted and received over telecommunication 
links, errors can occur because many sources of 
noise, e.g. interference between channels, atmospheric 
conditions, ... A method is thus needed to detect when the message received 
is not the same as the message transmitted. Methods 
commonly used to detect errors include checksum, parity 
check, longitudinal redundancy code and cyclic redundancy 
code. In order to minimize the processing time within each node 
of a high speed network the end-to-end recovery concept is 
now used as a result of the much better error rate of the 
new lines, such as optical fiber. The integrity of the message is ensured by the addition, 
at the end of the message, of a Frame Check Sequence (FCS) 
travelling with the message itself so it can be checked at 
far end for proper transmission. A Cyclic Redundancy Code 
(CRC) is employed to generate the FCS at one end and check 
the entire
</DESCRIPTION>
<CLAIMS>
A method of generating and checking a Frame Check 
Sequence (FCS) for a message formed as a sequence of 

data bytes and a FCS inserted at the end of said 
message, comprising performing a computation operation 

on said sequence of data bytes in order to 
generate said FCS, characterized in that said computation 

operation comprises the following steps : 

a. sequentially receiving said sequence of data 
bytes of said message; 
b. pushing each byte of said data bytes sequence 
into register means, until said register means 

is full; 
c. multiplying the content of said register 
means by a vector belonging to the Galois Field 

that matches the number of bits of said data 
byte processed at each step; 
d. updating the content of said register means; 
e. pushing a new byte of data in said register 
means; 
f. repeating steps c, d, e until all the data 
bytes have been pushed into said register 

means. 
A method according to claim 1 wherein each data byte 
in comprised of 8 bits and said vector belonging to 

said Galois Field is α⁸. 
A method according to claim 2 wherein the step of 
multiplying the content of said register means by α⁸ 

consists in padding 8 zeros to the content of said 
register means. 
A method according to claim 4 further comprising the 
step of cancelling the bits having been pushed out 

of said register means by said padding step. 
A method according to anyone of claims 1-4 wherein, 
at initialization the content of said register means 

is preset to all ones. 
A method according to claim 5 wherein the FCS once 
calculated is sent invented. 
An apparatus for generating and checking a Frame 
Check Sequence (FCS) for a message formed as a sequence 

of data bytes and a FCS inserted at the end 
of said message characterized in that it comprises : 


register means to store the current FCS; 
Galois Field multiplier means to multiply the content 
of said register means by a vector of the 

Galois Field; 
gating means to load said register means with the 
result of said Galois Field multiplication. 
An apparatus according to claim 7 wherein said gating 
means further comprises means for pushing a new byte 

of said sequence of data bytes into said register 
means. 
An apparatus according to claim 8 wherein said Galois 
Field multiplier means is a matrix of XOR operators. 
</CLAIMS>
</TEXT>
</DOC>
