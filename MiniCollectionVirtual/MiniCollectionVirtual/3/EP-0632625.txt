<DOC>
<DOCNO>EP-0632625</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Programmable high performance data communication adapter for high speed packet transmission networks
</INVENTION-TITLE>
<CLASSIFICATIONS>H04L2906	H04L2906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04L	H04L	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04L29	H04L29	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A high performance data packet buffering method and a programmable data 
communication adapter for high speed packet transmission networks are disclosed. 

The line adapter includes programmable processing means, for receiving 
and transmitting data packets of fixed or variable length. This system is 

characterized in that it comprises 

means for buffering (132) said data packets, 
means for identifying said buffering means and said data packets in said 
buffering means, 
means for queueing (Figure 15) in storing means (131) said identifying 
means in a single instruction, 
means for dequeueing (Figure 16) from said storing (131) means said 
identifying means in another single instruction , 
means for releasing said buffering means, 
 
   Each instruction comprises up to three operations executed in parallel by said 

processing means : 

an arithmetical and logical (ALU) operation on said identifying means, 
a memory operation on said storing means, and 
a sequence operation. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
GALAND CLAUDE
</INVENTOR-NAME>
<INVENTOR-NAME>
LEBIZAY GERALD
</INVENTOR-NAME>
<INVENTOR-NAME>
MAUDUIT DANIEL
</INVENTOR-NAME>
<INVENTOR-NAME>
MUNIER JEAN-MARIE
</INVENTOR-NAME>
<INVENTOR-NAME>
PAUPORTE ANDRE
</INVENTOR-NAME>
<INVENTOR-NAME>
SAINT-GEORGES ERIC
</INVENTOR-NAME>
<INVENTOR-NAME>
SPAGNOL VICTOR
</INVENTOR-NAME>
<INVENTOR-NAME>
GALAND, CLAUDE
</INVENTOR-NAME>
<INVENTOR-NAME>
LEBIZAY, GERALD
</INVENTOR-NAME>
<INVENTOR-NAME>
MAUDUIT, DANIEL
</INVENTOR-NAME>
<INVENTOR-NAME>
MUNIER, JEAN-MARIE
</INVENTOR-NAME>
<INVENTOR-NAME>
PAUPORTE, ANDRE
</INVENTOR-NAME>
<INVENTOR-NAME>
SAINT-GEORGES, ERIC
</INVENTOR-NAME>
<INVENTOR-NAME>
SPAGNOL, VICTOR
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a high performance packet buffering system 
and method in a programmable data communication adapter of a packet 
switching node of a high speed network. The telecommunication environment is in full evolution and has changed 
considerably this recent years. The principal reason has been the spectacular 
progress realized in the communication technology : 
the maturing of fiber optical transmission. High speed rates can now be 
sustained with very low bit error rates. the universal use of digital technologies within private and public telecommunications 
networks. In relation with these new emerging technologies, the offer of the telecommunication 
companies, public or private, are evolving : 
The emergence of high speed transmissions entails an explosion in the high 
bandwidth connectivity. the increase of the communication capacity generates more attractive 
tariffs.  
 A higher flexibility is offered to the users to manage their growth through 
a wide range of connectivity options , an efficient bandwidth management 
and the support of new media. Once sampled and digitally encoded, voice, video and image derived data 
can be merged with pure data for a common and transparent transport. Abundant, cheap communications means that many potential applications 
that where not possible before because of cost are now becoming attractive. In 
this environment, four generic requirements are expressed by the users : 
Doing old applications better, Optimizing communication networks, Doing new applications. In a first step, T1 backbone networks were primarily deployed with TDM 
(Time Division Multiplexing) technology to achieve cost savings through line 
aggregation. These systems easily supported the fixed bandwidth requirements 
of host/terminal computing and 64 Kbps PCM (Pulse Code Modulation) voice 
traffic. The data transmission is now evolving with a specific focus on applications 
and by integrating a fundamental shift in the customer traffic profile. Driven 
by the growth of workstations, the local area networks (LAN) interconnection, 
the distributed processing between workstations and super computers, the new 
applications and the integration of various and often conflicting structures - 
hierarchical versus peer to peer, wide (WAN) versus local (LAN) area networks, 
voice versus data - the data profile has become higher in bandwidth, 
bursting, non deterministic and requires more connectivity. Based on the 
above, it is clear that there is strong requirement to support
</DESCRIPTION>
<CLAIMS>
A method for queueing and dequeueing data packets of fixed or variable 
length in a line adapter (401, 402) of a packet switching node (300), said line 

adapter including programmable processing means (SPP), buffering (132) and 
storing means (131) for receiving (138) and transmiting (137) data packets of 

fixed or variable length, said method comprising the steps of : 

buffering (132) said data packets in said buffering means, 
defining identifying means and identifying said buffering means and said 
data packets in said buffering means, 
queueing (Figure 15) in storing means (131) said identifying means in a 
single processor instruction, 
dequeueing (Figure 16) from said storing (131) means said identifying 
means in another single processor instruction, 
 
each of said processor instruction for queueing and dequeueing said identifying 

means comprising two operations excecuted in parallel by said processing 
means ; 


an arithmetical and logical (ALU) operation on said identifying means, 
and 
a memory operation on said storing means, 
The method according to claim 1 wherein each of said processor instruction 
for queueing and dequeueing said identifying means comprises a third operation 

executed in parallel by said processing means : 

a sequence operation for testing the state of said storing means. 
The method according to claim 1 or 2 wherein : 

said buffering means includes means for writing and reading said data 
packets in buffers (800) of fixed length under control of a direct memory 

access module (134), 
said storing means includes means for separately storing (131) said identifying 
means under control of said processing means (SPP), 
The method according to claim 3 wherein said identifying means includes: 

buffer pointers (B_PTR) identifying said buffers and chained in one or 
more buffer lists (B_LIST), 
packet pointers (P_PTR) identifying said buffer lists (B_LIST) and 
chained in one or more packet lists (P_LIST), 
queue pointers (Q_PTR) identifying said packet lists (P_LIST) and 
chained in one or more queue lists (Q_LIST). 
 
and wherein each list comprises a prefix for storing any type of information 

related to the data the list contains. 
The method adapter according to claim 4 wherein said buffer list prefix includes 
:
 
control and routing information contained in the data packet header. 
The method according to anyone of claims 4 to 5 wherein each list pointer 
comprises : 


a first field for identifying a pointer list (LID), 
a second field for identifying the next pointer (TAIL) to attach to said 
pointer list,  

 
a third field for identifying the first pointer (HEAD) in said pointer list. 
The method according to anyone of claims 4 to 6 wherein each buffer 
pointer comprises : 


a first field for identifying a buffer (BID), 
a second field for identifying a first data element in said buffer (FEP), 
a third field for identifying a last data element in said buffer (LEP), 
a fourth field for identifying a current data element in said buffer (LEP), 
and 
a fifth field used as status indicator (SF). 
The method according to claim 7 wherein : 

buffer lists are of fixed length, 
buffer pointers can be chained in a plurality of buffer lists when the data 
packet to store is bigger than a single buffer list can contain, 
said status indicator is flagged in in the last buffer pointer of each buffer 
list ensuring a correlation between the different lists of said data packet. 
The method according to claims 6 to 8 wherein said queueing instruction 
comprises the steps of: 


incrementing the TAIL field of a list pointer, 
simultaneously storing the pointer identified by the TAIL field in the 
pointer list identified by the LID field, 
generating list empty (E) or list full (F) indicators. 
The method according to claims 6 to 9 wherein said dequeueing instruction 
comprises the steps of: 


incrementing the HEAD field of a list pointer, 
simultaneously reading the pointer identified by the HEAD field, in the 
pointer list identified by the LID field, 
generating list empty (E) or list full (F) indicators. 
The method according to claims 9 to 10 wherein said instruction includes 
the further step of: 


testing said list empty (E) or list full (F) indicators. 
The method according to anyone of claims 4 to 11 wherein the management 
of the data packet buffering means is realized by means of a permanent 

list (Free Buffer List) containing the totality of the buffer pointers. 
A line adapter (401, 402) in a packet switching node (300) within a communication 
network (200), including programmable processing means (SPP) 

for carrying out the method according to anyone of the preceding claims. 
The line adapter according to claim 13 wherein said programmable processing 
means include : 


an arithmetical and logical unit, 
a register file, 
a sequencer, 
an instruction file, 
a direct access memory module, 
a physical memory address generator. 
A packet switching node (300) in a communication network (200) comprising 
at least one line adapter (401, 402) according to claims 13 or 14. 
</CLAIMS>
</TEXT>
</DOC>
