<DOC>
<DOCNO>EP-0636985</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Process monitoring in a multiprocessing server
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1132	G06F1300	G06F1130	G06F1130	G06F1132	G06F1300	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F11	G06F13	G06F11	G06F11	G06F11	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system and method for determining and displaying the status of 
client application programs executing on a multiprocessing server. 

Server process control blocks (5) and synchronization object 
descriptors (10) are 

created in the shared memory (11) of the server (3). Application program 
interfaces APIs (8) are linked to the control blocks and descriptors 

during 
the execution of the various multiprocessing application programs (7). A 

status utility (13) related to the service process monitor (12) 
selectively 

accesses information from the control blocks (5) and descriptors 
(10) to determine 

the status of the individual multiple processes executing on the server 
workstation (3). In a preferred form, the status information is 

conveyed to 
and displayed on a video display (4) associated with the service process 

monitor. In contrast to operating system monitors which disclose the 
status of all processes as a whole, the present server process monitor 

particularizes the information to the specific client process. Thereby, 
the information is of a granularity to identify processes which are hung 

up on semaphores, message queues, or the like. The information is at the 
level used by a system administrator or software developer. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
CHANG DAVID YU
</INVENTOR-NAME>
<INVENTOR-NAME>
CHANG, DAVID YU
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates in general to systems and methods for
monitoring the activities of computers. More particularly, the invention
is directed to a system and method for monitoring the states of client
application type processes executing in a multiprocess server of a
client-server network.The client-server processing model has been widely adopted in the
definition of distributed computing type networks. In the context of
such networks, better performance with higher degrees of service
concurrence have been exhibited by server operating systems which execute
multiple client application programs through multiple processes.
Examples are the OS/2® and AIX® operating system programs commercially
available from IBM Corporation (OS/2 and AIX are registered trademarks of
IBM Corporation). In contrast, single process operating systems require
the server to await the completion of a current client's application
program before commencing any aspect of a new client's application
program.The present concept of multiprocessing from the software
perspective should not be confused with classical multiprocessing from
the hardware perspective. From the hardware perspective, microprocessors
such as the Intel Corp. models 80386 and 80486 incorporate time sharing
features which accomplish multiprocessing through a time allocation for
the different instructions being processed. In contrast, microprocessors
such as the Intel Corp. model 80286 do not provide such a hardware
capability, requiring that software manage any concurrent execution of
multiple application programs. Operating system software which
accomplishes this task for a 80286 type processor, and equally for the
80386 and 80486 microprocessors, is the aforementioned OS/2 operating
system program. The present invention is directed to process management
in the context of such an operating system, and not in the context of
management by the microprocessor hardware.The client-server network architecture is generally well known.
With the advent of multiprocessing operating system capabilities in the
servers, associating the activities occurring in the server to specific
client application program processes has proven to be a significant
challenge not only for the user clients but even for network 
administrators. Though operating systems, such as the aforementioned AIX
program, provide resources for monitoring the state of a composite
operating system on a server workstation, no contemporaneous information
is provided about the states of the individual
</DESCRIPTION>
<CLAIMS>
A multiprocess server (3) having a memory (9) and being suitable for operating in a client-server
network (1) said server including a server process monitor (12), and further comprising:


means for creating multiple control blocks (5) of the server process
monitor in a part of the memory (11) of the multiprocess server which is

shared by the different server application processes (8);
means for relating server application processes to selected control blocks;
means for indicating (4) the status of a server application process (13) responsive to a server
process monitor access of a control block.
A server as claimed in claim 1, wherein the means for indicating
the status of a server process comprises:

   means for displaying (4) the state of a server process using
information from a control block accessed by the server process monitor.
A server as claimed in claim 1 or claim 2, further comprising:

   means for registering a server process with the server process
monitor upon creation of the server process in the multiprocess server.
A server as claimed in any preceding claim, further comprising:

   means for relating synchronization objects of the server processes
to descriptors (10) accessible by the server process monitor.
A server as claimed in claim 4, further comprising:

   means for registering a synchronization object with the server
process monitor upon creation of the synchronization object in the

multiprocess server.
A method of operating a server process monitor of a multiprocess
server having a memory and operating in a client-server network,

comprising the steps of: 

creating multiple control blocks of the server process monitor in a
part of the memory of the multiprocess server which is shared by the

different server application processes;
relating server application processes to select control blocks; and
indicating the status of a server application process responsive to a server
process monitor access of a control block.
A method as claimed in claim 6, wherein the step of indicating the
status of a server process comprises:

   displaying the state of a server process using information from a
control block accessed by the server process monitor.
A method as claimed in claim 6 or claim 7, further comprising the
step of:

   registering a server process with the server process monitor upon
creation of the server process in the multiprocess server.
A method as claimed in any of claims 6 to 8, further comprising the
step of:

   relating synchronization objects of server processes to descriptors
accessible by the server process monitor.
A method as claimed in claim 9, further comprising:

registering a synchronization object with the server process monitor upon
creation of the synchronization object in the multiprocess server.
</CLAIMS>
</TEXT>
</DOC>
