<DOC>
<DOCNO>EP-0648354</DOCNO> 
<TEXT>
<INVENTION-TITLE>
METHOD AND SYSTEM FOR IMPLEMENTATION-INDEPENDENT INTERFACE SPECIFICATION
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	H04L2906	G06F944	H04L2906	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	H04L	G06F	H04L	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	H04L29	G06F9	H04L29	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system for facilitating communications between components, or parties, of a computer system. The system has a high level interface specification (172) which includes a communications contract between pairs of communicating parties. The interface specification (172) is input into a generation tool (170) to generate party specific implementation of the interface specification (172). The generated party specific implementation is then used to permit operative communications between parties.
 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ERICSSON TELEFON AB L M
</APPLICANT-NAME>
<APPLICANT-NAME>
TELEFONAKTIEBOLAGET LM ERICSSON
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
LUNDIN LARS KENNETH
</INVENTOR-NAME>
<INVENTOR-NAME>
SVENSSON MATS RAGNAR
</INVENTOR-NAME>
<INVENTOR-NAME>
WIMAN LARS-ERIK
</INVENTOR-NAME>
<INVENTOR-NAME>
LUNDIN, LARS, KENNETH
</INVENTOR-NAME>
<INVENTOR-NAME>
SVENSSON, MATS, RAGNAR
</INVENTOR-NAME>
<INVENTOR-NAME>
WIMAN, LARS-ERIK
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
A portion of the disclosure of this patent document
contains material which is subject to copyright
protection. The copyright owner has no objection to the
facsimile reproduction by anyone of the patent document
or the patent disclosure, as it appears in the patent and
trademark office, patent file or records, but otherwise
reserves all copyrights whatsoever.The invention relates to the specification of
protocols and interfaces in distributed and modular
computing or data processing systems such as
telecommunications exchanges and, more particularly, to
the specification of application level protocols, i.e.,
level number 7 in the Open Systems Interconnection (OSI)
protocol stack. One aspect of computer systems, particularly of
networked or distributed systems, is that many
communications protocols must be used in order to effect
communications between and among the various components
comprising the system. Monitoring the communications
between components of a computing system necessitates the
creation of well defined communication protocols. Interprocess
communications within a computing system
typically communicate in terms of requests and responses.
Such systems have limited communications facilities and
are able only to process all requests in the order in
which they are received. The typical process-to-process
protocols provide only this rather simple data
transmission capability.Protocols are implemented in computing systems in
order to effect the orderly exchange of information
between computing components. For computing components
to communicate, conventions are required. Protocols may
be used to build a standard communications path between
two computing devices. Agreed-upon protocol conventions
typically determine the nature of the data
representation, the format and speed of that data
representation over a communications path, and the
sequence of any control messages that are to be sent.
While a protocol is the logical or conceptual set of
rules for communications between similar processes,
interfaces comprise the set of rules between dissimilar
processes and are often physical rather than logical
connections. The procedure of a protocol constitutes a
predetermined dialogue that must be scrupulously
maintained by both ends of a communications link. At the
link level, a protocol consists of an interchange of 
octets or octet sequences guaranteeing the control and
integrity of a message transfer.In the case of process-to-process communications
within a data processing system, protocols typically
p
</DESCRIPTION>
<CLAIMS>
A method for generating and monitoring the
interaction of a plurality of a dynamically varying set

of software modules in a computing system having one or
more processors, wherein each of said software modules

is capable of interactively creating and manipulating
objects belonging to one or more object classes, each

of said object class being automatically generated from
an interface specification, said method comprising

the steps of:

defining a computer-language-independent
interface specification (172) to govern the interaction

of said plurality of software modules across one or
more processors by the steps of:


providing a unique name for said
interface specification (172);
providing a list of one or more instance
variables which define the characteristics of a class

of objects;
providing zero or more interaction
variables specifying the public or private interaction

of a group of said objects; and
specifying constraints, if any, on the
interaction of said software modules;
converting said computer-language-independent
interface specification (172) into a computer-language-specific

interface implementation for a specific
computing system using at least the following

information:

a name of a communications protocol to
be used for the interchange of data between said

software modules;
an identification of the software
modules that need to exchange data to interactively

create and manipulate objects;
an operational command set for each such 
software module; and
the constraints, if any, on the
interaction of said software modules;
creating a plurality of functional software
modules that are capable of interacting or

communicating with each other using said computer-language-specific
interface implementation; and
executing said plurality of software modules
on said computing system using said computer-language-specific

interface implementation for communicating
data between said software modules.
The method of claim 1 wherein the step of
defining said computer-language-independent interface

specification (172) to govern the interaction of said
plurality of software modules across one or more

processors further comprises the step of:

providing the name of a parent specification
whenever said interface specification is based upon

said parent specification.
The method of claim 1 wherein said step of
defining a computer-language-independent interface

specification (172) further comprises the
steps of:


grouping the operations of said interface
specification into a plurality of two-party

communications protocols, each of said two-party
communications protocols specifying the communication

between a pair of software modules that are parties to
a communications contract; and
specifying the constraints, if any, on the
interaction of each of the pairs of software modules

that are the parties to said communications contract.
The method of claim 3 wherein the
specification of each of said two-party communications 

protocols further comprises:

a name for said two-party communications
protocol;
the name of a first software module;
an operational command set for said first
software module;
the name of a second software module;
an operational command set for said second
software module; and
the constraints, if any, on the interaction
of the two software modules that are the parties to

said communications contract.
The method of claim 1 wherein said step of
converting said computer-language-independent interface

specification (172) into said computer-language-specific
interface implementation is performed using a

stub-code generation tool (170), regardless of whether
said software modules are linked statically or

dynamically.
The method of claim 1 wherein the functional
software modules created from said interface

specification (172)include an
interface agent (222).
The method of claim 6 wherein said interface
agent (222) additionally comprises a dispatcher (224)

that receives a signal from a communication party,
parses said signal into an address and a message,

strips said address from said signal and distributes
said message of said signal based upon said address to

a recipient software module.
The method of claim 1 wherein the functional
software modules created from said interface

specification (172) additionally include a protocol 
supervisor (228) operating as a state machine that

supervises obedience to protocol rules predefined in
said interface specification.
The method of claim 1 wherein the interaction
of each pair of said software modules to create and

manipulate objects is regulated in such a way that any
of said plurality of software modules is permitted to

initiate or respond to communications from any other
software module.
The method of claim 1 wherein the interaction
of each pair of said software modules to create and

manipulate objects is regulated in such a way that only
one of each pair of software modules is permitted to

initiate communication with the other, and the other
software module is only permitted to respond to queries

of the initiating software module.
The method of claim 1 wherein information
about all interfaces that have been implemented for

software modules within said computing system is stored
centrally in a trader module (120) that is part of the

kernel (122) of the operating system of said computing
system.
The method of claim 1 wherein said computing

system is a distributed or modular computing system of
the type commonly used in telecommunications

environments.
A system for generating and monitoring the
interaction of a plurality of a dynamically varying set

of software modules in a computing system having one or
more processors, wherein each of said software modules

is capable of interactively creating and manipulating
objects belonging to one or more object classes, each 

of said object classes being automatically generated
from an interface specification, said system

comprising:

means for defining a computer-language-independent
interface specification (172) to govern the

interaction of said plurality of software modules
across one or more processors by the steps of:


providing a unique name for said
interface specification (172);
providing a list of one or more instance
variables which define the characteristics of a class

of objects;
providing zero or more interaction
variables specifying the public or private interaction

of a group of said objects; and
specifying constraints, if any, on the
interaction of said software modules;
means for converting said computer-language-independent
interface specification (172) into a

computer-language-specific interface implementation for
a specific computing system using at least the

following information:

a name of a communications protocol to
be used for the interchange of data between said

software modules;
an identification of the software
modules that need to exchange data to interactively

create and manipulate objects;
an operational command set for each such
software module; and
the constraints, if any, on the
interaction of said software modules;
means for creating a plurality of functional
software modules that are capable of interacting or

communicating with each other using said computer-language-specific
interface implementation; and
means for executing said plurality of 
software modules on said computing system using said

computer-language-specific interface implementation for
communicating data between said software modules.
The system of claim 13 wherein said means
for defining computer-language-independent interface

specification (172) to govern the interaction of said
plurality of software modules across one or more

processors comprises:

means for providing the name of a parent
specification whenever said interface specification is

based upon said parent specification
The system of claim 13 wherein said means
for defining a computer-language-independent interface

specification (172) comprises:

means for grouping the operations of said
interface specification (172) into a plurality of two-party

communications protocols, each of said two-party
communications protocols specifying the communication

between a pair of software modules that are parties to
a communications contract; and
means for specifying the constraints, if any,
on the interaction of each of the pairs of software

modules that are the parties to said communications
contract.
The system of claim 15 wherein the means for
specifying each of said two-party communications

protocols comprises:

means for providing a name for said two-party
communications protocol;
means for providing the name of a first
software module;
means for providing an operational command
set for said first software module;
means for providing the name of a second 
software module;
means for providing an operational command
set for said second software module; and
means for specifying the constraints, if any,
on the interaction of the two software modules that are

the parties to said communications contract.
The system of claim 13 wherein said means
for converting said computer-language-independent

interface specification (172) into said computer-language-specific
interface implementation comprises a

stub-code generation tool (172), regardless of whether
said software modules are linked statically or

dynamically.
The system of claim 13 wherein said means
for creating functional software modules from said

interface specification (172)comprises
an interface agent (222).
The system of claim 17 wherein said
interface agent (222) additionally comprises a

dispatcher (224) that receives a signal from a
communication party, parses said signal into an address

and a message, strips said address from said signal and
distributes said message of said signal based upon said

address to a recipient software module.
The system of claim 13 wherein said means
for creating functional software modules from said

interface specification (172) additionally includes a
protocol supervisor (228) operating as a state machine

that supervises obedience to protocol rules predefined
in said interface specification.
The system of claim 13 wherein said means
for defining said computer-language-independent 

interface specification (172) permits any of said
plurality of software modules to initiate or respond to

communications from any other software module.
The system of claim 13 wherein said means
for defining said computer-language-independent

interface specification (172) permits only one of each
pair of software modules to initiate communication with

the other, and the other software module is only
permitted to respond to queries of the initiating

software module.
The system of claim 13 further comprising
central storage means within a trader module (120) that

is part of the kernel (122) of the operating system of
said computing system for storing information about all

interfaces that have been implemented for software
modules within said computing system.
The system of claim 13 wherein said
computing system is a distributed or modular computing

system of the type commonly used in telecommunications
environments.
</CLAIMS>
</TEXT>
</DOC>
