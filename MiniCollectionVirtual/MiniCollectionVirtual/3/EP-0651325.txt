<DOC>
<DOCNO>EP-0651325</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and system for generating a computer program.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F906	G06F906	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method and system for generating a computer
program. In a preferred embodiment, the present invention

provides a program tree editor for directly manipulating a
program tree. A program tree comprises of plurality of nodes

corresponding to computational constructs. The program tree
editor receives commands from a user that are independent of a

programming language syntax. The present invention also
provides a display representation generator for generating a

display representation of the program tree. The display
representation generator retrieves nodes from the program tree

and displays a display representation of the node. A user of
the present invention preferably interacts with the program

tree editor based on the display representation.

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
MICROSOFT CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
MICROSOFT CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SIMONYI CHARLES
</INVENTOR-NAME>
<INVENTOR-NAME>
SIMONYI, CHARLES
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to a 
computer method and system for generating a computer 
program and, more specifically, to a computer method and 
system editing a program tree. Computer programs are generally written in a 
high-level programming language (e.g., Pascal and C). 
Compilers are then used to translate the instructions of 
the high-level programming language into machine 
instructions, which can be executed by a computer. The 
compilation process is generally divided into 6 phases: 
1. Lexical analysis 2. Syntactic analysis 3. Semantic analysis 4. Intermediate code generation 5. Code optimization 6. Final code generation  
Lexical analysis involves scanning the computer program 
and recognizing components or tokens of the high-level 
language. During this phase, the compiler converts the 
computer program into a series of tokens that are 
processed during syntactic analysis. For example, during 
lexical analysis, the compiler would recognize the 
statement
 
   cTable = 1.0;
 
as the variable(cTable), the operator(=), the 
constant(1.0), and a semicolon. A variable, operator,  
 
constant, and semicolon are tokens of the high-level 
language. During syntactic analysis, the compiler 
processes the tokens and generates a syntax tree to 
represent the program. A syntax tree is a tree structure 
in which operators are stored in non-leaf nodes and 
operands are stored in leaf nodes. In the above example, 
the operator ("=") has two operands: the variable (cTable) 
and the constant (1.0). During semantic analysis, the 
compiler modifies the syntax tree to ensure semantic 
correctness. For example, if the variable (cTable) is an 
integer and the constant (1.0) is real, then during 
semantic analysis an real to integer conversion would be 
added to the syntax tree. During intermediate code 
generation, code optimization, and final code generation, 
the compiler generates machine instructions to implement 
the program represented by the syntax tree. The machine 
instructions can then be executed by the computer. The present invention provides a method and 
system for generating a computer program. In a preferred 
embodiment, the present invention provides a program tree 
editor for directly manipulating a program tree. A 
program tree comprises of plurality of nodes corresponding 
to computational constructs. The program tree editor 
receives commands from a user that are independent of a 
programming language syntax. The present invention also 
provides a display representation generator
</DESCRIPTION>
<CLAIMS>
A method in a computer system for generating a 
computer program, the computer system having a display device 

and an input device, the method comprising the steps of: 
   inputting through the input device a plurality of 

nodes for a program tree, the nodes specifying operators and 
operands of the computer program;

 
      storing the input nodes in the program tree; 

   selecting a display representation format for 
displaying a representation of the program tree; 

   generating a display representation of the program 
tree in accordance with the selected display representation 

format; and
 

      displaying the generated display representation on 
the display device. 
The method of claim 1 wherein the step of 
generating a display representation includes the steps of 

   retrieving nodes of the program tree; and 
   invoking a function associated with the retrieved 

node to generate a display representation of the retrieved 
node. 
The method of claim 1 wherein the step of 
inputting inputs a plurality of nodes in a manner that is 

independent of programming language syntax. 
The method of claim 1 wherein the step of 
inputting includes the step of receiving a plurality of 

commands, the commands for directly manipulating the program 
tree. 
The method of claim 4 wherein the commands 
include a command for positioning an insertion point within 

the program tree. 
The method of claim 4 wherein the commands 
include a command for selecting a portion of the program tree. 
The method of claim 4 wherein the commands 
include a command for adding a node to the program tree. 
The method of claim 4 wherein the commands 
include a command for deleting a node from the program tree. 
The method of claim 1 wherein the step of 
inputting includes the step of receiving a series of commands 

that is independent of a programming language. 
The method of claim 9 wherein the commands are 
received through menu selection by a user of the computer 

system. 
The method of claim 10 wherein the commands are 
received through a tokenizer that receives input from a user 

of the computer system. 
The method of claim 1 wherein the step of 
storing includes the step of storing in the program tree an 

undefined node that represents an operand of an input node 
that corresponds to an operator. 
The method of claim 12 including the step of 
displaying a list of undefined nodes stored in the program 

tree so that a user of the computer system can specify a 
definition of the node. 
The method of claim 12 wherein the step of 
displaying includes the step of displaying undefined nodes in 

a predefined representation. 
The method of claim 1 wherein the step of 
inputting inputs a plurality of nodes in a manner that is 

independent of programming language syntax and wherein the 
step of generating includes the step of invoking a function 

associated with a node of the program tree to generate a 
display representation for the node. 
The method of claim 15 wherein the function 
generates a graphics-based representation of the node. 
The method of claim 15 wherein the function 
generates a bitmapped representation of the node. 
The method of claim 15 wherein the function 
generates an iconic representation of the node. 
The method of claim 15 wherein the function 
generates a directed arc pointing to a display representation 

of a second node, the second node representing a declaration 
corresponding to the node. 
The method of claim 1 wherein the step of 
inputting inputs a plurality of nodes in a manner that is 

independent of programming language syntax and wherein the 
nodes include declaration nodes corresponding to definitions 

and nodes in the program tree contain references to 
corresponding declaration nodes. 
The method of claim 20 wherein a declaration 
node has a corresponding function for generating a display 

representation and wherein the step of generating a display 

representation for a node invokes the function corresponding 
to the declaration node referenced by the node. 
The method of claim 21 wherein the declaration 
node contains a resetable display attribute and wherein the 

 
function generates a display representation based on the 

setting of the display attribute. 
A method in a computer system for specifying 
computer program, the method comprising the steps of: 

   inputting a plurality of nodes to form a program 
tree representing the computer program; 

   storing the program tree containing the inputted 
node within the computer system; and 

   generating a display representation of the program 
tree based on one of a plurality of display representation 

formats. 
The method of claim 23 including the step of 
displaying the generated display representation on a display 

device of the computer system. 
The method of claim 23 including the step of 
selecting one of the plurality of display representation 

formats for use in generating the display representation. 
The method of claim 25 including the steps of: 
   selecting a second one of the plurality of display 

representation formats; and 
   generating a second display representation of the 

program tree based on the second selected plurality of display 
representation formats. 
The method of claim 25 wherein the generating 
step includes the steps of: 

   traversing a subtree of the program tree, each node 
of the subtree having a display representation for each of the 

plurality of display representation formats; and 
   for each traversed node of the program tree, 

inserting the display representation of the traversed node 
corresponding to the selected display representation format 

 
into a display representation of the program tree at a 

position corresponding to the position of the traversed node 
in the subtree. 
The method of claim 27 wherein the traversing 
step includes the steps of: 

   selecting a node of the program tree as a crown 
node; 

   defining the subtree as the crown node and all of 
the descendant nodes of the crown node in the program tree; 

and 
   traversing the subtree in a depth-first manner. 
The method of claim 23 wherein the inputting 
step includes the steps of: 

   positioning an insertion point within the program 
tree; and 

   inserting a new node into the program tree at the 
insertion point. 
The method of claim 29, further including the 
step of receiving an insertion point positioning instruction, 

and wherein the positioning step positions in response to the 
step of receiving an insertion point positioning instruction. 
The method of claim 29 wherein the step of 
receiving an insertion point positioning instruction includes 

the step of receiving an absolute insertion point positioning 
instruction from a pointing device. 
The method of claim 29 wherein the step of 
receiving an insertion point positioning instruction includes 

the step of receiving an insertion point positioning 
instruction chosen from a menu by a user. 
The method of claim 29 wherein each node of the 
program tree is of one of a plurality of types, further 

including the step of receiving an insert node instruction 
specifying the type of node to insert, and wherein the 

inserting step inserts a new node of the type specified in the 
received insert node instruction. 
The method of claim 33 wherein the step of 
receiving an insert node instruction specifying the type of 

node to insert includes receiving an insert node instruction 
specifying the type of node chosen from a menu by a user. 
The method of claim 34, further including the 
step of repositioning the insertion point in the program tree 

based on the former insertion point and the type of node 
inserted. 
The method of claim 29, further including the 
step of inserting a placeholder node into the program tree to 

reserve a place for a required child node of the inserted 
node. 
The method of claim 36, further including the 
step of repositioning the insertion point at the placeholder 

node. 
A computer program generating system, the 
system comprising: 

   a computer having a central processing unit, a memory, an 
input device, and a display device; 

   a display representation generator for displaying a 
representation of a program tree on the display device; and 

   a program tree editor for creating a program tree and for 
editing the program tree based on instructions received from 

the input device, the instructions being relative to the 
currently displayed representation of the program tree. 
The system of claim 38 wherein the program tree 
editor maintains a current insertion point within the program 

tree and displays a representation of the current insertion 
point on the display device. 
The system of claim 38 wherein the program tree 
editor maintains a current selection of a portion of the 

program tree and displays a highlighted form of the current 
selection of the display device. 
A method in a computer system for creating a 
program tree describing a computer program, the program tree 

comprising a plurality of nodes representing operator and 
operands, the method comprising the steps of: 

   receiving from a user an identification of a 
language-independent computational construct; 

   determining a current insertion point in the program 
tree; and 

   creating a node corresponding to the received 
computational construct and inserting the node in the program 

tree at the insertion point. 
A method in a computer system for modifying a 
program tree, the program tree representing a computer 

program, the program tree having nodes describing elements of 
the computer program, the method comprising the steps of: 

   retrieving the nodes of the program tree for 
generating a display representation of the program tree based 

on the retrieved nodes; 
   displaying the display representation of the program 

tree on a display device; 
   selecting a displayed representation of a node of 

the program tree to effect the selection of the node as a 
currently selected node;

 
   receiving from a user of the computer system a 

location of an insertion point relative to the displayed 
representation of the currently selected node; 

   positioning the insertion point at the received 
location; 

   receiving from the user a computational construct to 
insert into the program tree; 

   creating a node corresponding to the received 
computational construct; and 

   inserting the created node into the program tree at 
the insertion point. 
The method of claim 42 wherein the step of 
receiving from a user a location of an insertion point 

includes the step of receiving an indication that the location 
is above the currently selected node. 
The method of claim 43 wherein the step of 
inserting the created node inserts the node such that the 

currently selected node is a child node of the created node. 
The method of claim 44 wherein the step of 
inserting the created node inserts the node such that the 

currently selected node is a left child node of the created 
node. 
The method of claim 44 wherein the step of 
inserting the created node inserts the node such that the 

currently selected node is a right child node of the created 
node. 
A method in a computer system of selecting 
portions of a program tree, the program tree representing a 

computer program, the computer programming having a plurality 
of computational constructs, the program tree having nodes 

 
describing each computational construct of the computer 

program, the method comprising the steps of: 
   designating a node as a currently selected node; 

   receiving from a user of the computer system an 
indication to select a subtree of the program tree with the 

currently selected node as the root of the subtree; 
   designating the subtree of the currently selected 

node as the selected portion of the program tree; 
   generating and displaying a display representation 

of the program tree from the nodes of the program tree; and 
   highlighting the display representation 

corresponding to the designated subtree. 
A method in a computer system for generating a 
computer program, the method comprising the steps of: 

   for each of a plurality of computational constructs, 
determining a current insertion point in a 

program tree, the program tree representing the computer 
program; 

   receiving from a user of the computer system an 
indication of the computational construct; 

   before receiving another computational 
construct, altering the program tree based on the received 

computational construct; and 
   after altering the program tree, resetting the 

current insertion point based on the altering of the program 
tree. 
The method of claim 48 wherein the computer has 
a list of computational constructs, and wherein the received 

indication indicates a computational construct in the list. 
The method of claim 48 wherein the step of 
altering the program tree includes the step of inserting a 

node into the program based on a one-to-one correspondence 
 

between a received indication of a computation construct and a 
node. 
The method of claim 48, 49, or 50 including the 
step of receiving from the user of the computer system a 

command to change the current insertion point. 
The method of claim 48, 49, or 50 including the 
step of displaying a representation of the program tree on a 

display device. 
The method of claim 52 wherein the step of 
displaying includes the step of retrieving references to the 

computational constructs from the program tree for the 
displaying of the representation. 
The method of claim 52 wherein the program tree 
contains nodes corresponding to the received computational 

constructs and each computational construct that represents a 
declaration includes a function for displaying a 

representation of computational constructs associated with the 
declaration. 
The method of claim 54 wherein a function 
generates a graphics-based display representation. 
The method of claim 48, 49, or 50 wherein the 
program tree contains nodes corresponding to the received 

computational constructs and certain nodes are designated as 
declaration computational constructs and wherein the step of 

altering the program tree includes the step of storing a 
reference to a node designated as a declaration computational 

construct. 
The method of claim 48, 49, or 50 wherein the 
step of receiving an indication of the computational construct 

 
includes the step of receiving a command indicating a form of 

alteration. 
The method of claim 57 wherein the form of 
alteration includes inserting a node into the program tree. 
The method of claim 57 wherein the form of 
alteration includes pasting a node into the program tree to 

replace a currently selected node of the program tree. 
The method of claim 57 wherein the command is a 
command for directly manipulating the program tree. 
The method of claim 57 wherein the commands are 
received through menu selection by a user of the computer 

system. 
The method of claim 57 wherein the commands are 
received from a tokenizer that receives input from the user. 
The method of claim 48, 49, or 50 wherein the 
program tree includes nodes corresponding to computational 

constructs and wherein the step of altering includes the step 
of inserting into the program tree an undefined node that 

represents an operand of the computational construct. 
The method of claim 63 including the step of 
displaying a list of undefined nodes so that the user can 

specify a computational construct for the node. 
The method of claim 64 including the step of 
displaying a display representation of undefined nodes in a 

predefined representation. 
The method of claim 48, 49, or 50 wherein the 
step of receiving an indication of the computational construct 

 
includes the step of receiving a programming language 

independent indication of the computational construct. 
The method of claim 48, 49, or 50 wherein in 
the program tree includes declaration nodes corresponding to 

computational constructs representing declarations and wherein 
each declaration node may have a non-unique name. 
The method of claim 67 including the step of 
identifying a declaration node by pointing to a displayed 

representation off the declaration node. 
The method of claim 67 including the step of 
identifying a declaration node by location of the declaration 

node within the computer program. 
A method in a computer system for specifying a 
computational construct representing a declaration during 

entry of a computer program, the computer system having a 
multiplicity computation constructs with non-unique names, the 

method comprising the steps of: 
   displaying a unique representation of each of a 

plurality of the computational constructs; and 
   selecting a displayed unique representation of a 

computational construct whereby the computational construct 
corresponding to the selected unique representation is 

specified. 
</CLAIMS>
</TEXT>
</DOC>
