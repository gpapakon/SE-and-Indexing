<DOC>
<DOCNO>EP-0643352</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Self-checking complementary adder unit.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F748	G06F7492	G06F7493	G06F7499	G06F750	G06F7507	G06F7508	G06F1116	G06F1116	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F7	G06F11	G06F11	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A self-checking complementary adder unit used for high 
performance subtractions comprises two carry select adders (30 

and 36) each of which consists of a pair of byte or digit 
organized ripple carry adders (31, 32 and 37, 38) generating in 

parallel virtual sums from true and complemented operands based 
on the assumption that the carry-in signal is 1 or 0. Depending 

on byte or digit carry signals generated by carry look ahead 
circuits (33, 39), partial sums are selected from the virtual 

sums to form a real sum. The outputs of both carry select adders 
are connected to a multiplexer (42) which is controlled by the 

high order carry-out signal from one of the carry look ahead 
circuits representing the sign of a real sum. The multiplexer 

selects one of the real sums as the result of a subtraction. A 
sum checker compares cross-wise the parity bits of the virtual 

sums from both carry select adders and also compares the related 
carry-out signals from both the ripple carry adders and carry 

look ahead circuits. The compare results are combined by a logic 
circuit to generate a result check signal. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DAO-TRONG S
</INVENTOR-NAME>
<INVENTOR-NAME>
DAO-TRONG, S.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to a self-checking complementary adder 
unit for high performance subtractions from operands each 
consisting of a number of multibit digits and related parity 
bits. One of the critical factors of the performance of floating point 
processors is the fast execution of additions and subtractions. 
A suitable approach to meet the design requirements of such 
processor is the use of the carry select adder concept 
(US-PS 4 982 357). Carry select adders generate two preliminary 
sums, one of which is based on the assumption that there is a 
carry-in to the operands and the other is based on the 
assumption that there is no carry-in. Depending on the byte 
carries produced during the additions, partial sums are selected 
from the preliminary sums to generate the real sum. The 
performance of such carry select adders may be increased by 
combining them with the well-known carry look ahead concept 
where the byte carries used to select the correct partial sums 
for being adopted into the real sum are produced by a carry look 
ahead circuit (IBM Technical Disclosure Bulletin, Vol. 30, 
No. 10, March 1988, pp. 331-334). To execute fast subtractions two adders of this combined type 
may be used. The adders receive a common carry-in signal while 
one of the operands of each adder is complemented. Both adders 
perform subtractions by complementary additions, one generating 
the sum 
A + B + 1  
 and the other the sum 
A + B + 1  
. The sum with 
the positive sign is selected as the correct result without any 
need to subsequently recomplement the result. Adders operating 
in such manner are called complementary adders.  To check the correct operation of carry select adders a sum 
comparison circuit (US-PS 5 018 093) or a parity prediction tree 
may be used (IBM Technical Disclosure Bulletin, Vol. 13, No. 6, 
November 1970, pp. 1504-1505). It is also known to reduce the 
expenditure in checking the operation of carry select adders by 
a parity prediction for the preliminary results in a manner as 
used in incrementer and decrementer circuits (IBM Technical 
Disclosure Bulletin, Vol. 33, No. 1B, June 1990, p. 227). Such 
arrangement still requires a considerably expenditure in 
circuitry and processing time, in particular if applied to 
complementary adders. It is an object of the invention to provide a self-checking 
adder unit for high performance subtractions by using 
complementary adders. A further object of the invention is to generate a check signal 
for the result by a small amount of
</DESCRIPTION>
<CLAIMS>
A self-checking complementary adder unit for high 
performance subtractions from operands each consisting of a 

number of multibit digits and related parity bits, 
comprising: 


a) two carry select adders (30, 36) each containing a pair 
of ripple carry adders (31, 32 and 37, 38), where said 

ripple carry adders (31, 32) of the first carry select 
adder (30) generate a first virtual sum from a true operand 

A, a complemented operand B and an assumed low order carry-in 
signal and generate a second virtual sum from the latter 

operands and an assumed low order non-carry-in signal, and 
where said ripple carry adders (37, 38) of the second carry 

select adder (36) generates a third virtual sum from the 
complemented operand A, the true operand B and an assumed 

low order carry-in signal and generate a fourth virtual sum 
from the latter operands and an assumed low order non-carry-in 

signal, 
b) two carry look ahead circuits (33 and 39) each connected 
to one of the carry select adders to generate carry signals 

(Ci1 and Ci2) of predetermined bit segments used as control 
signals of multiplexer circuits (34 and 40) selecting from 

the virtual sums partial sums each of which consisting of a 
bit segment to form real sums A - B and B - A, 
c) a multiplexer circuit (42) connected to the outputs of 
both carry select adders (30, 36) and controlled by a sum 

sign representing high position carry-out signal from one 
of the carry look ahead circuits (33 or 39) to select one 

of the real results A - B or B - A as the actual result, 
and 
d) result check means (44) comparing the parity bits (Pi1) 
of the first virtual sum from the first carry select adder 

(30) with the parity bits (Pi4) of the second virtual sum 
from the second carry select adder (36), and further 

comparing the parity bits (Pi2) of the second virtual sum 
from the first carry select adder with the parity bits (Pi3) 

of the first virtual sum from the second carry select adder 
(36) and finally comparing the bit segment carry signals 

(Ci1 and Ci2) generated by said two carry look ahead circuit 
(33 and 39), where said result check means contain compare 

result combining circuits (48, 49) to form a check signal 
(CHK) confirming the correctness of the total result or 

indicating an error. 
Adder unit according to claim 1, wherein said result check 
means (44) form a signal bus which is arranged in parallel 

to the partial sum selection and result selection means 
(34, 40 and 42) capable to generate the result check signal 

(CHK) simultaneously with the generation of the actual 
result. 
Adder unit according to claim 1 and 2, wherein said result 
check means (44) include a first equivalence circuit (45) 

comparing the parity bits (i1) of the first virtual sum 
with those of the fourth virtual sum, a second equivalence 

circuit (46) comparing the parity bits (Pi2) of the second 
virtual sum with those of the third virtual sum and a third 

equivalence circuit (47) comparing the carry signals from 
the first carry look ahead circuit (33) with those of the 

second carry look ahead circuit (39) wherein said 
equivalence circuits are multibit equivalence circuits 

arranged in parallel to each other. 
Adder unit according to one of the claims 1 to 3, wherein 
said result check means (44) contain for each bit segment 

two multibit equivalence circuits (50, 52) one of which 
comparing bit segment carry-out signals of the ripple carry 

adders (31, 32) of the first carry select adder (30) with 
bit segment carry signals from the first carry look ahead 

circuit (33), and the other comparing bit segment carry-out 
signals of the ripple carry adders (37, 38) of the second 

carry select adder (36) with bit segment carry signals from 
the second carry look ahead circuit (39), and wherein 

multiplexer circuits (51 and 53) are arranged between said 
equivalence circuits (50 and 52) and the bit segment carry 

outputs of said ripple carry adders (31, 32 and 37, 38), 
and wherein said bit segment carry signals from the 

corresponding carry look ahead circuit (33 and 39) serve as 
control signals of said multiplexer (51 and 53) to select 

the carry-out signals of the real sums selected. 
Adder unit according to one of the claims 1 to 4, wherein 
said compare result combining means comprise AND-circuits 

(48) each connected to the output of said equivalence 
circuits (45, 46 or 50, 52) of one bit segment and wherein 

said compare result combining means further comprise a 
NAND-circuit (49) generating a check signal from the output 

signals of said AND-circuits. 
Adder unit according to one of the claims 1 to 5, wherein 
said result check means (44) contain a three level logic 

the first level of which consists of said equivalence 
circuits (45, 46, 47 or 50, 52) arranged in parallel to 

each other, while second and third levels are represented 
by said compare result combining circuits (48, 49). 
Adder unit according to one of the claims 1 to 6, wherein 
said bit segments represent digits each of which connected 

with a parity bit, wherein the carry ripple adders (31, 32, 
37, 38) and the multiplexer circuits (34, 40, 42) are digit 

organized, wherein said carry look ahead circuits (33, 39) 
generate in parallel carry signals for all digits, and 

wherein said sum check means (44) include a compare circuit 
for each digit. 
Adder unit according to claim 1 to 6, wherein said bit 
segments are bytes each of which connected with a parity 

bit, wherein the carry ripple adders (31, 32, 37, 38) and 
the multiplexer circuits (34, 40, 42) are byte organized, 

wherein the carry look ahead circuits (33, 39) generate in 
parallel carry signals for all bytes, and wherein said sum 

check means (44) include a compare circuit for each byte. 
</CLAIMS>
</TEXT>
</DOC>
