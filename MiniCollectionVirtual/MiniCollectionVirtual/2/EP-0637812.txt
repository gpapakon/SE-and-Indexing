<DOC>
<DOCNO>EP-0637812</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method for dynamically maintaining multiple structural interpretations in graphics system
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F314	G06T1180	G06F3048	G09G536	G09G536	G06T1180	G06T1100	G06T1100	G06F314	G06F944	G06F3048	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06T	G06F	G09G	G09G	G06T	G06T	G06T	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F3	G06T11	G06F3	G09G5	G09G5	G06T11	G06T11	G06T11	G06F3	G06F9	G06F3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
An object oriented graphic input and display system for graphical abstract objects, 
responsive to user selected manipulation functions, having a data structure (70; Fig. 3A) 

including input means, display means and function selection means, the input means being 
user manipulable for entering graphical objects onto the display and for selecting functions on 

the function selection means for manipulating the graphical objects, a lattice data structure 
(100) responsive to data signals from the data structure representing objects entered on the 

display for decomposing the abstract objects into elemental objects, means (108,110) for 
organizing elemental objects into groups of elemental objects, and means for re-organizing 

the groups of elemental objects into a further group of elemental objects, the graphical data 

structure and function selection means coordinating the reorganization in accordance with 
user selection of functions to be performed on all or on portions of the objects. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
XEROX CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
XEROX CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BECKER CRAIG DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
MORAN THOMAS PATRICK
</INVENTOR-NAME>
<INVENTOR-NAME>
SAUND ERIC
</INVENTOR-NAME>
<INVENTOR-NAME>
BECKER, CRAIG DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
MORAN, THOMAS PATRICK
</INVENTOR-NAME>
<INVENTOR-NAME>
SAUND, ERIC
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention pertains generally to computer graphics, and particularly to a system and method
enabling users to create and edit graphical images using a mouse, stylus, the hand of the operator or
other form of pointing device.Typically, computer graphics operations with a pointing device are of two types; drawing operations
and control operations. Drawing operations describe loci for the placement of visible marks on the
image, analogous to drawing on a piece of paper by making a motion with a pen in contact with the surface.
Control operations are used to initiate and guide the execution of computer functions leading to
modification of the visible marks. Control operations are especially important to the performance of editing
functions such as erasing, moving, or changing the visual qualities (e.g. line width) of visible marks in
the image.Underlying such an interactive computer-assisted graphical editing tool is means for maintaining
information about the graphic elements of the image that may be selected and modified under user control.
The various extant computer-assisted drawing tools may be classified along a spectrum defined by
the granularity of the manipulable graphical elements. On the one hand, so-called paint programs manipulate
the visual content of images at the level of individual pixels, each of whose lightness and/or color
properties is modifiable independently from the other pixels. While paint style programs permit detailed
refinement of an image, their inability to define and geometrically transform whole groups of pixels makes
many operations extremely tedious to perform. On the other hand, structured-graphics editing programs
operate at the level of larger abstract objects such as lines, circles, and polygons whose rendition on the
imaging surface includes many pixels, all of which are modified in unison when objects are moved, deleted,
or otherwise modified. The rationale for structured-graphics editing programs lies in an assumption
that the sorts of image modifications that users will usually want to perform will be ones that preserve the
geometric structures reflected in the abstract level objects.The article "An object-oriented knowledge representation for spatial information" by Mohan et al.,
IEEE Transactions on Software Engineering, 14(5), 1998, pages 675-681, discloses an object-oriented
model for presenting abstract level objects and their spatial interrelationship in a lattice type of structure. The present invention offers a new point in the spectrum of computer
</DESCRIPTION>
<CLAIMS>
An object orientated graphic input and display system for manipulating all or a
portion of a graphical object and responsive to user selected manipulation functions,

said system comprising:

input means, display means and function selection means (70);
said input means being user manipulable for a entering graphical object onto
said display and for selecting a function on said function selection means for

manipulating said graphical object;
means for decomposing said graphical object into elemental objects;
means (106) for organizing elemental objects into a plurality of groups of
possibly overlapping objects according to their spatial relationship;
a lattice data structure (100) for storing said elemental objects, groups of
objects and their dependence on each other and said elemental objects;
means (108) for selecting a group of objects;
means for executing said selected function on said selected group of objects to
generate a new graphical object;
means for decomposing said new graphical object into new elemental objects
and new groups of objects;
wherein
said lattice data structure is stored automatically;
said means for decomposing an image operate automatically; and
said means for organizing elemental objects into a plurality of objects operate
automatically;
said means for decomposing said new image operate automatically; and by
means for automatically deleting obsolete elemental objects and obsolete

groups of objects.
The system according to claim 1, said system further comprising: 

a second data structure (104) for storing the pixel position value of the midline
of said graphical objects;
a spatial image analyzer (106) for automatically operating on values stored in
said second data structure to determine geometric properties, such as

intersections and corners, of said graphical objects, said geometric properties
being used by said means for decomposing.
The system of claim 1 or 2 wherein said lattice data structure comprises a
spatial and scale indexed graphical data structure.
A method for use in a computer system comprising input means, display means
and function selection means, for manipulating all or a portion of a graphical object,

said method comprising the steps of:

entering (134) a graphical object onto said display means;
decomposing (150) said graphical object into elemental objects;
organizing said elemental objects into a plurality of groups of possibly
overlapping objects according to their spatial relationships;
storing (136, 138) said elemental objects, groups of objects and their
dependence on each other and said elemental objects in a lattice data structure;
selecting (158) a function from said function selection means for manipulating a
group of objects;
manipulating (160) said group of objects with said selected function to generate
a new graphical object and displaying said new graphical object;
wherein
said step of decomposing said graphical objects is executed automatically,
said new image being automatically decomposed into new elemental objects;
said new elemental objects being automatically organized into new multiple and
possibly overlapping groups of elemental objects according to their spatial

relationship;
new elemental objects, new groups of objects and their dependence on each
other are automatically stored (144, 152) in a lattice data structure; and in that

obsolete elemental objects and obsolete groups of objects are deleted (330,
332) automatically from said lattice data structure.
The method of claim 4 wherein an image includes a first and a second object
having a shared boundary (382), said method comprising the further steps of:


assigning a multiple role to said shared boundary, and
redefining said first and second objects into separate objects, one of said
objects having a boundary duplicating said shared boundary.
The method of claim 4 wherein Prime Objects are elemental objects consisting
of lines or line fragments, said Prime Objects are grouped into Composite Objects,

said method comprising the further steps of:

deriving two Stroke Ends for each Prime Object (218), each of said Stroke
Ends describing the location and orientation of one end of a Prime Object;
creating (214) a list of Prime Objects corresponding to Composite Objects;
creating (216) a list of Composite Objects corresponding to Prime Objects; and
identifying objects in accordance with items selected from each of said lists.
The method of claim 6, comprising the further step of creating a list of series of
pairs of Stroke Ends corresponding to Prime Objects.
The method of claim 7, comprising the further steps of:

organizing (220) objects by size and creating (222) lists of objects by size;
organizing (224) objects by location and creating (226) lists of objects by
location;
defining (228) spatial neighborhoods for groups of objects;
assigning (230) a token to each object; and
arraying (232) respective tokens in a data structure array by groups within a
predetermined range of scaled space.
The method of claim 8, comprising the further steps of:

determining new Prime Objects,
detecting (310) intersection locations of new Prime Objects with Old Prime
Objects,
detecting (312) T junctions of added Prime Objects with existing Prime Objects, 
creating (316) a new set of Prime Object,
updating (318) Stroke Ends associated with each Composite Object,
removing (320) Composite Objects associated with obsolete Prime Objects,
removing (322) Stroke Ends associated with obsolete Prime Objects,
writing (324) new Stroke Ends into data structures and mark,
resolving (326) marked Stroke Ends as changed Stroke Ends,
detecting (328) changed Stroke Ends and merging same with associated Prime
Objects,
replacing (334) obsolete Prime Objects with new Prime Objects,
replacing (336) obsolete Composite Objects with new Composite Objects,
extracting (338) Prime Objects associated with changed Stroke Ends, and
storing (340) extracted Prime Objects.
The method of claim 8, comprising the further steps of:

deleting (356) Stroke Ends associated with obsolete Prime Objects from said
lattice data structure,
marking (358) junction Stroke Ends as affected,
performing (360) resolve junctions on affected Stroke Ends,
marking (362) affected Stroke Ends which are changed by removed Prime
Objects as changed Stroke Ends,
detecting (364) pairs of changed Stroke Ends and merging with Prime Objects,
removing (366) and replacing obsolete Prime Objects,
removing (368) and replacing obsolete Composite Objects, and
extracting (370) Prime Objects associated with changed Stroke Ends.
</CLAIMS>
</TEXT>
</DOC>
