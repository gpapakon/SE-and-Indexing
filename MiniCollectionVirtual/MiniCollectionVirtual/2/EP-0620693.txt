<DOC>
<DOCNO>EP-0620693</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Telecommunications switch control
</INVENTION-TITLE>
<CLASSIFICATIONS>H04Q3545	H04Q300	H04Q358	H04M342	H04Q358	H04Q3545	H04Q300	H04M342	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>H04Q	H04Q	H04Q	H04M	H04Q	H04Q	H04Q	H04M	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>H04Q3	H04Q3	H04Q3	H04M3	H04Q3	H04Q3	H04Q3	H04M3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A telecommunications switching system includes a Switch Control component for 
a Service Logic Execution Environment (SLEE), wherein the rest of the SLEE and the 

Service Logic Programs (SLPs) are running above the Switch Control Component and 
the Switch Control provides an interface resulting in the SLEE and SLPs being 

independent of a switch to which they are connected. The switch control contains 'mix 
and match' modules which each perform well-defined functions. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ERICSSON AB
</APPLICANT-NAME>
<APPLICANT-NAME>
ERICSSON AB
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
SANDERS JEFFREY ALLEN
</INVENTOR-NAME>
<INVENTOR-NAME>
TAVANYAR SIMON EDWIN
</INVENTOR-NAME>
<INVENTOR-NAME>
WEINER STEVEN MICHAEL
</INVENTOR-NAME>
<INVENTOR-NAME>
SANDERS, JEFFREY ALLEN
</INVENTOR-NAME>
<INVENTOR-NAME>
TAVANYAR, SIMON EDWIN
</INVENTOR-NAME>
<INVENTOR-NAME>
WEINER, STEVEN MICHAEL
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a Switch Control of a Service Logic Execution Environment (SLEE), allowing the rest of the SLEE and the Service Logic Programs (SLPs) running above it to be independent of the switch to which they are connected. This is achieved by designing the Switch Control to contain 'mix and match' modules which each perform well-defined functions."An Application Programming Interface for the Intelligent Network", by C J Sage, published in International Switching Symposium, vol.5, 28 May 1990, Stockholm, SE, pages 143-146, refers to a major objective of the Intelligent Network being the rapid introduction of new services in a multi-vendor environment. The Application Programming Interface enables the applications programmer to write services or service features that can be installed on any vendors Service Control Point (SCP) without a detailed knowledge of the underlying hardware or software environment."Development of Intelligent Network System" by T Shimogaki et al. deals with some aspects of inter-node communications between SCP and SSP, but solution as in the invention now to be described is neither disclosed nor suggested in this prior art document.According to the present invention there is provided a telecommunications switching system comprising a Service Control Point and a Switch connected to one another, the Service Control Point including a Service Logic Execution Environment, Service Logic Programsand an Operating System, the Service Logic Execution Environment comprising a Switch Control and the rest of the Service Logic Execution Environment, the Switch Control forming an interface for the Service Logic Execution Environment and wherein means are provided whereby the rest of the Service Logic Execution Environment and the Service Logic Programs run above the Switch Control and whereby the rest of the Service Logic Execution Environment and Service Logic Programs are independent of the Switch to which they are connected and at least one of the components of the Switch Control is dependent on the Switch to which it is connected and the Service Logic Execution Environment is adapted to provide protection for the Service Logic Programs from changes in the Operating System and wherein the Switch Control is adapted to convert messages between a block structure format used within the rest of the Service Logic Execution Environment and a transfer syntax for communicating with the Switch.The present invention will now be described, by way of example, with reference to the
</DESCRIPTION>
<CLAIMS>
A telecommunications switching system comprising a Service Control Point and a Switch connected to one another, the Service Control Point including a Service Logic Execution Environment, Service Logic Programs and an Operating System, the Service Logic Execution Environment comprising a Switch Control and the rest of the Service Logic Execution Environment, the Switch Control forming an interface for the Service Logic Execution Environment and wherein means are provided whereby the rest of the Service Logic Execution Environment and the Service Logic Programs run above the Switch Control and whereby the rest of the Service Logic Execution Environment and Service Logic Programs are independent of the Switch to which they are connected and at least one of the components of the Switch Control is dependent on the Switch to which it is connected and the Service Logic Execution Environment is adapted to provide protection for the Service Logic Programs from changes in the Operating System wherein the Switch Control is adapted to convert messages between a block structure format used within the rest of the Service Logic Execution Environment and a transfer syntax for communicating with the Switch.
A telecommunications switching system, as claimed in Claim 1, wherein the Service Logic Execution Environment includes means to provide a higher level of functionality above the Operating System.
A telecommunications switching system, as claimed in Claim 1 or 2, wherein the Switch Control is adapted to handle the protocols and higher level messages between a Service Switching Point and the Service Control Point.
</CLAIMS>
</TEXT>
</DOC>
