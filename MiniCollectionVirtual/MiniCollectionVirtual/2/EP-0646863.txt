<DOC>
<DOCNO>EP-0646863</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Positioning for multiple icons.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F3048	G06F3048	G06F314	G06F314	G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F3	G06F3	G06F3	G06F3	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A method, system and program for creating child graphical objects in 
an object oriented graphical user interface. First, the child object is 

created by copying a set of attributes from a parent graphical object to a 
memory partition allocated to the first child graphical object. This 

operation is typically called inheritance or subclassing in object oriented 
programming. Next, the location data of the first child graphical object 

is automatically changed from those copied from the parent graphical object. 
Next, the parent and child graphical objects are displayed on a display in 

the graphical user interface, the child graphical object being offset in 
location from the parent graphical object. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
JOHNSON KARL DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
LEWIS JUDITH HOLBROOK
</INVENTOR-NAME>
<INVENTOR-NAME>
STONE STEVE STANLEY
</INVENTOR-NAME>
<INVENTOR-NAME>
JOHNSON, KARL DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
LEWIS, JUDITH HOLBROOK
</INVENTOR-NAME>
<INVENTOR-NAME>
STONE, STEVE STANLEY
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to positioning for icons in a graphical 
user interface. With the increasing complexity of computer programming in today's 
systems, object-oriented programming has received increased attention in an 
effort to reduce the work required to upgrade and maintain programming. 
Object-oriented programming offers software developers the ability to reuse 
and extend units of programming called "objects" which encapsulate both 
methods and data. Object-oriented programs are easier to maintain and 
enhance than traditional procedure based programming. Design changes in 
parent objects will transfer through to any child objects which inherit 
behaviour or data from their parents during the runtime build of the object-oriented 
program. Objects are generally categorized into "classes", which is a generic 
identification for an entity which exhibits certain behaviours. A class is 
a pattern which is used to create copies of the original object. Each copy 
of the class is called an "object" or an "instance" of a class. The object 
has behaviour supplied by the method it gets from its class object, and a 
state from the data values it gets when it is created together with the 
values computed by its methods. Inheritance, subclassing or class 
derivation is a technique for developing new classes from existing classes. 
The original class is called a "base class" or "parent class" and the 
derived class is called a "child class or subclass". The primary advantage 
of inheritance is that a derived class inherits all its patent's methods. 
Also, through inheritance, a new class can override or redefine methods of 
its parent class to provide new functions as required. Object-oriented programming can be used for any purpose that 
traditional procedure based programming can be used, including the creation 
of a graphical user interface. Because of the amount of programming 
required to create graphical objects such as icons, a programmer wants to 
develop new objects which inherit as many of their attributes as possible 
from the parent object. One particular problem of iteratively creating 
multiple child graphical objects, is that each new object of a particular 
class will be positioned exactly in the same spot on the screen as they 
inherit 3 position data and attributes from their parent. Since each new 
created icon appears on top of all previously created icons, only the most  
 
recently created icon will ever be visible in the graphical user interface. The prior art solves this
</DESCRIPTION>
<CLAIMS>
A method for creating a first child graphical object in an object 
oriented graphical user interface comprising the steps of: 

   copying data from a parent graphical object to the first child 
graphical object in a memory; 

   changing location data of the first child graphical object from 
location data copied from the parent graphical object; and 

   displaying the parent and child graphical objects on a display in the 
graphical user interface, the child graphical object being offset in 

location from the parent graphical object. 
A method as claimed in claim 1 comprising the steps of: 
   repeating the copying and changing steps for a second child graphical 

object; 
   determining whether location data of the second child graphical object 

are closer than a prescribed distance from location data of the first child 
graphical object; 

   changing the set of location attributes of the second child graphical 
object until further than the prescribed distance of those of the first 

graphical object; and 
   displaying the parent and child graphical objects on a display 
in the 
graphical user interface, the child graphical objects being offset in 

location from the parent graphical object and each other. 
A method as claimed in claim 2 wherein the first child graphical 
object location data are changed by a first offset from those of the parent 

graphical object. 
A method as claimed in claim 3 wherein the second child graphical 
object location data are changed by a second offset in the second changing 

step. 
A method as claimed in claim 1 comprising the step of further changing 
the first child graphical object location data according to a drag and drop 

operation. 
A system for creating a first child graphical object in an object 
oriented graphical user interface, the system comprising: 

   means for copying from a parent graphical object to a memory 
partition allocated to the first child graphical object in a memory; 

   means for changing location data of the first child graphical object 
from those copied from the parent graphical object; and 

   means for displaying the parent and child graphical objects on a 
display in the graphical user interface, the child graphical object being 

offset in location from the parent graphical object. 
A system as claimed in claim 6 comprising : 
   means for repeating the copying and changing steps for a second child 

graphical object; 
   means for determining whether location data of the second child 

graphical object are closer than a prescribed distance from location data 
of the first child graphical object; 

   means for changing location data of the second child graphical object 
until further than the prescribed distance from location data of the first 

child graphical object; and 
   means for displaying the parent and child graphical objects on a 

display in the graphical user interface, the child graphical objects being 
offset in location from the parent graphical object and each other. 
A system as claimed in claim 7 wherein the first child graphical 
object location data are changed by a first offset from those of the parent 

graphical object. 
A system as claimed in claim 8 wherein the second child graphical 
object location data are changed by a second offset in the second changing 

 
step. 
A system as claimed in claim 6 comprising means for further changing 
the first child graphical object location data according to a drag and drop 

operation. 
A system as claimed in claim 6 comprising: 
   a memory coupled to a system bus for storing the graphical objects and 

sets of instructions for displaying the graphical user interface; 
   a processor coupled to the system bus for executing the sets of 

instructions stored in the memory; 
   a display coupled to the system bus for displaying the graphical user 

interface; and 
   an input device for inputting user commands to the system. 
</CLAIMS>
</TEXT>
</DOC>
