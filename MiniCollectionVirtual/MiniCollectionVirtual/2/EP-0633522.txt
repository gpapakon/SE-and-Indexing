<DOC>
<DOCNO>EP-0633522</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Pipelined data processing system capable of stalling and resuming a pipeline operation without using an interrupt processing
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F948	G06F1710	G06F1710	G06F938	G06F938	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F17	G06F17	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A pipelined data processing system has an instruction set containing 
a stall instruction, and includes a plurality of stages and a pipeline 

controller for controlling execution and stall of a pipeline operation. The 
pipeline controller is configured to put the stages into a "frozen" 

condition on the basis of a stall signal generated by execution of the stall 
instruction, and to return the stages from the "frozen" condition to a 

"run" condition on the basis of an output pulse generated by a timer 
designated by an operand part of the stall instruction. 


 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
NIPPON ELECTRIC CO
</APPLICANT-NAME>
<APPLICANT-NAME>
NEC CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
OOI YASUSHI
</INVENTOR-NAME>
<INVENTOR-NAME>
OOI, YASUSHI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to a data processing system, and more
specifically to a pipelined data processing system including a synchronous
instruction for controlling a stall and a resume of a pipelined processing.In data processing systems for a signal processing, a system
configured to start its processing in synchronism with a periodical event is
the most fundamental system. In the signal processing for an audio signal
or an image signal, it is an ordinary practice that new data is supplied to
the data processing system in synchronism with a sampling rate of the
signal, and the data processing system starts a filtering processing or a
predicting processing in response to arrival of the data.In the case that the signal processing is executed in a programmable
data processing system such as a CPU (central processing unit) or a DSP
(digital signal processor), the number of execution steps changes
dependently upon a conditional branch and other factors, and therefore, a
periodical event is preferably supplied to the data processing system as an
external factor. In addition, the data processing system is required to have a
sufficiently high operation speed for the purpose of complying with a real
time signal processing. One means meeting with this demand is a pipeline
processing in which an instruction execution process is divided into a
plurality of stages, for example, an instruction fetch stage (IF), an
instruction decode stage (ID), an execution stage (EX1) and a writing
stage (WB), so that these stages are simultaneously operated and a stream
of instructions are executed in a multiplexed manner.Furthermore, an interrupt is conventionally used as a means for
notifying generation of the periodical event to the data processing system
as the external factor. For example, a pulse signal periodically outputted
from a timer is supplied to an interrupt request terminal of the data
processing system as an interrupt request signal, and a processing to be
periodically performed is executed in an interrupt processing routine
started by the data processing system when the data processing system has
acknowledged the interrupt request.In addition, if there are a plurality of causes for processings to be
periodically performed, it is necessary that the interrupt processing is
multiplexed, and therefore, it is necessary to give an order of priority to
the plurality of interrupt causes. Accordingly, the system becomes
further complicated, and an overhead becomes large because of various
register savings in a
</DESCRIPTION>
<CLAIMS>
A data processing system having a pipelined structure in which an
instruction execution process is divided into a plurality of stages (IF, ID, EX1, EX2), the data

processing system having an instruction set containing a stall instruction,
and comprising a pipeline control means (8) for controlling the execution and

stall of a pipeline operation, said pipeline control means being configured
to put said stages into a "frozen" condition on the basis of a stall signal

generated by execution of said stall instruction, and to return said
"frozen" condition to a "run" condition on the basis of an output signal

generated by a pipeline operation resume means designated by said stall
instruction.
A data processing system claimed in Claim 1 wherein said stall
instruction includes an operand part designating said pipeline operation

resume means.
A data processing system claimed in Claim 1 wherein said pipeline
control means includes a memory means (11) for storing a setting and a

releasing of the stall of the pipeline operation, said memory means having
a set terminal (S) connected to receive a decoded signal of said stall

instruction outputted from an instruction decode stage in the pipelined
structure, an output (Q) of said memory means being supplied to a plurality of

stage registers in the pipelined structure so as to inhibit a writing to each
of said stage registers when said memory means is in a set condition, said

memory means also including a reset terminal (R) connected to receive said
output signal generated by said pipeline operation resume means 

designated by said stall instruction, so that when said memory means is in
a reset condition, the writing to each of said stage registers is allowed.
A data processing system claimed in Claim 1 wherein said pipeline
control means (8) includes a memory means (11) for storing a setting and a

releasing of the stall of the pipeline operation, said memory means having
an set terminal (S) connected to receive a decoded signal of said stall

instruction outputted from an instruction decode stage in the pipelined
structure, an output (Q) of said memory means being supplied through a gate

means (31, 32, 33) to a plurality of stage registers (1, 3, 4) in the pipelined structure so as to
inhibit a writing to each of said stage registers when said memory means

is in a set condition, said output signal generated by said pipeline
operation resume means designated by said stall instruction being supplied

to a reset terminal (R) of said memory means and said gate means, so that said
memory means (11) is put into a reset condition and said output signal is

supplied through said gate means to each of said stage registers so as to
allow the writing to each of said stage registers.
A data processing system claimed in Claim 1 wherein said pipeline
control means (8) includes a gate means (21, ..., 27) for storing a setting and a releasing

of the stall of the pipeline operation, an output of said gate means being
connected to a control input of each of a plurality of stage registers (1, 3, 4) in the

pipelined structure, a decoded signal of said stall instruction outputted
from an instruction decode stage (10) in the pipelined structure being supplied

to said gate means so as to inhibit a writing to each of said stage registers (1, 3, 4),
said output signal generated by said pipeline operation resume means 

designated by said stall instruction being also supplied to said gate means (21, ..., 27)
so as to allow the writing to each of said stage registers.
A data processing system claimed in Claim 1 wherein said pipeline
control means includes a selection means (21, ..., 24) for selecting from a plurality of

pipeline operation resume means, one designated by said stall instruction.
A data processing system claimed in Claim 1 wherein said pipeline
control means includes a means for resetting (24) the designation of the

pipeline operation resume means by said stall instruction, when said stall
instruction is transferred to a second execution stage and if an instruction

next to said stall instruction is not a stall instruction.
A data processing system claimed in Claim 1 wherein said pipeline
operation resume means includes at least one timer (5, 6, 7) periodically

generating a predetermined pulse signal.
</CLAIMS>
</TEXT>
</DOC>
