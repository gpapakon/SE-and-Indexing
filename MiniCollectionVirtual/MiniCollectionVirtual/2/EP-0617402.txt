<DOC>
<DOCNO>EP-0617402</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Methods and apparatus for accelerating windows in graphics systems
</INVENTION-TITLE>
<CLASSIFICATIONS>G09G5393	G09G536	G09G514	G09G514	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G09G	G09G	G09G	G09G	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G09G5	G09G5	G09G5	G09G5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Graphics window systems which utilize graphics 
pipelines and graphics pipeline bypass buses. Hardware solutions 

for window relative rendering of graphics primitives, block 
moving of graphics primitives, transfer of large data blocks, and 

elimination of pipeline flushing are disclosed. The hardware 
implementations provided in accordance with the invention are 

interfaced along the pipeline bypass bus, thereby eliminating 
gross overhead processor time for the graphics pipeline and 

reducing pipeline latency. Methods and apparatus provided in 
accordance with the invention exhibit significant pipeline 

efficiency and reductions in time to render graphics primitives 
to the screen system. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ALCORN BYRON A
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT DAREL N
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON RONALD D
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN DESI
</INVENTOR-NAME>
<INVENTOR-NAME>
ALCORN, BYRON A.
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT, DAREL N.
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON, RONALD D.
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO, DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN, DESI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to computer workstation window
systems. More specifically, this invention relates to method and
apparatus for accelerating graphics primitive rendering on
multitasking workstations that utilize graphics pipelines.Computer workstations provide system users with
powerful tools to support a number of functions. An example of
one of the more useful functions which workstations provide is
the ability to perform highly detailed graphics simulations for a
variety of applications. Graphics simulations are particularly
useful for engineers and designers performing computer aided
design (CAD) and computer aided management (CAM) tasks.Modern workstations having graphics capabilities
utilize "window" systems to accomplish graphics manipulations.
An emerging standard for graphics window systems is the "X"
window system developed at the Massachusetts Institute of
Technology. The X window system is described in K. Akeley and T.
Jermoluk, "High-Performance Polygon Rendering", Computer
Graphics, 239-246, (August 1988). Modern window systems in
graphics workstations must provide high-performance, multiple
windows yet maintain a high degree of user interactivity with the 
workstation. Previously, software solutions for providing
increased user interactivity with the window system have been
implemented in graphics workstations. However, software
solutions which increase user interactivity with the system tend
to increase processor work time, thereby increasing the time in
which graphics renderings to the screen in the workstation may be
accomplished.A primary function of window systems in graphics
workstations is to provide the user with simultaneous access to
multiple processes on the workstation. However, each of these
processes provides an interface to the user through its own area
onto the workstation display. The overall result is an increase
in user productivity since the user can manage more than one task
at a time with multiple windows. However, each process
associated with a window views the workstation resources as if it
were the sole owner. Thus, resources such as the processing
unit, memory, peripherals and graphics hardware must be shared
between these processes in a manner which prevents interprocess
conflicts on the workstation.Graphics workstations generally utilize graphics
"pipelines" which interconnect the various components of the
system. A graphics pipeline is a series of data processing
elements which communicate graphics commands through the graphics
system. Today, graphics
</DESCRIPTION>
<CLAIMS>
A system for rendering data blocks comprising a host
processor (20) and a graphics subsystem having a frame

buffer (70), a graphics pipeline (50),

a pipeline bypass (90) interfaced with the host
processor (20) and the frame buffer (70) for optimizing a

bandwidth between the host processor (20) and the frame
buffer (70), for providing a high speed path between the

frame buffer (70) and the host processor (20), and for
providing a source reference address or a destination

reference address in host processor memory,
data block storage means (500) having at least one data
register (510) interposed on the pipeline bypass (90)

between the host processor (20) and the frame buffer (70)
for either directly storing data blocks received from the

host processor (20) or for transmitting the data blocks from
the frame buffer (70) to the host processor (20), and
an address manipulator (250) interfaced with the data
register (510) and the frame buffer (70), the address

manipulator (250) being adapted to render the data blocks on
the frame buffer (70) at frame buffer relative block destination addresses, and to clip left and right edges of a

data block in response to offset operands from the host
processor (20), the said clipped data block thereby defining

a sub-block.
The system recited in Claim 1, wherein the data register
(510) is a first-in, first-out data register.
The system recited in Claim 2, wherein the data register
(510) comprises a plurality of first-in, first-out data

registers.
The system recited in any one of the preceding Claims,
wherein the frame buffer (70) is a video random access 

memory.
The system recited in any one of the preceding Claims,
wherein the data stored in the data register (510) are

graphics primitives.
The system recited in any one of the preceding Claims,
wherein the address manipulator (250) is adapted to receive

data from the host processor (20) indicative of whether the
block is addressed relative to a window origin or relative

to the frame buffer origin.
A method of rendering data blocks in a graphics system
from a host processor (20) directly on a frame buffer (70)

using data block storage means (500), the system having an
address manipulator (250), a graphics pipeline (50) and a

pipeline bypass (90), the graphics pipeline (50) being
interfaced with the host processor (20) and the frame buffer

(70), and the address manipulator (250) being operatively
coupled to the host processor (20) and the frame buffer (70)

by the pipeline bypass (90) comprising the steps of:

writing (520) block reference addresses from the host
processor (20) to a data register (380) in the address

manipulator (250) via the pipeline bypass (90);
writing (530) block size data from the host processor
(20) to a data register (400) in the address manipulator via

the pipeline bypass (90);
writing (540) alignment data from the host processor
(20) to a data register (510) interposed on the pipeline

bypass (90);
writing (570) block data from the host processor (20)
to the data block storage means (500);
either rendering the block data stored in the data block 
storage means (500) on the frame

buffer 70 at said reference addresses or transmitting block data from the frame buffer
(70) to the host processor (20); and
aligning the block data on the block rendered to the
frame buffer (70) by clipping left and right edges of the

block data in response to offset operands from the host
processor (20), the said clipped data block thereby defining

a sub-block.
The method recited in Claim 7, wherein the aligning step
comprises comparing the block reference addresses with the

block size data and discarding data from the block reference
addresses which falls outside the block size data.
The method recited in Claim 7 or Claim 8, wherein the
frame buffer (70) is a video random access memory.
The method recited in any one of Claims 7 to 9 wherein
the block data written to the data block storage means from

the host processor (20) corresponds to graphics primitives.
The method recited in Claim 10, wherein the address
manipulator (250) is interfaced with a pixel cache buffer

(230) for receiving the graphics primitives, the pixel cache
buffer (230) being interfaced directly with the frame buffer

(70).
The method recited in any one of Claims 7 to 11, wherein
the data block storage means (500) comprises a first-in,

first-out register for providing independent transfer of
data between the host processor (20) and the frame buffer

(70).
The system recited in any one of Claims 7 to 12, wherein
the rendering step is accomplished with the address

manipulator (250).
</CLAIMS>
</TEXT>
</DOC>
