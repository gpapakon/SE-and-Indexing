<DOC>
<DOCNO>EP-0614533</DOCNO> 
<TEXT>
<INVENTION-TITLE>
METHOD FOR OPTIMIZING ERROR CORRECTIONS FOR BINARY LOGIC COMPONENTS
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1718	H03M110	H01P118	H03M110	G06F1718	H03M166	H03M172	H01P118	H01Q338	H01Q330	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	H03M	H01P	H03M	G06F	H03M	H03M	H01P	H01Q	H01Q	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	H03M1	H01P1	H03M1	G06F17	H03M1	H03M1	H01P1	H01Q3	H01Q3	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Error correction values for binary logic components used in providing a phase shift to an RF signal are optimized to provide improved overall performance. Initially, each component is adjusted to minimize the overall phase error while the other components are in an inactive state. After the initial adjustment, statistical methods based on Tables of Contrasts and Yates' Algorithm are used to determine full-factorial main effects. A full-factorial analysis is a statistical analysis in which the responses of all possible binary logic states are compared. The full-factorial analysis is used to quantify the main effects which are the error contributions of each of the individual binary logic components. These main effects are then used as error correction or adjustment values for the binary logic components.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ALLIED SIGNAL INC
</APPLICANT-NAME>
<APPLICANT-NAME>
ALLIEDSIGNAL INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
KOMAREK STEFAN R
</INVENTOR-NAME>
<INVENTOR-NAME>
KOMAREK, STEFAN, R.
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relations to a method for 
optimizing error corrections, more specifically it 
relations to optimizing error corrections for binary 
logic components. A binary logic component is a component that has 
two states. The first state is an active state in 
which the component performs a desired function. The 
second state is an inactive state in which the 
component does not perform the desired function. The 
desired function can be digital or analog in nature. 
It can involve filtering such as low pass filtering, 
band pass filtering or high pass filtering and may 
include adjustable cutoff frequencies and band widths. 
The function can also be a phase shift function where 
the amount of the electrical phase may be adjustable. 
The component can also perform an attenuation or 
amplification function where the amount of attenuation 
or the amount of amplification may be adjustable. 
Other types of signal processing functions are also 
possible. In some applications, binary logic components 
interact in a fashion that makes it difficult to adjust 
a component to minimize the overall error produced by 
several binary logic components acting together. An  
 
example of such a situation relates to binary logic 
components used in microwave applications. In this 
situation, factors such as impedance mismatches make it 
difficult to adjust the binary logic components in a 
fashion that minimizes the overall error produced by a 
group of binary logic components acting together. The 
adjustment is difficult because the way in which the 
binary logic components interact is a function of what 
combination of components are in their active states. In the past, this problem was approached using a 
trial and error method. The procedure involved 
minimizing the error by making an initial adjustment to 
each binary logic component while the other binary 
logic components were in an inactive state. 
Unfortunately, when the other components where 
activated, the resulting error for the group of 
components acting together was not minimized. In 
addition, the resulting error varied depending on which 
of the other binary logic components were active. This 
problem was addressed by a trial and error method of 
individually readjusting each of the binary logic 
components in a effort to minimize the overall error 
produced by the group of components acting together. 
This procedure was time consuming and inefficient.  
 US-A-4717894 discloses such a process for the 
calibration of a standard vector
</DESCRIPTION>
<CLAIMS>
A method for optimizing error corrections for a 
plurality of binary logic components wherein each 

binary logic component comprises an active state and an 
inactive state, the method comprising the steps of: 


(a) adjusting each binary logic component to 
minimize a difference between an actual performance in 

said active state and a desired performance while 
another binary logic component is in said inactive 

state; 
(b) determining a plurality of performance errors 
by calculating a difference between a desired 

performance and an actual performance in said active 
state for a plurality of combinations of states of said 

plurality of binary logic components (74); 
(c) determining an error difference associated 
with a binary logic component by comparing a first and 

a second performance error, said first performance 
error corresponding to a first combination of active 

and inactive states of said plurality of binary logic 
components and said second performance error 

corresponding to a second combination of active and 
inactive states of said plurality of binary logic 

components, said first and said second combination of 
active and inactive states differing only by a state of 

said binary logic component (76); and 
(d) adjusting said binary logic component based on 
said error difference associated with said binary logic 

component. 
The method of claim 1, wherein the step of 
adjusting each binary logic component to minimize a 

difference between an actual performance and a desired 
performance is performed while a plurality of other 

binary logic components are in said inactive states.  
 
The method of claim 1, wherein the step of 
determining an error difference associated with a 

binary logic component comprises determining a 
plurality of error differences associated with said 

binary logic component. 
The method of claim 3, further comprising the step 
of averaging said plurality of error differences. 
The method of claim 1, wherein the step of 
determining an error difference associated with a 

binary logic component comprises determining an error 
difference associated with each of said plurality of 

binary logic components (78-86). 
The method of claim 5, further comprising the step 
of adjusting each of said plurality of binary logic 

components based on said error difference associated 
with each of said plurality of binary logic components 

(88). 
The method of claim 6, wherein the step of 
determining an error difference associated with a 

binary logic component comprises determining a 
plurality of error differences associated with each of 

said plurality of binary logic components. 
The method of claim 7, further comprising the step 
of averaging said plurality of error differences 

associated with each of said plurality of binary logic 
components. 
The method of claim 1, wherein the step of 
adjusting each binary logic component to minimize a  

 
difference between an actual performance and a desired 

performance comprises adjusting a phase shift produced 
by said binary logic component. 
A method for optimizing error corrections for a 
plurality of binary logic components, wherein each 

binary logic component comprises an active state and an 
inactive state, the method comprising the steps of: 


(a) adjusting a phase shift introduced by each 
binary logic component to minimize a difference between 

an actual performance and a desired performance while a 
plurality of other binary logic components are in said 

inactive states; 
(b) determining a plurality of phase errors by 
calculating a difference between a desired phase shift 

and an actual phase shift for a plurality of 
combinations of states of said plurality of binary 

logic components (74); 
(c) determining a plurality of phase error 
differences associated with each of said plurality of 

binary logic components, a phase error difference 
associated with a binary logic component being 

determined by comparing a first and a second phase 
error, said first phase error corresponding to a first 

combination of active and inactive states of said 
plurality of binary logic components and said second 

phase error corresponding to a second combination of 
active and inactive states of said plurality of binary 

logic components, said first and said second 
combination of states active and inactive differing 

only by a state of said associated binary logic 
component (76-86); 
(d) averaging said plurality of phase error 
differences associated with each of said plurality of 

binary logic components; and  
 
(e) adjusting each of said plurality of binary 
logic components based on an average phase error 

difference associated with each of said plurality of 
binary logic components (88). 
</CLAIMS>
</TEXT>
</DOC>
