<DOC>
<DOCNO>EP-0614152</DOCNO> 
<TEXT>
<INVENTION-TITLE>
SYSTEM FOR OPTIMAL ELECTRONIC DEBUGGING AND VERIFICATION EMPLOYING SCHEDULED CUTOVER OF ALTERNATIVE LOGIC SIMULATIONS.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F1750	G06F1750	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F17	G06F17	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system for determining the optimal circuit design simulator 
schedule for debugging a digital electronic circuit design. 

The system characterizes all available circuit design 
simulators in terms of several parameters reflecting simulator 

speed and the time required to discover, isolate and fix a 
design error (bug). A cutover point is established for any 

pair of available simulators on the basis of these parameters. 
One simulator is progressively more efficient than the other 

beyond this cutover point, which is the desired time for 
scheduling substitution of the more efficient simulator during 

the debugging process. The system also permits "what-if" 
evaluation of alternative debugging strategies in advance by 

creating alternative schedules in response to various 
characteristic parameters. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
MYERS JOHN DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RIVERO JOSE LUIS
</INVENTOR-NAME>
<INVENTOR-NAME>
MYERS, JOHN DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RIVERO, JOSE LUIS
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to systems for the debugging of digital 
electronic systems and, more specifically, to a system for 
optimal scheduling of logic simulators used in such debugging. In debugging new digital electronic circuit designs, it is 
common to use circuit simulations to test for errors in the 
design. Such simulations may be implemented as computer 
programs running on a general-purpose computer, or as special 
hardware-software combinations intended for simulating digital 
systems. The term "simulator" as used herein denominates any 
of a range of software and hardware assemblies as well as the 
circuit prototype itself. Different types of simulators are often used at different 
stages of the design process. As the design debugging 
progresses, hardware typically replaces software and mixed 
hardware-software simulators yield eventually to the design 
prototype itself. This is necessary because each simulator 
differs in speed, in available range of identifiable errors, 
and in ease of modification required to incorporate a design 
revision or "fix" for a design error or "bug". They also 
differ in ease of finding a bug because the software simulator 
provides internal logic signals while the hardware chip is 
limited to actual inputs and outputs. For example, a software 
simulator may cycle millions of times more slowly than the 
equivalent hardware prototype but can be modified merely by  
 
editing a file on a computer screen in a few minutes. Fixing 
the same bug in a full-speed hardware prototype requires 
refabricating a new version of an integrated circuit, a 
process that can take weeks. Likewise, two software 
simulators may differ considerably in cycle speed and range of 
detectable errors if, for example, one simulates signal timing 
and the other does not. In scheduling a debug strategy for a new digital system 
design, the "cutover" points must be established for moving 
from a slower, "soft" simulator to a faster, "hard" simulator. 
This decision may be complicated when the scheduled simulators 
are shared among several projects. Although the estimation of the number of bugs (design errors) 
in a digital circuit design is a well-known procedure that 
considers the size and complexity of the design, there is no 
equivalently formal method known in the art for establishing 
the cutover point from one simulator to the next. The cutover 
is typically accomplished on an ad hoc basis, determined by 
the designer's intuition and unrelated production schedules. 
The release of the
</DESCRIPTION>
<CLAIMS>
A method for debugging a digital electronic circuit 
design having no more than N bugs that are discoverable 

in no more than M(N)=M machine cycles of said digital 
electronic circuit design, each said bug n being 

discoverable in M(n) machine cycles using a plurality of 
circuit design simulators {S}, each said simulator Si 

having an availability fraction hi, having a machine cycle 
time ci and having an average fix delay time Di between 

discovery of the nth said bug and correction of said nth 
bug, wherein i and n are non-zero positive integers, said 

method comprising the ordered computer-implemented steps 
of: 


(a) identifying the number of said machine cycles M(nci), 
corresponding to a cutover bug number nci for which the 

debug times are most nearly equal in both of an ith pair 
of said simulators (Si, Si+1); and 
(b) generating and displaying a debugging schedule for 
said ith pair of said simulators wherein the predicted 

discovery time of said critical bug number nci is 
specified as the scheduled time for cutover from said 

simulator Si to said simulator Si+1. 
The method of Claim 1 wherein said identifying step (a) 
comprises the unordered steps of: 


(a.1) calculating an exponential coefficient A in 
accordance with the formula 

A = ln M/N  
; and 
(a.2) for at least one value of n, calculating said 
number of machine cycles M(n) required to discover the nth 

said bug in accordance with the formula 
M(n) = eA*n 

. 
The method of Claim 2 wherein said identifying step (a) 
further comprises the step of: 


(a.3) determining said average fix delay time Di as 
substantially equivalent to the sum of the 
average bug 
isolation time di and the product of the average time to 

design and implement a fix fi times the estimated 
proportion of show-stopping serial bugs si such that 

Di = 
di +si*fi. 
The method of Claim 3 wherein said identifying step (a) 
further comprises the step of: 


(a.4) determining said debug time for the nth said bug as 
substantially equivalent to the sum of the time required 

to discover said nth bug (ci*M(n)) and the average fix 
delay time Di divided by said availability fraction hi 

such that said debug time equals 

The method of Claim 4 wherein said identifying step (a) 
further comprises the step of: 


(a.5) identifying said cutover bug number nci as the 
sequential bug number most nearly equal to the value of 

the expression 
The method of Claim 1 wherein said identifying step (a) 
further comprises the step of: 


(a.1) determining said average fix delay time Di as 
substantially equivalent to the sum of the average bug 

isolation time di and the product of the average time to 
design and implement a fix fi times the estimated 

proportion of show-stopping serial bugs si such that 
Di = 

di +si*fi 
. 
The method of Claim 6 wherein said identifying step (a) 
further comprises the step of: 


(a.2) determining said debug time for the nth said bug as 
substantially equivalent to the sum of the time required 

to discover said nth bug (ci*M(n)) and the average fix 
delay time Di divided by said availability fraction hi 

such that said debug time equals 

The method of Claim 7 wherein said identifying step (a) 
further comprises the step of: 


(a.3) identifying said cutover bug number nci as the 
sequential bug number most nearly equal to the value of 

the expression 

A system for debugging a digital electronic circuit 
design having no more than N bugs that are discoverable 

in no more than M(n) = M machine cycles of said digital 
electronic circuit design, each said bug n being 

discoverable in M(n) machine cycles using a plurality of 
circuit design simulators {S}, each said simulator Si 

having an availability fraction hi, having a machine cycle 
time ci and having an average fix delay time Di between 

discovery of the nth said bug and correction of said nth 
bug, wherein i and n are non-zero positive integers, said 

system comprising: 
identification means for identifying the cutover bug 

number nci for which the debug times are most nearly equal 
in both of an ith pair of said simulators (Si, Si+1); 

generation means coupled to said identification means for 
creating a debugging schedule for said ith pair of said 

simulators (Si, Si+1) wherein the predicted discovery time 
 

of said critical bug number nci is specified as the 
scheduled time for cutover from said simulator Si to said 

simulator Si+1; and 
display means coupled to said generation means for 

displaying said debugging schedule. 
</CLAIMS>
</TEXT>
</DOC>
