<DOC>
<DOCNO>EP-0654733</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Parallel data processing in a single processor
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F753	G06F7508	G06F700	G06F700	G06F9302	G06F748	G06F938	G06F750	G06F9302	G06F938	G06F757	G06F752	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F7	G06F7	G06F7	G06F7	G06F9	G06F7	G06F9	G06F7	G06F9	G06F9	G06F7	G06F7	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system allows parallel data processing within a single processor. 
In order to allow for parallel processing of data, an arithmetic logic unit (26) 

or other operation executing entity within the processing system such as a 
shifter (29) is partitioned. Within each partition (41,51), operations are 

performed on a portion of one or more operands. When the operation is to be 
performed on full word length operands, there is no parallel processing. 

Thus data is allowed to freely propagate across boundaries between the 
partitions (41,51). When performing the operation in parallel using a 

plurality of operands of less than one full word in length, data is prevented 
from being propagated across at least one boundary between the partitions 

(41,51). The principles of the present invention may also be utilized to 
implement a multiplier (301-316,320) which performs parallel multiplication 

of partial word multiplicands. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BEI-LOH LEE RUBY
</INVENTOR-NAME>
<INVENTOR-NAME>
BEI-LOH LEE, RUBY
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention concerns parallel data processing in a single
processor system.In general, single processor systems sequentially perform operations
on two operands. For example, in a 32-bit computer, each integer operand is
32 bits. In a 64-bit computer, each integer operand is 64 bits. Thus an
integer "add" instruction, in a 64-bit computer, adds two 64-bit integer
operands to produce a 64-bit integer result. In most pipelined 64-bit
processors, a 64-bit add instruction takes one cycle of execution time.In many instances the pertinent range of operands is 16 bits or less.
In current 32-bit and 64-bit computers, however, it still takes a full
instruction to perform an operation on a pair of 16-bit operands. Thus the
number of execution cycles required to perform an operation on two 16-bit
operands is the same as the number of execution cycles required to perform
the operation on two 32-bit operands in a 32-bit computer or two 64-bit
operands in a 64-bit computer.In the prior art, parallel data processing required replicating of
functional units, each functional unit able to handle full word length data.
See for example, Michael Flynn, Very High-Speed Computing Systems,
Proceedings of IEEE, Vol. 54, Number 12, December 1966, pp. 1901-1909. EP 0 395 348 A2 concerns an apparatus for multi-gauge
computation having a CPU which comprises four independent
processing units which share access to an instruction gauge,
a cache, a memory management unit and a memory bus interface.
Multiply partial instructions are provided which
multiply bit or half word multiplicands by a common
multiplier and return independent bit or half word products.
Each processing unit includes a 32-bit multiplier that is
partitionable into two independent 16-bit or four
independent 8-bit multipliers. The mulitply partial
instruction forms a signed multiplicand from each of the
four bits or two half words in a register B and each bit of
register B is multiplied times register A. Each bit or half
word is independently multiplied and the results are stored
in the respective bits or half words of the product
register. Only the high order 16-bits of register A are used
as the multiplier whereas the low order 16-bits of register
A are ignored.GB 2 215 498 A and GB 2 172 129 A describe binary adders
and/or subtractors. In EP 0 231 899 A a multiplier array
circuit is described.However, such implementations of parallel processing is
significantly costly both in terms of hardware required and
complexity in design.In the accordance with the
</DESCRIPTION>
<CLAIMS>
A multiplier which multiplies multiplicands, the
multiplier implementing both whole word multiplication

of whole word multiplicands and implementing parallel
multiplication of sub-word multiplicands, the multiplier

comprising:

partial product generation means (301-316) for
generating partial products from the multiplicands,

wherein the partial product generation means (301-316)
comprises an array of logic gates (301-316), each logic

gate in the array of logic gates (301-316) receiving a
bit from each multiplicand and generating a partial

product;
partial product sum circuitry (320), coupled to the
partial product generation means (301-316), for summing

the partial products to produce a result;
selection means (321) for selecting one of whole word
multiplication and parallel multiplication of sub-word

multiplicands; and
partial product selection means, coupled to the partial
product generation means (301-316) and to the selection

means (321), for in response to the selection means
(321) selecting parallel multiplication of sub-word

multiplicands forcing selected partial products to have
a new value, wherein the partial product selection means

comprises third inputs to at least a portion of the
logic gates (301-316).
A multiplier as in claim 1 wherein the partial product
selection means, in response to the selection means 

(321) selecting parallel multiplication of sub-word
multiplicands, forces the selected partial products to

have a value of 0.
A multiplier as in claim 2 wherein the array of logic
gates (301-316) comprises an array of logic AND gates

(301-316).
A multiplier as in claim 2 wherein when the multiplier
is implementing whole word multiplication, the partial

product selection means does not force any partial
products to have a value of 0.
A multiplier as in claim 1 wherein the multiplier is a
Booth-encoded multiplier.
A method for performing both multiplication of whole
word multiplicands and parallel multiplication of

sub-word multiplicands, using a single hardware
multiplier, the method comprising the steps of:


(a) generating partial products, wherein step (a) is
performed using an array of logic gates (301-316),

each logic gate in the array of logic gates
(301-316) generating 
a partial product;
(b) in response to a selection to perform parallel
multiplication of sub-word multiplicands, forcing

selected partial products to have a new value by
utilizing a third input on a portion of the logic

gates (301-316); and
(c) summing the partial products to produce a result,
the summing performed using partial product sum

circuitry (320).
A method as in claim 6 wherein step (b) includes in
response to the selection to perform parallel 

multiplication of sub-word multiplicands, forcing
selected partial products to have a value of 0.
A method as in claim 7 wherein step (a) is performed
using an array of logic AND gates (301-316).
A method as in claim 8 wherein step (b) forcing selected
partial products to have a value of 0 is implemented by

placing a logic 0 on inputs to a portion of the logic
AND gates (301-316).
A method as in claim 7 wherein in step (b) when the
multiplier is implementing whole word multiplication,

not forcing any partial products to have a value of 0.
</CLAIMS>
</TEXT>
</DOC>
