<DOC>
<DOCNO>EP-0638862</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method and system for processing language
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F945	G06F945	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
In a language processing system for 
translating a source program (70) into a machine 

language program (100), a range of the source program 
to be optimized is discriminated during parsing to 

generate an optimization enabling and disabling code 
(OPTBEG, OPTEND) to be inserted in an intermediate code 

(80) resulting from parsing. An optimization process 
for the intermediate code is performed only for a 

range, in which optimization can be performed, 
determined on the basis of the optimization enabling 

and disabling code. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
NIPPON ELECTRIC CO
</APPLICANT-NAME>
<APPLICANT-NAME>
NEC CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
INOUE MASAHARU
</INVENTOR-NAME>
<INVENTOR-NAME>
INOUE, MASAHARU
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates generally to a
method and a system for processing a language
information. More specifically, the invention relates
to a language processing system and a language
processing method to be employed for code processing in
a high-level language as a program language for a
microcomputer.In general, a machine language program for
commanding operation to a computer is described as a
string of figures in binary, hexadecimal notation and
so forth so that the computer may executes the
commanded operation. The machine language program
described in the string of figures, is too difficult to
understand. Therefore, a programmer prepares a program
(hereinafter referred to as "source program") employing
a high-level language which takes expression easy to be
understood. The source program thus written in the
high-level language is translated into a machine
language program by means of a language processing
system (a language processing program). The machine
language program thus translated is transferred to the
computer for execution. A compiler is one of the 
language processing system for performing translation.Hereinafter, discussion will be given for an
example of a language processing in the prior art. The
programmer prepares the source program and input to the
compiler. The compiler input the source program
performs parsing of the source program to generate an
intermediate code for outputting. Here, the
intermediate code is an aggregate of information
obtained through conversion of the source program
described by the high level language into a format easy
to be processed by the language processing program.As an example of such intermediate code, a
code called as "three address code" will be shown
herein. The three address code is a kind of the
intermediate code and having a format shown in the
following table 1.
1)A = B op C \\2)A = op B \\3)goto L \\4)if A relop B goto LIn the foregoing table 1, each of A, B and C
is a constant, a symbol defined by the programmer or a
name generated by the compiler. In the lines 3) and 
4), "go to L" represents a jump command for jumping a
control of the program to the position represented by a
label L. The label is a kind of tag described in the
program for identifying the position of the program or
the location of a storage region. Also, "relop" in the
line 4) represents a large and small relationship or
equal or different relationship, such as <, >, <>, =
and so forth. As a special form of the line 2), A: = B
may be present, which represents
</DESCRIPTION>
<CLAIMS>
A language processing system comprising:

parsing means (20) for inputting a source
program (70) described by a high-level language of a

computer, and a parsing instruction statement, and generating
an intermediate code (80) on the basis of the result of

parsing the source program;
code optimizing means (50) for performing an
optimizing process for a range of said intermediate

code; and
code generating means (60) for translating an
optimized intermediate code (90) optimized by said code

optimizing means into a machine language program (100),

   
CHARACTERIZED BY
optimization enabling and disabling
information generating means (30) cooperatively

associated with said parsing means for setting
ranges to be optimized with respect to said source

program,
wherein each of said ranges includes combined control statements controlling

from of the source program,
generating optimization enabling and disabling

codes (OPTBEG, OPTEND) defining the ranges to perform
optimization and inserting said optimization enabling

and disabling codes at leading and trailing ends of each range to be optimized to said intermediate code; and
said code optimizing means (50) for
performing an optimizing process for the ranges of said

intermediate code defined by said optimization enabling
and disabling codes inserted in said intermediate code.
A language processing system as set forth in
claim 1, wherein said optimization enabling and

disabling information generating means (30) generates a
start code (OPTBEG) indicative of initiation of the

optimization process and an end code (OPTEND)
indicative of termination of the optimization process,

and inserts said start code at an optimization start
position in said intermediate code and said end code at

an optimization end position in said intermediate code.
A language processing system as set forth in

claim 1, wherein said optimization enabling and
disabling information generating means (30) detects a

range where control statements controlling flow of the source
program are combined as one of said ranges to be optimized and

inserts a start code (OPTBEG) indicative of starting of
said one range for optimization and an end code (OPTEND)

indicative of end of said one range for optimization.
A language processing system as set forth in
claim 1, wherein said code optimizing means (50) 

includes optimization enabling and disabling judgement
means (40) for selecting the ranges of said intermediate

code to be optimized on the basis of said optimization
enabling and disabling codes.
A language processing system as set forth in
claim 1, wherein said optimization enabling and

disabling information generating means (30) detects a
range where control statements controlling flow of the source

program are combined as one of said ranges to be optimized and
inserts a start code (OPTBEG) indicative of starting of

said one range for optimization and an end code (OPTEND)
indicative of end of said one range for optimization, and

said code optimizing means (50) reads out said
intermediate code (80) from a beginning point and

responsive to the start code read out as a fraction of
said intermediate code to perform the optimization process

for said intermediate code until said end code is read
out.
A language processing system as set forth in
claim 1, wherein said code optimizing means (50)

performs the optimization process by detecting a loop and
an invariant within the loop within said ranges for

optimization defined by said optimization enabling and
disabling codes, and moving the detected invariant out of

said loop. 
A language processing method comprising the
steps of:


inputting a source program (70)
described by a high-level language of a computer, and a

parsing instruction statement, and generating an
intermediate code (80) on the basis of the result of

parsing the source program;
performing an optimizing process for a
range of said intermediate code (80); and
translating an optimized intermediate
code (90) optimized in said step of performing an optimizing process into

a machine language program (100),

   
CHARACTERIZED BY
the step of setting ranges to be optimized
with respect to said source program wherein each of said ranges includes combined control statements controlling flow of the source program, generating

optimization enabling and disabling codes (OPTBEG,
OPTEND) defining the ranges to perform optimization, and

inserting said optimization enabling and disabling codes
at leading and trailing ends of each range to be optimized to said intermediate code (80); and
said step of performing an optimizing process
for the ranges of said intermediate code defined by said

optimization enabling and disabling codes inserted in
said intermediate code.
A language processing method as set forth in
claim 7, wherein in said step of generating

optimization enabling and disabling codes, a 
start code (OPTBEG) indicative of initiation of the

optimization process and an end code (OPTEND)
indicative of termination of the optimization process

are generated and inserted at an optimization start
position and at an optimization end position in said

intermediate code.
A language processing method as set forth in
claim 7, wherein in said step of generating said

optimization enabling and disabling codes, a
range where control statements controlling flow of the source

program are combined is detected as one of said ranges to be
optimized and a start code (OPTBEG) indicative of

starting of said one range for optimization and an end code
(OPTEND) indicative of end of said one range for

optimization are inserted in said intermediate code.
A language processing method as set forth in
claim 7, wherein said step of performing an optimizing

process includes a step of selecting the ranges of said 
intermediate code to be optimized on the basis of said

optimization enabling and disabling codes.
A language processing method as set forth in
claim 7, wherein in said step of generating

optimization enabling and disabling codes, a
range where control statements controlling flow of the source

program are combined, is detected as one of said ranges to be
optimized and a start code (OPTBEG) is inserted which is indicative

of starting of said one range for optimization and an end
code (OPTEND) is inserted which is indicative of end of said one range for

optimization, and in said step of performing an
optimizing process, said intermediate code is input from

a beginning point and the optimization process is performed in
response to detection of said start code in said

intermediate code and continued until said end code is
read out.
</CLAIMS>
</TEXT>
</DOC>
