<DOC>
<DOCNO>EP-0653703</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Temporary pipeline register file for a superpipelined superscalar processor
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F930	G06F930	G06F938	G06F938	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A processor method and apparatus. The processor has an execution pipeline, 
a register file and a controller. The execution pipeline is for executing an instruction 

and has a first stage for generating a first result and a last stage for generating a final 
result. The register file is for storing the first result and the final result. The 

controller makes the first result stored in the register file available in the event that 
the first result is needed for the execution of a subsequent instruction. By storing 

the result of the first stage in the register file, the length of the execution pipeline is 
reduced from that of the prior art. Furthermore, logic required for providing inputs 

to the execution pipeline is greatly simplified over that required by the prior art. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
SUN MICROSYSTEMS INC
</APPLICANT-NAME>
<APPLICANT-NAME>
SUN MICROSYSTEMS, INC.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
JOY WILLIAM N
</INVENTOR-NAME>
<INVENTOR-NAME>
TREMBLAY MARC
</INVENTOR-NAME>
<INVENTOR-NAME>
YUNG ROBERT
</INVENTOR-NAME>
<INVENTOR-NAME>
JOY, WILLIAM N.
</INVENTOR-NAME>
<INVENTOR-NAME>
TREMBLAY, MARC
</INVENTOR-NAME>
<INVENTOR-NAME>
YUNG, ROBERT
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to the field of computer system design. More
specifically, the present invention relates to the design of superpipelined and
superscalar microprocessors.When microprocessors were first introduced, they typically had a central
processing unit (CPU) that used a serial hardware organization. This meant that the
major logic blocks (e.g. fetch, decode, execute and write back) were simply chained
together so that successive stages had to wait until the previous logic block finished
its operation. Therefore, an arithmetic logic unit (ALU) of the execute logic block
that was to execute an instruction had to wait for operands to be read from a register
file. The reading of the operands from the register file, in turn, had to wait until the
instruction was decoded. The decoding of the instruction, in turn, could not happen
until the instruction was fetched from memory.Pipelining reduces the instruction cycle time by overlapping the operations of
the major logic blocks. For example, the instruction cache, register file and ALU can
be in separate pipeline stages. During operation, the stages concurrently process
distinct instructions. On every advancement of a system dock each stage passes its
result to the following stage.Superpipelined designs increase data throughput by increasing the number of
pipeline stages, thereby enabling the CPU to work on portions of several 
instructions simultaneously. Generally, a superpipeline is an extended pipeline
(longer than the four traditional fetch, decode, execute and write stages) that is
typically docked at some higher multiple of either the CPU, instruction cache or
external memory clock.Superscalar microprocessors contain two or more parallel execution units and
therefore can simultaneously process more than one instruction per cycle. An
example "two-scalar" processor would fetch two instructions from the instruction
cache, have two sets of register addresses and read and write ports, and two
functional units such as ALUs. Where a "one-scalar" processor can inject at most
one instruction per cycle into its pipeline, the example two-scalar superscalar
processor has enough resources to handle up to two instructions per cycle (one
instruction per pipeline). Typically, a superscalar processor will also be pipelined.Not all successive clusters of instructions in a program are suitable for
concurrent execution. Therefore, superscalar processors usually have extra logic
that examines the instruction stream and decides how many instructions to

</DESCRIPTION>
<CLAIMS>
A processor (100), comprising:

a first execution pipeline (B) to execute a first instruction and including a first
stage (160) to generate a first result and a last stage (170) to generate a final result;
a register file (180) to store the first result and the final result, the register file
(180) including a not user-accessible temporary register to store the first result of the first stage (160), a

primary register to store the final result;
a controller (120) to make available the first result stored in the register file
(180) in the event that the first result is needed for the execution of a subsequent

instruction; and
at least one additional execution pipeline (A) to execute at least one additional
instruction, the first instruction preceding a second instruction in program order

and if the first result generated from execution of the first instruction is needed for
the execution of the second instruction, the controller (120) directs the first result to

the execution pipeline of the second instruction.
The processor of Claim 1, wherein the first execution pipeline (B)
further comprises at least one intermediate stage between the first stage (160) and the

last stage (170).
The processor of Claim 2, wherein at least one result of the at least one
intermediate stage is stored in the register file (180).
The processor of Claim 1, wherein the register file comprises a
multiplexer controlled by the controller (120) for selecting between the temporary

and primary registers. 
The processor of Claim 1, wherein the first result is the most recently
stored one of a plurality of results stored in a plurality of temporary registers (140) in

the register file.
A computer system, comprising:

main memory to store data and instructions;
a processor
according to claim 1 or 2 or 3 or 5

to execute the instructions using the data of the main memory.
A method for executing instructions by processor comprising the steps
of:


executing a first instruction in a first execution pipeline, and generating a first
result in a first stage and a final result in a last stage of the first execution pipeline;
storing the first result in a not user-accessible temporary register and the final result in a primary
register of a register file;
if needed for executing a subsequent instruction, selecting between the
temporary and primary registers and thereby making available the first result or the

final result for executing the subsequent instruction;
executing at least one additional instruction in at least one additional
execution pipeline, the first instruction preceding the additional instructior in

program order, and, if needed for executing the additional instruction, directing the
first result generated in the first execution pipeline to the execution pipeline of the

additional instruction.
The method of Claim 7, further comprising the step of storing in the
register file at least one result of at least one intermediate stage positioned between

the first stage and the last stage. 
The method of Claim 7, wherein only the most recently stored first
result is directed by a controller to the execution pipeline of the second

instruction.
</CLAIMS>
</TEXT>
</DOC>
