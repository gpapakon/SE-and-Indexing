<DOC>
<DOCNO>EP-0626642</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Multitasking processor architecture
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F932	G06F946	G06F938	G06F938	G06F932	G06F946	G06F948	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The present invention relates to a processor architecture for executing a current task from a plurality of possible tasks. The architecture comprises: a plurality of instruction pointers (IP) associated respectively with the possible tasks and each containing the address of the current instruction to be executed of the associated task, one only of these pointers being capable of being enabled at a time in order to supply its contents as address to the memory; a priority level decoder (18) assigning a predetermined priority level to each enquiry signal and enabling the instruction pointer associated with the active enquiry signal of highest priority level; and means (20) for incrementing the contents of the enabled instruction pointer and for reinitialising it at the start address of the associated program when its contents reach the finish address of the associated program. 
<
IMAGE
>
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
ST MICROELECTRONICS SA
</APPLICANT-NAME>
<APPLICANT-NAME>
STMICROELECTRONICS S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ARTIERI ALAIN
</INVENTOR-NAME>
<INVENTOR-NAME>
ARTIERI, ALAIN
</INVENTOR-NAME>
</INVENTORS>
<CLAIMS>
A processor architecture for executing a
current task amongst a plurality of possible tasks,

including:

a memory (12, 14) in which are stored
instructions of programs respectively corresponding to

the tasks;
a processing unit (16) coupled to the memory
to receive therefrom the successive instructions to be

processed;
means for providing active request signals
(REQ) associated respectively with the tasks that

request to be served;
a plurality of instruction pointers (IP)
respectively associated with the tasks and each containing

the address of the current instruction to be
executed of the associated task, one of said pointers

being enabled at a time to supply its content as an
address to the memory;
a priority level decoder (18) including
circuitry for assigning a predetermined priority level

to each request signal and for enabling the instruction
pointer associated with the active request signal

having the highest priority level; and
means (20) for incrementing the content of
the enabled instruction pointer and for reinitializing

it at the start address of the associated program when
its content reaches the end address of the associated

program.
The architecture of claim 1, wherein
each instruction (I) includes a command field (I2) that

is provided to the processing unit (16) and an 
instruction type field (I1) that is provided to a

prefix decoder (22) including:

means (NEXTEN) for authorizing a new
instruction pointer to be enabled by the priority level

decoder (18) if the type field of the current
instruction has a first predetermined value; and
means (INIT) for initializing the content of
the enabled instruction pointer to the start address of

the current program if the type field of the current
instruction has a second predetermined value.
The architecture of claim 2, wherein the
prefix decoder (22) includes means (INH) to inhibit the

incrementation of the enabled instruction pointer if
the type field has a third predetermined value, so that

the current instruction is successively executed
several times, the number of executions being

determined by said third value.
The architecture of claim 1, wherein the
memory including the programs associated with the tasks

is a memory (24) independent of a bus (D, A, CTRL)
which is controlled by the processing unit (16).
The architecture of claim 1, wherein
each instruction (I) includes a command field (I2) that

is provided to the processing unit (16) and an
acknowledgment field (I3) that is provided to means

(38) for, when the instruction is being executed,
enabling devices that are coupled to the processing

unit.
The architecture of claim 5, wherein
said devices that are coupled to the processing unit

(16) include:

at least one read-only device (32, 34) which
activates an associated request signal (REQ) to indicate

that it needs to transfer data to a transit memory 
(14), the acknowledgment of said request consisting in

selecting only said read-only device while a task for
transferring data from the bus to the transit memory is

executed; and
at least one write-only device (33, 35)
which activates an associated request signal when it

needs to receive data from the transit memory, the
acknowledgment of this request consisting in selecting

only said write-only device while a task for
transferring data from the transit memory to the bus is

executed.
The architecture of claim 6, wherein the
processing unit (16) includes a plurality of hard wired

address calculation functions, each function being
selected by a field (I4) of a read or write instruction

being processed.
The architecture of claim 7, wherein to
each hard wired function is associated an address

register connected to an address bus (A), the hard
wired function including circuitry for, during each

execution of an instruction in the processing unit
(16), adequately modifying the content of its address

register.
</CLAIMS>
</TEXT>
</DOC>
