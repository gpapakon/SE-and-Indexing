<DOC>
<DOCNO>EP-0619543</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Software verification and validation configuration management system.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F944	G06F944	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system for releasing software code including 
multiple routines at least some of which call other of 

said routines and some of which share public variables and 
some of which share common statements, said system comprising 

library means for storing original code; means for 
storing revised code; means for storing a release file 

identifying modifications to the original code contained 
in the revised code; means for comparing the revised code 

to the original code and identifying differences therebetween; 
and means for comparing said differences with 

said release file and generating an output indicating any 
discrepancies between said differences and the modifications 

identified in said release file. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
WESTINGHOUSE ELECTRIC CORP
</APPLICANT-NAME>
<APPLICANT-NAME>
WESTINGHOUSE ELECTRIC CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DELUCIA R RALPH
</INVENTOR-NAME>
<INVENTOR-NAME>
MUSICANTE NEIL JAY
</INVENTOR-NAME>
<INVENTOR-NAME>
PIKE THOMAS AQUIN
</INVENTOR-NAME>
<INVENTOR-NAME>
ROCKOT DAVID WAYNE
</INVENTOR-NAME>
<INVENTOR-NAME>
WOLF DANIEL JOSEPH
</INVENTOR-NAME>
<INVENTOR-NAME>
DELUCIA, R RALPH
</INVENTOR-NAME>
<INVENTOR-NAME>
MUSICANTE, NEIL JAY
</INVENTOR-NAME>
<INVENTOR-NAME>
PIKE, THOMAS AQUIN
</INVENTOR-NAME>
<INVENTOR-NAME>
ROCKOT, DAVID WAYNE
</INVENTOR-NAME>
<INVENTOR-NAME>
WOLF, DANIEL JOSEPH
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The subject of the present invention has been 
divided from Application No. 88311218.7 in which there is 
disclosed and claimed an automated method using a programmed 
digital computer, for releasing software which 
includes multiple routines at least some of which 
selectively call others of said routines, share public 
variables and share common statements, said method comprising 
steps of storing said software in a software file; 
generating a release file identifying impact locations 
where a routine is used by another routine and where 
public variables and common statements are used; characterized 
by operating a programmed digital computer for 
identifying actual locations in said software stored in 
said software file where a routine is used by another 
routine and where any public variables and common statements 
are used; and comparing said identified actual 
locations with said identified impact locations and 
generate an output indicating any discrepancies therebetween. The complexity of large software systems used 
for example for process control control operations in 
nuclear power plants, makes it very difficult to ensure 
that the system performs in accordance with specifications. 
In addition, it is often difficult to determine  
 
all the effects that revisions to a portion of the code 
will have throughout the system. Furthermore, it is more 
important to document all revisions so that the. state of 
the system can be accurately determined. While such 
proving and documentation of the software are important in 
any large software system, they are particularly important 
in large computer controlled process control systems, and 
most especially, in safety-related systems of a nuclear 
power plant. Many processes in a power plant are monitored in 
the plant main control room using signals sent from 
instrumentation located throughout the plant. Although 
many operations in the control room are manual, the 
remaining majority are automatically performed through 
circuitry involving programmed microprocessors. The 
programs used often control safety-related systems and are 
critical to safe plant operation. Consequently, their 
accuracy and integrity are important. Generally these programs are complex and contain 
a great deal of branching and retrieval of subroutines. 
During the development of these programs, it is not 
unusual to revise a portion of the program. A revision in 
one portion of the program may critically affect another 
portion of the same program, or impact the operation
</DESCRIPTION>
<CLAIMS>
A system for releasing software code including 
multiple routines at least some of which call other of 

said routines and some of which share public variables and 
some of which share common statements, said system comprising: 

   library means (6) for storing original code; 
   means (1) for storing revised code; 

   means (2) for storing a release file identifying 
modifications to the original code contained in the 

revised code; 
   means (5) for comparing the revised code to the 

original code and identifying differences therebetween; 
and 

   means for comparing said differences with said 
release file and generating an output indicating any 

discrepancies between said differences and the modifications 
identified in said release file. 
A system as claimed in claim 1 including 
means (10) for compiling the routines of the revised code 

and for generating an output when the code cannot be 
compiled. 
A system as claimed in claim 2, wherein said 
library means (6) includes means for storing documentation 

with said original code, wherein said means for storing 
revised software code includes means (1) for storing 

 
revised documentation with the revised software code; 

   wherein said means for storing the release file 
includes means (2) for storing changes in said documentation; 

and 
   wherein said means (5) for comparing also compares 

the original documentation stored in said library 
means with the revised documentation and generates an 

output when there is a discrepancy. 
A system as claimed in claim 3, wherein said 
means (2) for storing a release file includes means for 

identifying impact locations where a routine is used by 
another routine and where public variables and common 

statements are used; 
   said system including means (12) for identifying 

the actual locations in said code where a routine is used 
by another routine and where any public variables and 

common statements are used, and means (13) for comparing 
said identified actual locations with said impact 

locations and for generating an output where there is a 
discrepancy therebetween. 
A system as claimed in claim 4, including 
means (14) when there are no discrepancies for storing 

said revised routine and documentation in said library 
means (6), and wherein said library means include means 

for identifying the revision of each routine which goes 
with each generation of said software. 
A system as claimed in claim 5, including 
means (18) for linking the revisions of the routines 

associated with the selected generating of the software 
and for storing said linked routines in said library means 

(6). 
A method of assuring the integrity of software 
which has been revised comprising: 

   storing a first generation of said software in a 
software library; 

   generating a software file containing a revised 
generation of said software;

 
   generating a release file identifying each of 

the revisions to said first generation of software 
included in said revised generation of said software; and 

   operating a digital computer to: 
   compare the revised generation of said software 

in said software file with the first generation of 
software in said software library and identify each of the 

differences therebetween; 
   compare said differences with the revisions 

contained in said release file; and 
   identify discrepancies therebetween. 
A method as claimed in claim 7, wherein said 
software includes code and documentation which are stored 

in said software library for said first generation of 
software and in said software file for said second 

generation of software, wherein generating said release 
file includes identifying revisions to the code and 

documentation of said first generation of software 
included in said revised generation of code and documentation; 

and wherein said digital computer is operated to 
compare said code and documentation of the revised 

generation of software with the code and documentation of 
the first generation; to identify differences between the 

revised generation and the first generation of both code 
and documentation, and to compare said differences with 

any revisions to code and documentation identified in said 
release file and identify discrepancies therebetween. 
A method as claimed in claim 8, including, 
when there are no discrepancies, compiling said revised 

software. 
A method as claimed in claim 9, wherein 
generating said release file includes identifying impact 

locations in said revised generation of software where a 
routine is used by another routine and wherein public 

variables and common statements are used, and wherein said 
programmed digital computer is operated to identify the 

actual location in said revised generation of software 
 

code where a routine is used by another routine and where 
any public variables and common statements are used, and 

to compare said identified actual locations with said 
identified impact locations and generate an output 

indicating any discrepancies therebetween. 
A method as claimed in claim 10, including, 
when there are no discrepancies, operating said programmed 

digital computer to link the routines of said revised 
generation of said software code. 
A method as claimed in claim 11, including 
simultaneously verifying and validating the revised 

generation of said software code. 
</CLAIMS>
</TEXT>
</DOC>
