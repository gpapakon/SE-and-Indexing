<DOC>
<DOCNO>EP-0627100</DOCNO> 
<TEXT>
<INVENTION-TITLE>
MULTI-TASKING LOW-POWER CONTROLLER
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F948	G06F938	G06F938	G06F946	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F9	G06F9	G06F9	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The invention concerns a multitasking controller comprising task storage means (2) for storing up to N tasks (P0, P1, P2, P3) each comprising a sequence of instructions, a microprocessor for processing, by time-sharing, a plurality of said N tasks, and data storage means (12), for storing variable data created and used by said microprocessor. The microprocessor further comprises a scheduler (7) realised in hardware for controlling the use of said microprocessor by said processes, and program counter storage means for storing N program counters (Pc0, Pc1, Pc2, Pc3) each for use by said scheduler (7) to control the instruction sequence of a separate one of said N processes, so that said scheduler (7) is able to select a different one of said program counters (Pc0, Pc1, Pc2, Pc3) when the task processed by said microprocessor is changed without requiring the transfer of data from said data storage means (12).
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
CENTRE ELECTRON HORLOGER
</APPLICANT-NAME>
<APPLICANT-NAME>
CENTRE ELECTRONIQUE HORLOGER S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
LAMOTHE CHRISTIAN
</INVENTOR-NAME>
<INVENTOR-NAME>
PEROTTO JEAN-FELIX
</INVENTOR-NAME>
<INVENTOR-NAME>
LAMOTHE, CHRISTIAN
</INVENTOR-NAME>
<INVENTOR-NAME>
PEROTTO, JEAN-FELIX
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates generally to multitasking
controllers comprising a microprocessor for treating, by
time-sharing, a plurality of tasks each comprising a
series of instructions, task storage means, such as a ROM,
for storing a number of said tasks, and data storage
means, such as a RAM, for storing variable data created
and used by said microprocessor. The multitasking
controller is suitable for use in horological
applications, and it will be convenient to hereinafter
disclose the invention in relation to that exemplary
application. It is to be appreciated, however, that the
invention is not limited to that application.Many applications in the horological field are based
on tasks comprising a series of sequential instructions. A
microcomputer is often used to perform such tasks and thus
provide a watch with its desired functionality. Existing
microcomputers comprise a read-only-memory or ROM for
storing the instructions of each task to be performed, a
microprocessor for peforming the operations necessary to
carry out these instructions and a random-access-memory or
RAM for storing variable data created and used by the
microprocessor. The microprocessor comprises notably an
arithmetic-logic-unit or ALU for performing arithmetic and
logic operations and a series of registers for storing the
results of these operations. Control, data and address
buses connect the microprocessor, ROM, RAM and an I/O
interface so as to allow communication between these
elements and the exterior environment.The realisation of such tasks using a microcomputer
is often difficult to achieve due to the existence of
several severe constraints. Not only must each of the
tasks be performed in real time, but the microcomputer
must react quickly to signals created either internally or
from the user. Ideally, these tasks should also be 
structured and executed in a way which consumes as little
power as possible.Another challenge presented to watch designers is to
reconstruct the operation of a number of watch functions,
which are required to occur at the same time, with tasks
that require the sequential performance of a series of
instructions. For example, the action of a push-button on
a watch may be required to simultaneously cause the
operation of a stepper motor, whilst at the same time
cause a chronograph to turn.In order to address this problem, some watches have
been designed in which microcomputers are used to perform
several tasks concurrently by the technique of
multitasking or time-sharing. In multitasking, a portion
of
</DESCRIPTION>
<CLAIMS>
A multitasking controller comprising:

task storage means (2) for storing up to N tasks
(P0,P1,P2,P3) each comprising a sequence of instructions,
a microprocessor for processing, by time-sharing,
a plurality of said N tasks, and
data storage means (12) for storing variable data
created and used by said microprocessor,

characterised in that said microprocessor further
comprises


a scheduler (7) realised in hardware for
controlling the use of said microprocessor by said tasks,

and
program counter storage means for storing N
program counters (Pc0, Pc1, Pc2, Pc3) each for use by said

scheduler (7) to control the instruction sequence of a
separate one of said N tasks,

said scheduler (7) automatically selecting a different one
of said program counters (Pc0, Pc1, Pc2, Pc3) when the task

processed by said microprocessor is changed without
requiring the transfer of data from said data storage

means (12).
A multitasking controller according to claim 1,
characterised in that

said microprocessor is configurable so as to process a
portion of each of X said tasks in turn, where 1 
<
 X 
<
 N,
the program counter of one or more of the remaining N-X

tasks being used by said microprocessor to control the
instruction sequence of a sub-routine called from within

said X tasks.
A multitasking controller according to claim 1 or
2, characterised in that said microprocessor further

comprises

accumulator value storage means (13) for storing
a separate accumulator value for each of said N tasks,
 
so that said microprocessor is able to select a different

one of said accumulator values, when the task treated by
said microprocessor is changed, without requiring the

transfer of data from said data storage means (12).
A multitasking controller according to any one of
said claims 1, 2 or 3, characterised in that said

microprocessor further comprises

index value storage means (14) for storing a
separate index value for each of said N tasks,

so that said microprocessor is able to select a different
one of said index values, when the task treated by said

microprocessor is changed, without requiring the transfer
of data from said data storage means (12).
A multitasking controller according to any one of
the previous claims, characterised in that

said scheduler (7) comprises a hardwired finite state
machine.
A multitasking controller according to any one of
claims 1 to 4, characterised in that

said scheduler (7) comprises a programmable logic array.
A multitasking controller according to any one of
claims 1 to 4, characterised in that

said scheduler (7) comprises a ROM.
A multitasking controller according to claim 2,
characterised in that

said microprocessor further includes one or more stack-pointers
(9,10) each for controlling the use of said

program counters (Pc0, Pc1, Pc2, Pc3) used in the processing
of a separate one of said X tasks.
A multitasking controller according to any one of
the preceding claims, characterised in that

said microprocessor further comprises an event router (8)
for receiving an event group signal from a group of one or

more event signals and producing a task request signal
(Req0, Req1, Req2, Req3) corresponding to a selected one of

said tasks,
 
said task request signal requesting said scheduler to

execute said selected task.
A multitasking controller according to claim 9,
characterised in that

each said event signal consists of either an external
event signal from a device peripheral to said controller

or an internal event signal caused by said microprocessor.
A multitasking controller according to claim 10,
characterised in that

said event router (8) is adapted to receive event group
signals from each of N groups (gr0, gr1, gr2,gr3) of event

signals.
A multitasking controller according to claim 11,
characterised in that

said event router (8) is configurable so that a task
request signal (Req0,Req1,Req2,Req3) corresponding to said

selected task is produced in response to an event group
signal received from one or more selected groups

(gr0, gr1, gr2, gr3) of event signals.
</CLAIMS>
</TEXT>
</DOC>
