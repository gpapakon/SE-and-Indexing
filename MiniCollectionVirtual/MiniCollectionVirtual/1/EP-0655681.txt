<DOC>
<DOCNO>EP-0655681</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Method of automated proving for unrestricted first-order logic
</INVENTION-TITLE>
<CLASSIFICATIONS>G06N500	G06F944	G06N500	G06F944	G06N504	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06N	G06F	G06N	G06F	G06N	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06N5	G06F9	G06N5	G06F9	G06N5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
The method of automated proving for unrestricted first-logic 
to test the satisfiability of clause sets describing 

an industrial system applies the instance generation rule


(IG) 
Ψ 
Ψσ



 
where Ψ is a term, σ a substitution and Ψσ an instance of Ψ 

yielded by the substitution σ, and is characterized in that, 
defining an instance subtraction as the subtraction of the 

instance Ψσ from Ψ resulting in a generalized term which is 
a triplet 〈Ψ, σ, Λ〉 where Λ is a finite set of standard 

substitutions {λ₁, ..., λ
n
} and defined by


GE (〈Ψ, σ, Λ〉) = GE (Ψσ) - GE ({Ψλ₁, ..., Ψλ
n
}) 



 
the method further applies an instance subtraction combined 

with said instance generation rule to get an instance 
extraction rule defined by



(IE) Σ → (Σ - {Ψ〈σ,Λ〉}) ∪ {Ψ〈σµ,Λ*σµ〉, Ψ〈σ,Λ ∪ {σµ}〉) 



 
where Σ is a set of clauses and µ is a substitution valid 

for the generalized term Ψ〈σ, Λ〉, whereby the set Σ can be 
proved unsatisfiable. 
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
BULL SA
</APPLICANT-NAME>
<APPLICANT-NAME>
BULL S.A.
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BILLON JEAN-PAUL
</INVENTOR-NAME>
<INVENTOR-NAME>
BILLON, JEAN-PAUL
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention relates to a computer-implemented method of automated proving for
unrestricted first-order logic to test the unsatisfiability of
clause sets describing a technical system.Automated proving is concerned with the fundamental task
of establishing the satisfiability or unsatisfiability of
formula sets including clause sets. A computational method
dedicated to this task is called a proof method. Automated
proving is involved in various logical computations which
will be here covered by the global notion of automated
reasoning: e.g. computation of counter-models of formula
sets, automated theorem proving, computation of maximal
satisfiable subsets of unsatisfiable sets of formulas,
computation of minimal support of theorems, etc. The
invention can be used by any industrial application where
first-order logic automated reasoning related to a technical system
can be explicitely or implicitely involved.First-order logic has become of industrial interest
through a restricted sublogic known as Horn clause logic.
Horn clause formalism is used by logic programming languages
like PROLOG both as a declarative and imperative language.
The wide variety of applications which can be achieved with
logic programs illustrates the versatility of Horn clause
logic in expressing various problems (for example, see:
"Artificial Intelligence through PROLOG", Prentice Hall
1988, Rowe, N. C.). But in many cases the expressive power
of Horn clause logic is not sufficient: unrestricted first
order logic, and even higher-order logic, is needed. How to
use unrestricted first-order logic in expressing problems or
in describing digital circuits, computer programs, complex
systems, etc, and how first-order logic automated reasoning
allows computers to solve such problems is explained in many 
classical textbooks (for example, see: "Automated
Reasoning", Prentice Hall 1984, Wos, L. et al.).Thus, beyond those related to Horn clause logic
programming, there is a wide range of industrial
applications where, explicitely or implicitely, first-order
logic automated reasoning related to a technical system can be involved
and used by the invention, among which can be mentioned, for example:
General purpose automated reasoning systems: general
purpose automated reasoning systems can be sold or
distributed as stand-alone products (software products or
dedicated machines) and/or within packages. They can be
used to train or help mathematicians, logicians, computer
scientists and any kind of end-users in checking and/or
proving the
</DESCRIPTION>
<CLAIMS>
Computer-implemented method of testing the unsatisfiability of a set
of input terms (Ψ) representative of input clauses or input superclauses

describing a technical system with unrestricted first-order logic, the method
comprising the steps of :


(1) mapping each of the input terms (Ψ) onto an equivalent
generalized term defined as a triplet 〈Ψ, ε,⊘〉, where ε is an empty

substitution and ⊘ is an empty set, to form a set (Σ) of generalized terms ;
(2) applying to the set (Σ) an instance extraction rule (IE) defined
as follows :


 Σ → (Σ - {Ψ〈σ, Λ〉})∪{Ψ〈σµ, Λ*σµ〉, Ψ〈σ, Λ∪{σµ}〉}

where σ is a substitution, Λ is a finite set of standard substitutions {λ
1
, ..., λ
n
},
the doublet 〈σ, Λ〉 is a generalized substitution which maps a standard term

onto a generalized term defined as a triplet 〈Ψ, σ,Λ〉 such that 
〈Ψ, σ, Λ〉 =
Ψ〈σ, Λ〉
, µ is a substitution valid for the generalized term Ψ〈σ, Λ〉 and Ψσ is
an instance of Ψ yielded by the substitution σ and is a standard term

equivalent to the generalized term 〈Ψ, σ, ⊘〉, the instance extraction rule (IE)
resulting from an instance generation rule (IG) and an instance subtraction

rule (IS), the instance generation rule being defined as :

Ψ〈σ,Λ〉
Ψ〈σµ,Λ*σµ〉

and the instance subtraction rule being defined as :

 Ψ〈σ, Λ〉 → Ψ〈σ, Λ∪{σµ}〉

meaning that the triplet Ψ〈σ, Λ〉 should be replaced with Ψ〈σ, Λ∪{σµ}〉,
the step (2) resulting in a current set (Σ) ;
(3) generating a ground instance GIG(Σ) of the current set Σ, the
ground instance generation GIG being a ground substitution replacing every

variable with a same fixed constant and defined by the rule :

Ψ
Ψ
gr
 
where Ψ
gr
 is a ground instance of term Ψ, the ground instance Ψ
gr
 being
obtained by replacing every variable with a same fixed constant ;
(4) applying and repeating steps (2) and (3) until the ground
instance GIG(Σ) of the current set (Σ) is unsatisfiable ; and
(5) determining the unsatisfiability of the set of input terms when
the ground instance GIG(Σ) is unsatisfiable.
Computer-implemented method of testing the unsatisfiability of a set
of input terms (Ψ) representative of input clauses or input superclauses

describing a technical system with unrestricted first-order logic, the method
comprising the steps of :


(1) mapping each of the input terms (Ψ) onto an equivalent
generalized term defined as a triplet 〈Ψ, ε,⊘〉, where ε is an empty

substitution and ⊘ is an empty set, to form a set (Σ) of generalized terms ;
(2) applying to the set (Σ) an instance extraction rule (IE) defined
as follows :


 Σ → (Σ - {Ψ〈σ, Λ〉})∪{Ψ〈σµ, Λ*σµ〉, Ψ〈σ, Λ∪{σµ}〉}

where σ is a substitution, Λ is a finite set of standard substitutions (λ
1
, ..., λ
ν
),
the doublet 〈σ, Λ〉 is a generalized substitution which maps a standard term

onto a generalized term defined as a triplet 〈Ψ, σ,Λ〉 such that 
〈Ψ, σ, Λ〉 =
Ψ〈σ, Λ〉
, µ is a substitution valid for the generalized term Ψ〈σ, Λ〉 and Ψσ is
an instance of Ψ yielded by the substitution σ and is a standard term

equivalent to the generalized term 〈Ψ, σ, ⊘〉, the instance extraction rule (IE)
resulting from an instance generation rule (IG) and an instance subtraction

rule (IS), the instance generation rule being defined as :

Ψ〈σ,Λ〉
Ψ〈σµ,Λ*σµ〉

and the instance subtraction rule being defined as :

 Ψ〈σ, Λ〉 → Ψ〈σ, Λ∪{σµ}〉

meaning that the triplet Ψ〈σ, Λ〉 should be replaced with Ψ〈σ, Λ∪{σµ}〉,
the step (2) resulting in a current set (Σ) ; 
(3) searching whether the current set has a complete spanning set
of near-quasi-connections, a near-quasi-connection having most general

unifiers and most general half-unifiers, a most general half-unifier being
defined as a half-unifier yielding a most general instance and a half-unifier of

the term Ψ for a term Φ being defined as a substitution σ such that the
instance Ψσ is an instance of Φ, a near-quasi-connection being defined when

the most general unifiers and most general half-unifiers thereof contain only
unit substitutions which associate variables to variables
(4) applying and repeating steps (2) and (3) until the current set
has a complete spanning set of near-quasi-connections ; and
(5) determining the unsatisfiability of the set of input terms when
the current set has a complete spanning set of near-quasi-connections.
Method according to claim 1 or 2, in which the instance generation
rule (IG) is modified to become a half-link generation rule defined by


Ψ,Φ
Ψσ1, Φσ2

where σ1 and σ2 are two complementary most general half-unifiers of the
literals of a link between the term Ψ and another term Φ, a most general half-unifier

being defined as a half-unifier yielding a most general instance and a
half-unifier of the term Ψ for the term Φ being defined as a substitution a such

that the instance Ψσ is an instance of Φ.
Method according to claim 3, in which the step (2) further comprises
computing most general half-unifiers which have in respective codomains

thereof no other variables of the clause upon which the half-link instance
generation will be applied, except in cases where functional terms are

involved.
Method according to anyone of claims 1 to 4, in which a term (Ψ) of
the set of input terms has a hyper-half-link when in
 a list of half-links of the
term there is one and only one half-link of each of the literals of the term and 

the step (2) is applied by replacing the substitution a with a substitution 
associated to a valid hyper-half-link of the term Ψ, the resulting instance

generation (IG) being called a hyper-half-link generation.
</CLAIMS>
</TEXT>
</DOC>
