<DOC>
<DOCNO>EP-0658841</DOCNO> 
<TEXT>
<INVENTION-TITLE>
A data processing system having a dynamic priority task scheduler.
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F948	G06F1336	G06F13364	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F9	G06F13	G06F13	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A data processing system includes a server which has a task 
scheduler for receiving task requests for access, and granting 

access to system resources based upon a multidimensional scheduling 
technique wherein groups of tasks are assigned a priority level 

within a priority scheme, and within each group round robin 
scheduling assures each task will have access to system resources 

in turn and a dynamically programmable technique for responding to 
requests from time- dependent isochronous requests for system 

resources. 

</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
BASS BRIAN MITCHELL
</INVENTOR-NAME>
<INVENTOR-NAME>
KU EDWARD HAU-CHUN
</INVENTOR-NAME>
<INVENTOR-NAME>
LIN BOU-CHUNG
</INVENTOR-NAME>
<INVENTOR-NAME>
SANAYE SIMIN HOSNE
</INVENTOR-NAME>
<INVENTOR-NAME>
BASS, BRIAN MITCHELL
</INVENTOR-NAME>
<INVENTOR-NAME>
KU, EDWARD HAU-CHUN
</INVENTOR-NAME>
<INVENTOR-NAME>
LIN, BOU-CHUNG
</INVENTOR-NAME>
<INVENTOR-NAME>
SANAYE, SIMIN HOSNE
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The present invention relates to data processing systems, and 
more particularly to data processing systems having the capability 
of assigning priority to a number of substantially simultaneous 
requests for service by the data processing system. In many data processing systems, there are often simultaneous 
requests for access to various resources within the data processing 
system. A task scheduler is a device which determines the priority and 
order of execution of several simultaneous task requests and gives 
the "winning" task a signal to proceed. In many ways, a task 
scheduler is similar to a traffic signal where cars approach an 
intersection simultaneously and the traffic signal controls which 
car will have the right of way. The traffic signal is a task 
scheduler. There are several different ways for a task scheduler to 
determine which task to give access to system resources. Each 
scheduling technique has advantages and disadvantages. For example, a "highest priority" system gives each requesting 
task a priority and always gives the winning signal to the highest 
priority requesting task. The advantage of this technique is that 
each task can be given an importance, and the most "important" task 
will always execute first. This technique is also easiest to 
implement. The disadvantage of the highest priority technique is 
that high priority tasks can "hog" the resources and block out 
lower priority tasks from ever executing. Also, if two or more 
devices need to have the same priority, one must be given 
preference over the others and will have more access to the  
 
resources than lower priority tasks. A round robin technique gives each task the same priority and 
ensures that each task request gets access to system resources in 
turn. A simple traffic light is a good example of a round robin 
scheme wherein each lane gets it turn until every lane has had an 
opportunity and then the pattern repeats. The advantage of this 
method is that each requesting task gets its fair share of system 
resources and is assured of getting a turn. The disadvantage of 
the round robin technique is that lower priority tasks get as much 
of the system resources as the higher priority tasks. In a time division access technique, each task is given a 
predetermined amount of time to execute and then the system 
proceeds to the next task. Each task is assigned a window of time 
and gets to execute during that window. When its time window is 
complete, the next task gets its turn. A task does not get another 
c
</DESCRIPTION>
<CLAIMS>
A data processing system having a dynamic priority task 
scheduler, comprising: 

a processor for processing tasks; 
a memory, for storing control information and data, associated 

with said processor; 
a system bus for communicating control information and data 

between said processor and said memory; 
a bus controller connected to said processor and said memory 

by said system bus and to a data bus for controlling data flow 
between said processor, said memory and said data bus, and for 

scheduling tasks presenting requests for access to said 
processor, to said memory or to other system resources, based 

on a task arbitration strategy which includes an integrated 
plurality of access granting means for handling isochronous as 

well as priority level based requests; 
a data bus for communicating data from said processor or said 

memory to one or more data interface units; 
one or more data interface units for communicating control and 

data signals between said data bus and a plurality of devices 
requesting access to said processor or sai
d memory; and 
a plurality of devices requesting access to said system 

resources. 
A data processing system, according to claim 1, wherein said 
integrated plurality of access granting means further 

comprises:
 

first means for handling isochronous task requests having a 
dynamically variable access time requirement; 

second means for handling task requests based on a 
predetermined priority of groups of requesters; and 

third means for handling task requests from one or more tasks 
in a group having a same predetermined priority. 
A data processing system, according to claim 1, wherein said 
integrated plurality of access granting means grants a highest 

priority to isochronous tasks requests. 
A data processing system, according to claim 2, wherein said 
third means grants access to requests having a same priority 

level on a round robin basis. 
A data processing system, according to claim 1, wherein said 
bus controller further comprises: 

means for managing a plurality of data buffer registers in 
response to requests for access to system resources. 
A method for dynamically scheduling a plurality of tasks in a 
data processing system, comprising the steps of: 

requesting, by a plurality of tasks, access to elements of 
said data processing system; 

determining a first priority level for each request presented; 
granting access to a request having a highest first priority 

level for requests having different first priority levels; 
determining if two or more requests for access have a same 

first priority level;
 

storing said two or more requests in a queue if said 
determining step indicates two or more requests have a same 

first priority level; 
granting access to each of said two or more requests in turn 

such that all of said two or more requests are granted access 
to elements of said data processing system; and servicing said 

requests. 
A method, according to claim 6, further comprising the steps 
of: 

determining if any of said requests for access is for an 
isochronous task; 

assigning a predetermined time period for each said 
isochronous task; and 

granting a highest first priority level to any said request 
for an isochronous task during said predetermined time period 

assigned to said task. 
A task scheduler for granting access to system resources in a 
data processing system in response to a plurality of requests 

for access, comprising: 
means for determining a first priority level for each of said 

requests for access; 
means for granting access to a request having a highest first 

priority level among two or more requests having different 
first priority levels; 

means for storing said two or more requests in a queue if it 
is determined that two or more requests have a same first 

priority level; and
 

means for granting access to each of said two or more requests 
having a same first priority level in a predetermined sequence 

such that all of said requests are granted access to said 
system resources. 
A task scheduler, according to claim 8, further comprising: 
means for determining if any of said plurality of requests for 

access is for an isochronous task; 
means for assigning a predetermined time period for each said 

isochronous task for access to system resources; and 
means for granting a highest first priority level to said 

request for an isochronous task during said predetermined time 
period assigned to said task. 
A task scheduler, according to claim 9, wherein said means for 
assigning a predetermined time period for each said 

isochronous task is programmable to permit dynamic 
modification of said time period in response to requests for 

access. 
</CLAIMS>
</TEXT>
</DOC>
