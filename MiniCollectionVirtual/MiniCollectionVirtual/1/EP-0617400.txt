<DOC>
<DOCNO>EP-0617400</DOCNO> 
<TEXT>
<INVENTION-TITLE>
Methods and apparatus for accelerating windows in graphics systems
</INVENTION-TITLE>
<CLASSIFICATIONS>G09G536	G09G5393	G09G514	G09G514	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G09G	G09G	G09G	G09G	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G09G5	G09G5	G09G5	G09G5	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
Graphics window systems which utilize graphics 
pipelines and graphics pipeline bypass buses. Hardware solutions 

for window relative rendering of graphics primitives, block 
moving of graphics primitives, transfer of large data blocks, and 

elimination of pipeline flushing are disclosed. The hardware 
implementations provided in accordance with the invention are 

interfaced along the pipeline bypass bus, thereby eliminating 
gross overhead processor time for the graphics pipeline and 

reducing pipeline latency. Methods and apparatus provided in 
accordance with the invention exhibit significant pipeline 

efficiency and reductions in time to render graphics primitives 
to the screen system. 


</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
HEWLETT PACKARD CO
</APPLICANT-NAME>
<APPLICANT-NAME>
HEWLETT-PACKARD COMPANY
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
ALCORN BYRON A
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT DAREL N
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON RONALD D
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN DESI
</INVENTOR-NAME>
<INVENTOR-NAME>
ALCORN, BYRON A.
</INVENTOR-NAME>
<INVENTOR-NAME>
EMMOT, DAREL N.
</INVENTOR-NAME>
<INVENTOR-NAME>
LARSON, RONALD D.
</INVENTOR-NAME>
<INVENTOR-NAME>
PINEDO, DAVID
</INVENTOR-NAME>
<INVENTOR-NAME>
RHODEN, DESI
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
This invention relates to computer workstation window
systems. More specifically, this invention relates to method and
apparatus for accelerating graphics primitive rendering on
multitasking workstations that utilize graphics pipelines.Computer workstations provide system users with
powerful tools to support a number of functions. An example of
one of the more useful functions which workstations provide is
the ability to perform highly detailed graphics simulations for a
variety of applications. Graphics simulations are particularly
useful for engineers and designers performing computer aided
design (CAD) and computer aided management (CAM) tasks.Modern workstations having graphics capabilities
utilize "window" systems to accomplish graphics manipulations.
An emerging standard for graphics window systems is the "X"
window system developed at the Massachusetts Institute of
Technology. The X window system is described in K. Akeley and T.
Jermoluk, "High-Performance Polygon Rendering", Computer
Graphics, 239-246, (August 1988). Modern window systems in
graphics workstations must provide high-performance, multiple
windows yet maintain a high degree of user interactivity with the 
workstation. Previously, software solutions for providing
increased user interactivity with the window system have been
implemented in graphics workstations. However, software
solutions which increase user interactivity with the system tend
to increase processor work time, thereby increasing the time in
which graphics renderings to the screen in the workstation may be
accomplished.A primary function of window systems in graphics
workstations is to provide the user with simultaneous access to
multiple processes on the workstation. However, each of these
processes provides an interface to the user through its own area
onto the workstation display. The overall result is an increase
in user productivity since the user can manage more than one task
at a time with multiple windows. However, each process
associated with a window views the workstation resources as if it
were the sole owner. Thus, resources such as the processing
unit, memory, peripherals and graphics hardware must be shared
between these processes in a manner which prevents interprocess
conflicts on the workstation.Graphics workstations generally utilize graphics
"pipelines" which interconnect the various components of the
system. A graphics pipeline is a series of data processing
elements which communicate graphics commands through the graphics
system. Today, graphics
</DESCRIPTION>
<CLAIMS>
A system for graphics primitives rendering comprising
a host processor (20), a graphics subsystem, a frame buffer

(70), a graphics pipeline (50),

window offset means adapted to store window offset
addresses indicative of a window's position relative to the

frame buffer (70),
a pipeline bypass (90) interfaced with the window offset means
and enabling the writing of the window offsets by the host processor (20), and
an address manipulator (250) interfaced with the pipeline bypass (90), the address manipulator (250) having
means (380,390) for receiving and storing addresses and

means (480) for transforming addresses which are relative to
a window origin to addresses which are relative to the frame

buffer origin by adding a respective window offset address
to each address which is relative to the window origin.
The system recited in Claim 1 further comprising

scan converter means (220), which communicates with the
window offset means and which receives graphics data, for

performing conversion of addresses relative to the window
origin and communicating the results to the frame buffer

(70), and
identification means (410), written by the host
processor (20) through the graphics pipeline, for

determining which window offsets in the window offset means
to reference for the said transforming of the addresses

which are relative to the window origin.
The system recited in Claim 2, wherein the scan
converter (220) is interposed on the graphics pipeline (50)

between the host processor (20) and the frame buffer (70).
The system recited in Claim 2 or Claim 3, wherein the
scan converter (220) is a raster scan converter. 
The system recited in any one of Claims 2 to 4, further
comprising memory means (230) interposed on the graphics

pipeline (50) between the scan converter (220) and the frame
buffer (70) for storing graphics data rendered on the

window.
The system recited in Claim 5, wherein the graphics data
corresponds to pixel activation data.
The system recited in Claim 5 or Claim 6, wherein the
window offset means is further interfaced with the memory

means (230).
The system recited in any one of Claims 5 to 7, wherein
the address manipulator (250) is further interfaced with the

memory means (230).
The system recited in any one of Claims 5 to 8, wherein
the memory means is a cache buffer (230).
The system recited in any one of the preceding Claims,
wherein the address manipulator means (250) is interposed

on the pipeline bypass (90) between the host processor (20)
and the frame buffer (70).
The system recited in any one of the preceding Claims,
wherein the frame buffer (70) comprises a video random

access memory.
The system recited in any one of the preceding Claims,
wherein the window offset means is interposed on the

pipeline bypass (90) between the host processor (20) and the
frame buffer (70).
The system recited in any one of the preceding Claims,
wherein the address manipulator (250) is also interfaced

with the graphics pipeline (50). 
The system recited in any one of the preceding Claims,
comprising:


source register means (390) for storing a source
reference address of a block of primitives to be moved;
destination register means (380) for storing a
destination reference address of the block of primitives;
dimension register means (400) for storing data
indicative of the block's size;
source specifier means (410) for storing data indicative
of whether the source reference address of the block is an

address which is relative to a window origin or an address
which is relative to the frame buffer origin; and
destination specifier means (410) for storing data
indicative of whether the destination reference address of

the block is an address which is relative to the window
origin or an address which is relative to the frame buffer

origin.
The system recited in Claim 14, wherein the host
processor (20) outputs commands to the address manipulator

(250) to instruct the address manipulator (250) to move the
block from the block's source address to the block's

destination address.
The system recited in Claim 14 or 15, wherein the
reference address of the block corresponds to the origin

address of the block.
The system recited in any one of Claims 14 to 16,
wherein the source means (390), destination means (380),

dimension register means (400) and specifier means (410) are
interposed on the pipeline bypass (90) between the host

processor (20) and the frame buffer (70). 
The system recited in any one of Claims 14 to 16,
wherein the source means (390), destination means (380),

dimension register means (400) and specifier means (410) are
interposed on the graphics pipeline (50) between the host

processor (20) and the frame buffer (70).
The system recited in any one of the preceding Claims,
wherein the window offset means is a window offset table.
A method of rendering graphics primitives on a frame
buffer (70) without flushing a graphics pipeline (50) to

change window offset addresses, the method comprising the
steps of:


rendering (420) the graphics primitives through the
graphic pipeline (50) according to addresses which are

relative to a window origin;
determining (460) window offset addresses corresponding
to addresses which are relative to the frame buffer origin

any time during the rendering;
writing window offsets to window offset means adapted
to store the window offsets, the window offsets being

written by a host processor through a pipeline bypass;
transmitting window offset addresses to an address
manipulator (250) any time during the rendering;
adding (480) the window offset addresses to
corresponding addresses which are relative to the window

origin to obtain addresses which are relative to the frame
buffer origin after the determining (460) and transmitting

of the window offset addresses; and
transmitting the graphics primitives to the frame buffer
(70) according to the addresses which are relative to the

frame buffer origin.
The method recited in Claim 20, wherein the step of
rendering (420) the graphics primitives to a graphics window

comprises scanning the graphics primitives to determine
pixels to be activated on a graphics screen.
The method recited in Claim 21 wherein the scanning step
is a raster scanning step.
The method recited in Claim 21 or Claim 22, further
comprising storing the pixel activation data in a pixel

cache buffer (230).
The method recited in any one Claims 20 to 23, wherein
the frame buffer (70) is a video random access memory.
The method recited in any one of Claims 20 to 24,
wherei
n the window offset means is a window offset table.
</CLAIMS>
</TEXT>
</DOC>
