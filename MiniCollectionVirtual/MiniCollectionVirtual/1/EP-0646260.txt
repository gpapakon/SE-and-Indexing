<DOC>
<DOCNO>EP-0646260</DOCNO> 
<TEXT>
<INVENTION-TITLE>
DISTRIBUTED APPLICATIONS PROCESSING NETWORK
</INVENTION-TITLE>
<CLASSIFICATIONS>G06F946	G06F1500	G06F1300	G06F946	G06F1300	G06F1500	</CLASSIFICATIONS>
<CLASSIFICATIONS-THIRD>G06F	G06F	G06F	G06F	G06F	G06F	</CLASSIFICATIONS-THIRD>
<CLASSIFICATIONS-FOURTH>G06F9	G06F15	G06F13	G06F9	G06F13	G06F15	</CLASSIFICATIONS-FOURTH>
<ABSTRACT>
A system is described in which a local task (415) running on a local computer (400) can use a remote task (430) running on a remote computer (405). The local task (415) firstly establishes a conversation between a local data transmission agent (410) in the local computer (400) and a remote data transmission agent (420) in the remote computer (405). This conversation is assigned a handle (XmitHandle). The local task (415) can then use this handle (XmitHandle) to call tasks (430) running on the remote computer (405). Data is passed between the local task (415) and the local data transmission agent (410) by the use of a shared memory buffer. Data is similarly passed between the remote task (430) and the remote data transmission agent (420) by the use of a shared memory buffer. The local (410) and remote (420) data transmission agents are connected together in a network which is preferably an SNA network.
</ABSTRACT>
<APPLICANTS>
<APPLICANT-NAME>
IBM
</APPLICANT-NAME>
<APPLICANT-NAME>
INTERNATIONAL BUSINESS MACHINES CORPORATION
</APPLICANT-NAME>
</APPLICANTS>
<INVENTORS>
<INVENTOR-NAME>
DUSCHER REINHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
GARGYA TONY
</INVENTOR-NAME>
<INVENTOR-NAME>
KURTH GEROLD
</INVENTOR-NAME>
<INVENTOR-NAME>
DUSCHER, REINHARD
</INVENTOR-NAME>
<INVENTOR-NAME>
GARGYA, TONY
</INVENTOR-NAME>
<INVENTOR-NAME>
KURTH, GEROLD
</INVENTOR-NAME>
</INVENTORS>
<DESCRIPTION>
The invention concerns a system for running a remote 
task on a remote computer requested by a local task 
running on a local computer, the remote computers 
being connected in a network with the local computer, 
wherein the local computer contains a local data 
transmission agent, said local data transmission agent 
transmitting requests to the remote computer to 
initiate operation of the remote task and transmitting 
and receiving data during operation of the remote 
task, and the remote computer contains a remote data 
transmission agent, said remote data transmission 
agent receiving requests from the local computer to 
initiate operation of the remote task and transmitting 
and receiving data during operation of the remote 
task. The prior art discloses a variety of computer 
networks. The IBM System Journal, Volume 22, Number 4, 
1983 includes a series of articles devoted to a review 
of the IBM System Network Architecture (SNA). On page 
345 of that publication a network is defined as "a 
configuration of terminals, controllers, and 
processors and the links that connect them". When such 
a configuration supports user applications involving 
data processing and information exchange and conforms 
to the specifications of the IBM System Network 
Architecture it is called an SNA network. Essentially  
 
SNA defines logical entities that are related to the 
physical entities in a network and specifies the rules 
for interactions among these logical entities. The logical entities of an SNA network include network 
addressable units and the path control network that 
connects them. Network addressable units communicate 
with one another using logical connections called 
"sessions". The three types of Network Addressable 
Units (NAUs) are the Logical Unit (LU), the Physical 
Unit (PU), and the System Services Control Point 
(SSCP) which are defined as follows: Logical Unit (LU). An LU is a port through which end 
users may access the SNA network. An end user uses an 
LU to communicate with another end user and to request 
services of a System Services Control Point (SSCP). Physical Unit (PU). A PU is a component that manages 
the resources of a node in cooperation with an SSCP. System Services Control Point (SSCP). This is a focal 
point for configuration management, problem 
determination and directory services for end users. 
SSCPs may have sessions with LUs and PUs. When such a 
session occurs, the LU or PU is in the domain of the 
SSCP. In addition to sessions with LUs and PUs, SSCPs 
may also
</DESCRIPTION>
<CLAIMS>
System for running a remote task (430) on a 
remote computer (20; 405) requested by a local 

task (415) running on a local computer (10; 400), the 
remote computers (20; 405) being connected in a 

network (30) with the local computer (10; 400), 
wherein the local computer (10; 400) contains a 

local data transmission agent (410), said local 
data transmission agent (410) transmitting 

requests to the remote computer (20; 405) to 
initiate operation of the remote task (430) and 

transmitting and receiving data during operation 
of the remote task (430), and the remote computer 

(20; 405) contains a remote data transmission 
agent (420), said remote data transmission agent 

(420) receiving requests from the local computer 
(10; 400) to initiate operation of the remote 

task (430) and transmitting and receiving data 
during operation of the remote task (430),
 
characterised in that 


with the transaction processing environment (510) 
in which the remote task (430) is run a handle 

(XmitHandle) is associated which is stored in the 
local computer (10; 400) and is used by the local 

task (415) to access the remote task (430); 
in the local computer (10; 400) a local shared 
buffer is provided accessible by the local task 

(415) and the local data transmission agent 
(410); and  

 
in the remote computer (20; 405) a remote shared 
buffer is provided accessible by the remote task 

(430) and the remote data transmission agent 
(420). 
System according to claim 1 further characterised 
in that 


the local shared buffer is provided by the local 

task (415); and 
the remote shared buffer is provided by the 
remote data transmission agent (420). 
System according to any of the above claims in 
which the local task (415) may be 


a function program (440); 
an application navigator (450); or 
an environment routine (460). 
System according to any of the above claims in 
which the remote computer (20; 405) is connected 

with the local computer (10; 400) in an SNA 
network (30). 
Method for running a remote task (430) on a 
remote computer (20, 405) called by a local task 

(415) running on a local computer (10, 400) 
comprising the following steps 


opening a conversation between the remote 
computer (20; 405) and the local computer (10;  

 
400) and assigning a handle (XmitHandle) to 

represent a transaction processing environment 
(510) in which the remote task (430) is to be 

run; 
sending a function name (XmitServ, XmitLib) 
identifying a remote task (430) to be run in the 

transaction processing environment (510) and a 
first data block containing data required as 

input by the remote task (430) to the remote 
computer (20; 405) from the local computer (10; 

400); 
receiving a second data block at the local 
computer (10; 400) containing the output from the 

remote task (430) run at the remote computer (20; 
405); and 
closing the conversation between the remote 
computer (10; 400) and the local computer (20; 

405). 
Method according to claim 5 in which the step of 
opening a conversation between the remote 

computer (20; 405) and the local computer (10; 
400) comprises
 
   calling a function (SRV_OPEN; BusOpenUICXmit) 

which creates a client (520) in the local 
computer (10; 400) and establishes a connection 

to a server (530) in a remote computer (20; 405), 
said server (530) and said client (520) together 

forming the transaction processing environment 
(510), the said function (SRV_OPEN; 

BusOpenUICXmit) returning to the local  
 

task (415) the handle (XmitHandle) representing 
the conversation. 
Method according to claim 5 or claim 6 wherein
 
   for every conversation established between the 

transaction processing environment (510) and 
local task (415), a separate service unit (500) 

is established in the local computer (10; 400) to 
administer the conversation. 
Method according to claim 5 wherein the steps of 
sending the function name (XmitServ, XmitLib) 

identifying the remote task (430) to be run in 
the transaction processing environment (510) and 

the first data block containing data required as 
input by the remote task (430) and receiving the 

second data block at the local computer (10; 400) 
containing the output from the remote task (430) 

comprises
 
   calling a function (SRV_RPC; BusUICXmit) which 

contains a parameter pointing to a data buffer 
(Fig. 8), said data buffer (Fig. 8) containing 

the handle (XmitHandle) indicating the 
conversation to be used, the memory address 

(InputBuf) of the first data block, the memory 
address (OutputBuf) of the second data block and 

the name (XmitServ, XmitLib) of the remote task 
(430). 
Method according to claim 5 wherein the step of 
closing the conversation between the remote 

computer (10; 400) and the local computer (20; 
405) comprises  

 

calling a function (SRV_CLOSE; BusCloseUICXmit) 
which breaks the connection between the local 

computer (10; 400) and the remote computer (20; 
405); and 
cancels the handle (XmitHandle). 
Method according to any one of claims 5 to 9 in 
which 


the conversation between the local computer (10; 
400) and the remote computer (20; 405) is opened 

by a first one of the local tasks (415); and 
a second one of the local tasks (415) sends the 
remote task name (XmitServ, XmitLib) to the 

transaction processing environment (510) and a 
first data block to the remote computer (20; 405) 

from the local computer (10; 400) using the 
handle (XmitHandle) returned by the first one of 

the tasks (415). 
Method according to any one of claims 5 to 10 in 
which 


the conversation between the local computer (10; 
400) and the remote computer (20; 405) is opened 

by a first one of the local tasks (415); and 
the conversation between the local computer (10; 
400) and the remote computer (20; 405) is closed 

by a third one of the local tasks (415) using the 
handle (XmitHandle) returned by the first one of 

the tasks (415). 
</CLAIMS>
</TEXT>
</DOC>
