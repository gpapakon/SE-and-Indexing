<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE patent-document PUBLIC "-//MXW//DTD patent-document XML//EN" "http://www.ir-facility.org/dtds/patents/v1.4/patent-document.dtd">
<patent-document ucid="EP-1255207-A2" country="EP" doc-number="1255207" kind="A2" lang="EN" family-id="18981835" status="new" date-produced="20090516" date="20021106">
  <bibliographic-data>
    <publication-reference ucid="EP-1255207-A2" status="new" fvid="23584043">
      <document-id status="new" format="original">
        <country>EP</country>
        <doc-number>1255207</doc-number>
        <kind>A2</kind>
        <date>20021106</date>
      </document-id>
    </publication-reference>
    <application-reference ucid="EP-02009285-A" status="new" is-representative="NO">
      <document-id status="new" format="epo">
        <country>EP</country>
        <doc-number>02009285</doc-number>
        <kind>A</kind>
        <date>20020429</date>
      </document-id>
    </application-reference>
    <priority-claims status="new">
      <priority-claim ucid="JP-2001134085-A" status="new">
        <document-id status="new" format="epo">
          <country>JP</country>
          <doc-number>2001134085</doc-number>
          <kind>A</kind>
          <date>20010501</date>
        </document-id>
      </priority-claim>
    </priority-claims>
    <technical-data status="new">
      <classifications-ipcr>
        <classification-ipcr status="new">G06F  12/00        20060101ALI20051220RMJP        </classification-ipcr>
        <classification-ipcr status="new">G06F  12/00        20060101CLI20051220RMJP        </classification-ipcr>
        <classification-ipcr status="new">G06F  13/00        20060101ALI20051220RMJP        </classification-ipcr>
        <classification-ipcr status="new">G06F  13/00        20060101CLI20051220RMJP        </classification-ipcr>
        <classification-ipcr status="new">G06F  17/30        20060101A I20051008RMEP        </classification-ipcr>
        <classification-ipcr status="new">G06F  17/30        20060101C I20051008RMEP        </classification-ipcr>
      </classifications-ipcr>
      <classification-ecla status="new">
        <classification-symbol scheme="EC">G06F  17/30W9</classification-symbol>
      </classification-ecla>
      <invention-title load-source="ep" status="new" lang="DE">Verfahren und Vorrichtung zum automatischen Suchen von Hypertext-Strukturen</invention-title>
      <invention-title load-source="ep" status="new" lang="EN">Method and apparatus for automatically searching hypertext structure</invention-title>
      <invention-title load-source="ep" status="new" lang="FR">Méthode et appareil de recherche automatique de structures hypertextes</invention-title>
    </technical-data>
    <parties>
      <applicants>
        <applicant status="new" format="epo">
          <addressbook>
            <name>PLEX INC K</name>
            <address>
              <country>US</country>
            </address>
          </addressbook>
        </applicant>
        <applicant status="new" format="intermediate">
          <addressbook>
            <name>K-PLEX INC.</name>
          </addressbook>
        </applicant>
        <applicant status="new" format="original">
          <addressbook>
            <last-name>K-Plex Inc.</last-name>
            <address>
              <street>2890 Zanker Road, Suite 107</street>
              <city>San Jose, CA 95134</city>
              <country>US</country>
            </address>
          </addressbook>
        </applicant>
      </applicants>
      <inventors>
        <inventor status="new" format="epo">
          <addressbook>
            <name>KOTANI YOSHIHIDE</name>
            <address>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>KUSUMOTO KOJI</name>
            <address>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>OIKAWA KAZUSHIGE</name>
            <address>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>YOSHIMURA TETSUYA</name>
            <address>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>KOTANI, YOSHIHIDE</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>KUSUMOTO, KOJI</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>OIKAWA, KAZUSHIGE</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>YOSHIMURA, TETSUYA</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>KOTANI, YOSHIHIDE</last-name>
            <address>
              <street>K-Plex Inc., 2890, Zanker Road, Suite 107</street>
              <city>San Jose, CA 95134</city>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>KUSUMOTO, KOJI</last-name>
            <address>
              <street>K-Plex Inc., 2890, Zanker Road, Suite 107</street>
              <city>San Jose, CA 95134</city>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>OIKAWA, KAZUSHIGE</last-name>
            <address>
              <street>K-Plex Inc., 2890, Zanker Road, Suite 107</street>
              <city>San Jose, CA 95134</city>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>YOSHIMURA, TETSUYA</last-name>
            <address>
              <street>K-Plex Inc., 2890, Zanker Road, Suite 107</street>
              <city>San Jose, CA 95134</city>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
      </inventors>
      <agents>
        <agent status="new" format="original">
          <addressbook>
            <last-name>HOFFMANN - EITLE</last-name>
            <address>
              <street>Patent- und Rechtsanwälte Arabellastrasse 4</street>
              <city>81925 München</city>
              <country>DE</country>
            </address>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <international-convention-data>
      <designated-states>
        <ep-contracting-states>
          <country>AT</country>
          <country>BE</country>
          <country>CH</country>
          <country>CY</country>
          <country>DE</country>
          <country>DK</country>
          <country>ES</country>
          <country>FI</country>
          <country>FR</country>
          <country>GB</country>
          <country>GR</country>
          <country>IE</country>
          <country>IT</country>
          <country>LI</country>
          <country>LU</country>
          <country>MC</country>
          <country>NL</country>
          <country>PT</country>
          <country>SE</country>
          <country>TR</country>
        </ep-contracting-states>
      </designated-states>
    </international-convention-data>
  </bibliographic-data>
  <abstract load-source="ep" status="new" lang="EN">
    <p>A method and apparatus for automatically accessing a
WWW page is provided for realizing a function of
automatically jumping to a desired page to automatically
download desired data in spite of intervening pages which
require a user to enter information, and a function of
dealing with a change in configuration of an accessed page.
In a web browser, a list structure is created for each
displayed window, and all nodes under HTML displayed in a
window corresponding to the list structure are copied and
stored as node information. Further, when an event occurs
with respect to an arbitrary node within a window, an
address and event type of the node are recorded in the
stored node information corresponding to the node. The
record is comprised of a sequence of records of an event
occurrence address and event type by using URL and window
identifier as keys.
<img id="img-00000001" orientation="unknown" wi="69" img-format="tif" img-content="ad" file="00000001.tif" inline="no" he="125"/></p>
  </abstract>
  <description load-source="ep" status="new" lang="EN">
    <p num="0001">The present invention relates to a function of a web
browser, and more particularly, to an extension of a
function for accessing WWW (World Wide Web) using a web
browser.</p>
    <p num="0002">Using a web browser, the WWW can be accessed by
entering URL (Uniform Resource Locator) of desired WWW to
display a page of the WWW; clicking on a link on the
displayed page to jump to a next page linked to the
displayed page; or recording URL of a desired page using a
function called "bookmark" so as to jump directly to the
bookmarked page for display at a later time.</p>
    <p num="0003">When a user wishes to directly access a desired page,
the aforementioned bookmark function is convenient and
effective. However, when any page intervening between a
home page of certain WWW and a desired page requires the
user to enter user information (for example, a password)
before the desired page is reached, the user cannot
directly jump to the desired page even if the desired page
itself is already bookmarked.</p>
    <p num="0004">Accordingly, when the user wishes to jump to a
certain page to periodically download certain data by means
of batch processing, the user is required to repeat the
similar operation to access the page every time.</p>
    <p num="0005">Thus, there has been a need for a function of
not only automatically jumping to a desired page to
automatically download desired data even if there is an
intervening page requiring for the user to enter user
information but also, even if the configuration of the page
is changed, perceiving the change to avoid trouble, inform
the user of the change, etc.</p>
    <p num="0006">It is therefore an object of the present invention
to provide a method and apparatus for implementing a
function of recording accesses to pages by means of a web
browser, mouse manipulation on a page and manipulations on 
a keyboard for entering data; a function of managing such
records such that a user can reference the records; and a
function of invoking such records to execute reproduction
processing based on the invoked records.</p>
    <p num="0007">The method and apparatus according to the present
invention further provide a function of comparing the
configuration of the recorded page with the configuration
of the actually accessed page while reproducing records to
determine if there has been any change in the configuration
and, if it transpires that there has been a change, avoid
downloading the page or issue a warning about the change in
the configuration.</p>
    <p num="0008">A technique for recording details of manipulations
on a web browser to reproduce the records is expected to be
suitably applied to information routinely accessed by an
individual, which however is not commonly accessed by many
and unspecified persons. Since information required by a
large number of people is often placed on a top page or on
pages close to the top page, there are not many merits in
invoking recorded manipulations and reproducing them to
automatically access such a page. However, when 1) users
wish to periodically access information which changes 'daily
or with time and (2) different users desire different
contents of information, it often requires burdensome
manipulations to actually access such information.</p>
    <p num="0009">Examples of such information are the balance on
one's account, the latest stock price of some stock in
which an individual invested and so on. Although an
individual can browse WWW for such information these days,
it still involves such a procedure as entering a user
number or password if not multiple times to check the
balance on his (her) account. Likewise, in checking a
stock price, it is required to enter a name of its brand
every time.</p>
    <p num="0010">For such information, it would be really convenient
and advantageous if a user could access a desired page
instantaneously and display on the screen not only the page
but also the contents of an object to be searched in the 
page simply by applying records of his (her) manipulations
kept track of by the user. Further, if the user could
instantaneously access a desired page as mentioned above,
(s)he could avoid miscellaneous advertisements usually
appearing on web pages before (s)he actually gets to the
desired information.</p>
    <p num="0011">However, it goes without saying that the present
invention is not limited to the aforementioned type of
information or the configuration of WWW and can be applied
to a variety of information provided on the web and/or
configurations of WWW.
<sl><li>Fig. 1 is a flow chart showing the steps of
recording manipulations for accessing WWW in accordance
with the present invention;</li><li>Fig. 2 is a conceptual diagram of a user interface
displayed on a manipulation screen in accordance with the
present invention;</li><li>Fig. 3 is a diagram illustrating entry items which
may be displayed in the middle of an access;</li><li>Fig. 4 is a conceptual diagram showing a display
layout immediately after a certain page has been displayed;</li><li>Fig. 5 is a conceptual diagram showing a display
layout when logical windows have been completed on a
certain page:</li><li>Fig. 6 is a conceptual diagram showing that one list
structure is created for each window in the present
invention;</li><li>Fig. 7 is a conceptual diagram showing a list when
all nodes of HTML have been loaded;</li><li>Figs. 8A and 8B are conceptual diagrams showing how
all nodes are copied in accordance with the present
invention;</li><li>Fig. 9 is a conceptual diagram showing how a list is
deleted when an UnLoad event occurs;</li><li>Fig. 10 is a conceptual diagram showing how a list
and a node are generated when a new window is loaded;</li><li>Figs. 11A and 11B are conceptual diagram of a record 
associated with issuance of a Submit event;</li><li>Fig. 12 is a conceptual diagram of a record
associated with issuance of a Selected event;</li><li>Fig. 13 is a conceptual diagram showing a format of
records created in a recording mode of the present
invention;</li><li>Fig. 14 is a flow chart showing the steps of
reproducing manipulations for accessing WWW in accordance
with the present invention;</li><li>Fig. 15 is a diagram illustrating a warning to be
displayed in the present invention;</li><li>Fig. 16 is a flow chart showing the steps of
reproducing manipulations for accessing WWW and of dealing
with a change in page configuration in accordance with the
present invention; and</li><li>Fig. 17 is a diagram illustrating a format for a
reproduction log which is recorded in accordance with the
present invention.</li></sl></p>
    <p num="0012">Referring first to Figs. 1 through 3, an operation
for recording manipulation for accessing desired WWW to
display a desired pageand indicating information of
contents in the page that a user is especially interested
in.</p>
    <p num="0013">Fig. 1 is a flow chart showing the steps of
recording the manipulations.</p>
    <p num="0014">First, the user displays on the screen a top page
which provides information of desired WWW (step 100), by
entering. for example, a normal URL address to open the
page. In this event, three buttons "RECORD" 200, "STOP"
201 and "REPLAY" 202, and a window 203 for entering a
"RECORD NAME" are displayed as illustrated in Fig. 2 at
appropriate locations on a web browser.</p>
    <p num="0015">Next, the user depresses the "RECORD" button 200
(step 101). Once the "RECORD" button 200 has been
depressed, all manipulations such as a mouse operation for
jumping by clicking on a link, entering data through a
keyboard, etc. are all recorded (step 102) until the user 
depresses the "STOP" button 201.</p>
    <p num="0016">Details on the above-mentioned recording will be
described later.</p>
    <p num="0017">If the displayed page has an item to be entered by
the user (step 103), the user enters the item (step 104),
and manipulations involved therein are recorded. While
there could be a variety of items to be entered, such
dialog boxes in which a user name and passwords are entered
as indicated in Fig. 3 may be the most typical.</p>
    <p num="0018">If there is a character string on the current page
which a user is particularly interested in (step 105), the
user selects the character string using a mouse (step 106).</p>
    <p num="0019">Then, the user clicks a link anywhere on the page to
open another page (step 107).</p>
    <p num="0020">If a final target page is displayed (step 108), the
process goes to step 109 and, if not, returns to step 103,
from where the user continues manipulations.</p>
    <p num="0021">The user depresses the STOP button 201 (step 109).
as a result of which the recording of manipulations is
stopped, and the user names a reproduction log (recorded
contents) and saves the same under the name (step 110).
The name is entered in the "RECORD NAME" entry window 203.</p>
    <p num="0022">Thus, the recording is completed.</p>
    <p num="0023">Next, referring to Figs. 4 through 13, an embodiment
of a recording format according to the present invention
will be more specifically described, using as an example of
a web browser, Internet Explorer (Registered Trademark:
hereafter referred to as 'IE') of Microsoft Corporation.</p>
    <p num="0024">Fig. 4 generally shows frames displayed on the
browser when the user depresses the button 200 in Fig. 2 to
select a recording mode. The drawing shows an abstract
illustration of a page display layout having frame
structures.</p>
    <p num="0025">The moment a recording mode is selected, the
recording mode is started.</p>
    <p num="0026">Fig. 4 shows the state immediately after the user
has entered an URL of a top page to be recorded, or clicked
on a link on a certain page. </p>
    <p num="0027">An event labeled "BeforeNavigator" occurs when
certain URL is about to be displayed from one IE to one
HTML. When displaying a page having three frames as shown
in Fig. 4, there are actually four HTMLs including a base
page, and the event "BeforeNavigator" occurs in each of the
four HTMLs.</p>
    <p num="0028">Next, when a display of certain URL from one IE to
one HTML is completed, an event labeled "DocumentComplete"
occurs.</p>
    <p num="0029">As shown in Fig. 5, upon completion of display, the
event "DocumentComplete" occurs in each of the four HTMLs
shown in Fig. 4. When the event "DocumentComplete" occurs,
it means a window has been established. It should be noted
that this window is a logical window which is not
physically visible on the screen. Thus, when the event
occurs, it means that the associated HTML document can be
viewed and that a logical profile of a fully loaded object,
i.e., an invisible window has been established.</p>
    <p num="0030">For the sake of argument, the windows are labeled
WINDOW1, WINDOW2, WINDOW3 and WINDOW4 respectively (see
Fig. 6). The windows are numbered in the order that they
are established. When windows are simultaneously
established in a web browser, a window whose origin is
located at the most upper left on a web browser is numbered
first and a window whose origin is located at the second
most upper left on the web browser is numbered second and
so on. Then, a list structure is created window by window
at the time at which the window is established, and node
lists of all the nodes under the displayed HTMLs are
created. The nodes constitute a tree structure.</p>
    <p num="0031">When an OnLoad event indicative of completion of
loading of all the nodes in each WINDOW occurs, it means
that display of HTML to be displayed in the window has been
completed (Fig. 7). In other words, at this time. all
nodes on an HTML page loaded into a window associated with
the page are stored in each list.</p>
    <p num="0032">At the time the nodes have been created, all the
nodes are copied inside, because nodes associated with a 
displayed page are all discarded if the page is changed,
which will be more specifically described later. An
internal structure at the time of copying corresponds to a
unique address in the HTML page (Fig. 8a).</p>
    <p num="0033">Next, if a mouse event occurs on a node in the
window, an address and an event type describing a context
in which the node is reached are recorded (Fig. 8b). In
this event, only a base page as of when the recording was
started, that is, the URL of the HTML in the WINDOW1 in
this example, is recorded at the head as recording
information. A screen loaded in response to entry of this
URL is WINDOW1. Normally, screens WINDOW2, WINDOW3,
WINDOW4 are invoked from WINDOW 1. The URLs other than the
first one of WINDOW 1 are not recorded for the following
reason. Generally, a page created by a program such as CGI
(Common Gateway Interface) differs in URL every time the
program is executed. Also, it is difficult to
automatically detect variable URL returned by some program.
Therefore, in the present invention, address and event type
are managed by a window displaying the page instead of URL
information of that page. In other words, they are managed
under a window number given to each window.</p>
    <p num="0034">For example, it is assumed here that a user clicks
on a link tag in a certain paragraph within WINDOW 2. In
response, WINDOW2 and the clicked-on location within the
HTML page are recorded as relative addresses in an address
record. Then, an event type corresponding to the node is
recorded. Since a link element is clicked on in this
example, an event type called "Click" is recorded. A
format for this recording will be described later.</p>
    <p num="0035">When display of a window is changed next time, an
UnLoad event is issued once while the window is discarded.
At this time, the list corresponding to the discarded
window is also discarded once.</p>
    <p num="0036">For example, it is assumed that a page in WINDOW3 is
updated by clicking on a certain link within WINDOW2 as
described above. The moment the link is clicked on,
WINDOW3 issues an UnLoad event. In response, a portion 
corresponding to WINDOW3 is deleted from the list once
(Fig. 9).</p>
    <p num="0037">Next, as WINDOW5 is newly loaded in place of the
deleted WINDOW3, an event OnLoad is issued. In this event,
WINDOW5 is again created in the list, and nodes below
WINDOW5 are copied inside (Fig. 10).</p>
    <p num="0038">It is assumed here that a user moves a mouse onto
the newly loaded WINDOW5, and clicks, for example, on a
login button which is located in a certain paragraph within
the window displaying WINDOW5 (Fig. 11A).</p>
    <p num="0039">In response, a WINDOW identifier and the clicked-on
location within the HTML page are recorded as relative
addresses in the address record. Then, an event type
corresponding to the node is recorded. Since a form
element was clicked on in this example, event information
called "Submit" is recorded (Fig. 11B).</p>
    <p num="0040">Since <i>Submit</i> sends several pieces of information to
a target site, information entered for submission at this
stage is also recorded. Since a range to be submitted is
described in the page, its elements are also recorded in
the address format. The contents to be submitted are
parenthesized when recorded.</p>
    <p num="0041">A mouse selection operation on a page can also be
recorded as recorded contents (Fig. 12). Thereby,
ultimately desired information can be accessed not only
page by page but also character string by character string,
so that a localized portion of information can be directly
accessed. This event is recorded as <i>Selected</i>. Recording
is made in the form of an address of an element in which a
character string in question is directly held or in the
form of the lowest level element of parent elements having
a selected character string as descendant.</p>
    <p num="0042">According to the method of the present invention,
the foregoing recording operations are repeated.
Specifically, a mouse event is hooked with respect to nodes
on each HTML page. Different nodes have different events
to be hooked.</p>
    <p num="0043">Thus, a sequence of records (Fig. 13) of a node 
address within an HTML page loaded and displayed in each
WINDOW, and a mouse event type corresponding to the address
is successively created, wherein URL is used as a key for
the first sequence and a WINDOW identifier is used as a key
for infra second sequence.</p>
    <p num="0044">Lastly, the sequence is given a name, under which it
is managed such that the information can be reproduced when
necessary.</p>
    <p num="0045">Referring next to Figs. 14 through 16, description
will be made on an embodiment of a reproducing operation
for automatically accessing the same WWW site, displaying a
desired page and obtaining information of contents in which
a user is especially interested by using the reproduction
log (recording information) recorded as described above.</p>
    <p num="0046">At the time of reproduction, at least the user
interface illustrated in Fig. 2 may be displayed although
it is not limited thereto.</p>
    <p num="0047">For reproducing previously recorded contents, a user
enters a name given to the contents when they were saved
last time in the "RECORD NAME" entry window 203 for
invocation (step 1400).</p>
    <p num="0048">The user depresses the REPLAY button (step 1401).</p>
    <p num="0049">In the reproduction, recorded web pages are
sequentially accessed to issue a variety of recorded events
(step 1402).</p>
    <p num="0050">At the time of reproduction, the present invention
counts the number of siblings of all elements and the
number of siblings of a particular element with respect to
information of all recorded levels, while comparing nodes
which had been read page by page at the time of execution,
and determines, when discrepancy occurs in either of the
numbers of siblings, that the page configuration at the
time of recording differs from the page configuration at
the time of reproducing and that the page was changed
between the time of recording and the time of reproducing
(step 1403). and issues a warning as shown in Fig. 15,
together with URL detected during reproduction (step 1404).</p>
    <p num="0051">When an event is <i>Submit</i>, URL returned from the 
server after the <i>Submit</i> operation is often a dynamic page
address generated by CGI. Therefore, in some cases, URL at
the time of recording may differ from URL at the time of
reproducing. For example, a date of access is often added
behind URL, in which case an inconvenience arises if URLs
are required to exactly match.</p>
    <p num="0052">To address the problem, the present invention
employs a method of managing recording information under
numbers assigned to WINDOWs opened within the browser
rather than according to URL. Thereby, the present method
provides tolerance to dynamic URL.</p>
    <p num="0053">The foregoing processing is illustrated in Fig. 16.
For example, when a page of referenced URL is loaded after
a <i>Submit</i> event occurred (step 1600), a record managed in
WINDOW into which the page has previously been loaded can
be referenced because the record is not managed according
to URL even if this URL includes a CGI format. Then, nodes
on the loaded page are read into a memory (step 1601). and
any change in page configuration is detected (steps 1602,
1603). If no change is detected, the event is executed
(step 1604). If there is a next recorder line, the process
goes back to the step 1600. If not, the process is
terminated. If a change in page configuration is detected,
a flag indicative of detection of page update is set as
described above (step 1606) to issue a warning.</p>
    <p num="0054">Turning back to Fig. 14, when a <i>Selected</i> event
occurs (step 1405), a selected character string is
displayed in the form of a dialog (step 1406). If an
instruction is given to save the displayed contents (step
1407), the contents are saved in a file or a memory (step
1408) and the process is concluded. If no <i>Selected</i> event
occurs, a final target page is displayed (step 1409) and
the process is concluded.</p>
    <p num="0055">Lastly, a format for the reproduction log recorded
in accordance with the present invention is illustrated
below.
 
URL

WINDOW_ID DOCUMENT[1]/N1-Name[N2]/N1-Name[N2]/ N1-Name[N2]/N1-Name[N2]/···../event

WINDOW_ID DOCUMENT[1]/ ···
<sl><li>In the above list, each symbol has the following
meaning.</li><li>URL: Description of URL of an intended page. A page
on which recording is started.</li><li>WINDOW_ID: An identifier for a window generated at
the time at which a page changes.</li><li>DOCUMENT[1]: Description of a top node, i.e., a
document root.</li><li>/: Movement of dept 1. Specifically, the left side
of "/"</li></sl>
   indicates a parent node, and the right side
indicates a child node
<sl><li>N1: Indicates the position of an intended node at
the same depth.</li><li>-: A delimiter.</li><li>Name[N2]: Indicates the position in the same element
as the intended node</li><li>event: Describes a type of a mouse event such as
Click. Submit and Selected.</li><li>(): Contents to be submitted to the server are
described in the parenthesis in an address format
when a mouse event occurs on a node for <i>Submit.</i></li></sl></p>
    <p num="0056">For example, a record of a mouse operation log shown
on the left side of Fig. 17 means that an associated node
on an HTML page of a structure shown in the right side,
that is, an anchor in Fig. 17 is clicked on.</p>
    <p num="0057">It should be understood that the foregoing
description on the embodiment is a mere illustration for
implementing the present invention and the present
invention is in no way limited to this particular
embodiment. It should be obvious to those skilled in the
art that a variety of modifications can be made without
departing from the scope of the present invention. For 
example, while the foregoing embodiment has been described
using as recorded event types <i>Click, Submit,</i> and <i>Selected</i>
(selection of information by means of a mouse), the present
invention is not limited to these event types and it should
be apparent that other event types associated with a
keyboard and a mouse can be recorded without departing from
the scope of the present invention.</p>
    <p num="0058">As described above, the present invention records in
detail mouse manipulations on a web browser by a user to
allow reproduction of the recorded manipulations, thereby
providing an environment in which the user can acquire
desired information by means of batch processing.
Particularly, since <i>Selected</i> events can be recorded, it is
possible to record not only page by page but also localized
information such as a character string on a page.</p>
    <p num="0059">Thus, according to the present invention,
information that changes in real time can be repeatedly
obtained without performing the same operation over and
over again.</p>
    <p num="0060">Further, according to the present invention, if a
page configuration of a site has been changed, a user is
notified that the page cannot be accessed and recording
information is re-created by accessing a desired page again
in an interactive manner and reproducing the manipulations,
thereby dealing with a change in configuration of a page
of a site. Also, the records are not managed by URLs
including URLs generated by a program, for example URLs by
CGI but by windows on which pages are displayed at the time
of recording, thereby making it possible to correspond a
recorded page to a page at the time of reproduction to
perform reproduction processing on a read node. Thus, the
present invention provides tolerance to a large number of
dynamic pages that actually exist.</p>
  </description>
  <claims load-source="ep" status="new" lang="EN">
    <claim num="1">
      <claim-text>A method of automatically searching a hypertext
structure for use with a web browser, said method
comprising the steps of:
<claim-text><claim-text>generating a list structure for each displayed
window, copying all nodes under HTML displayed in a window
corresponding to the list structure. and storing the copied
nodes as node information;</claim-text><claim-text>when an event occurs with respect to an arbitrary
node in a window, recording an address and event type of
the node in the stored node information corresponding to
the node;</claim-text><claim-text>when an event that occurred discards certain HTML,
discarding said stored node corresponding to the HTML to be
discarded; and</claim-text><claim-text>repeating said steps to comprise said record in the
form of a sequence of records of an address and an event
type by using as keys an URL and an ID of a window in which
HTML is displayed.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="2">
      <claim-text>A method according to claim 1, wherein said event
type is a click by a mouse (Click), submit (Submit) for
entering information in a form element or selection of
information with a mouse (Selected).</claim-text>
    </claim>
    <claim num="3">
      <claim-text>A method according to claim 1, further comprising
the step of:
<claim-text><claim-text>invoking said sequence to thereby automatically
manipulate a web browser in accordance with the invoked
sequence of records to access a desired WWW page and
acquire desired information.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="4">
      <claim-text>A method according to claim 3, further comprising
the step of:
<claim-text><claim-text>when the configuration of a page in the middle of
automatic access is different from the configuration at the
time of recording, a user is notified thereof and urged to
access said page again.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="5">
      <claim-text>A method according to claim 3, further comprising
the step of:
<claim-text><claim-text>when the configuration of a page in the middle of
automatic access is different from the configuration at the
time of recording, continuing the processing using
previously recorded information.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="6">
      <claim-text>A program for executing a function of automatically
searching a hypertext structure in a web browser, by
causing a computer to go through the steps of:
<claim-text><claim-text>generating a list structure for each displayed
window, copying all nodes under HTML displayed in a window
corresponding to the list structure. and storing the copied
nodes as node information;</claim-text><claim-text>when an event occurs with respect to an arbitrary
node in a window, recording an address and event type of
the node in the stored node information corresponding to
the node;</claim-text><claim-text>when an event that occurred discards certain HTML,
discarding said stored node corresponding to the HTML to be
discarded; and</claim-text><claim-text>repeating said steps to comprise said record in the
form of a sequence of records of an address and an event
type by using as keys an URL and an ID of a window in which
HTML is displayed.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="7">
      <claim-text>An apparatus for automatically searching a hypertext
structure for use with a web browser, said apparatus
comprising:
<claim-text><claim-text>a device for generating a list structure for each
displayed window, copying all nodes under HTML displayed in
a window corresponding to the list structure, and storing
the copied nodes as node information;</claim-text><claim-text>a device for, when an event occurs with respect to
an arbitrary node in a window, recording an address and
event type of the node in the stored node information
corresponding to the node;</claim-text><claim-text>a device for, when an event that occurred discards
certain HTML, discarding said stored node corresponding to
the HTML to be discarded; and
a device for repeating said steps to comprise said record
in the form of a sequence of records of an address and an
event type by using as keys an URL and an ID of a window in
which HTML is displayed.</claim-text></claim-text></claim-text>
    </claim>
  </claims>
  <copyright>User acknowledges that the Information Retrieval Facility (IRF) and its third party providers retain all right, title and interest in and to this xml under applicable copyright laws. User acquires no ownership rights to this xml including but not limited to its format. User hereby accepts the terms and conditions of the Licence Agreement set forth at http://www.ir-facility.org/legal/marec/data_licence</copyright>
</patent-document>
