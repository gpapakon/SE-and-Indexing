<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE patent-document PUBLIC "-//MXW//DTD patent-document XML//EN" "http://www.ir-facility.org/dtds/patents/v1.4/patent-document.dtd">
<patent-document ucid="EP-1265117-A2" country="EP" doc-number="1265117" kind="A2" lang="DE" family-id="7687600" status="new" date-produced="20090516" date="20021211">
  <bibliographic-data>
    <publication-reference ucid="EP-1265117-A2" status="new" fvid="23640267">
      <document-id status="new" format="original">
        <country>EP</country>
        <doc-number>1265117</doc-number>
        <kind>A2</kind>
        <date>20021211</date>
      </document-id>
    </publication-reference>
    <application-reference ucid="EP-02011752-A" status="new" is-representative="NO">
      <document-id status="new" format="epo">
        <country>EP</country>
        <doc-number>02011752</doc-number>
        <kind>A</kind>
        <date>20020527</date>
      </document-id>
    </application-reference>
    <priority-claims status="new">
      <priority-claim ucid="DE-10127803-A" status="new">
        <document-id status="new" format="epo">
          <country>DE</country>
          <doc-number>10127803</doc-number>
          <kind>A</kind>
          <date>20010607</date>
        </document-id>
      </priority-claim>
    </priority-claims>
    <technical-data status="new">
      <classifications-ipcr>
        <classification-ipcr status="new">G05B  19/04        20060101C I20051008RMEP        </classification-ipcr>
        <classification-ipcr status="new">G05B  19/042       20060101A I20051008RMEP        </classification-ipcr>
        <classification-ipcr status="new">G05B  19/414       20060101A I20051008RMEP        </classification-ipcr>
        <classification-ipcr status="new">G05B  19/414       20060101C I20051008RMEP        </classification-ipcr>
      </classifications-ipcr>
      <classification-ecla status="new">
        <classification-symbol scheme="EC">G05B  19/414</classification-symbol>
        <classification-symbol scheme="EC">G06F   9/44G4C</classification-symbol>
      </classification-ecla>
      <invention-title load-source="ep" status="new" lang="DE">Offener Antriebsregler und Verfahren zur Softwaregewinnung für einen offenen Antriebsregler</invention-title>
      <invention-title load-source="ep" status="new" lang="EN">Open drive controller and process for generating the software of an open drive controller</invention-title>
      <invention-title load-source="ep" status="new" lang="FR">Unité de commande d'entraînement ouverte et procédé pour fabriquer des logiciels pour une telle commande</invention-title>
    </technical-data>
    <parties>
      <applicants>
        <applicant status="new" format="epo">
          <addressbook>
            <name>SIEMENS AG</name>
            <address>
              <country>DE</country>
            </address>
          </addressbook>
        </applicant>
        <applicant status="new" format="intermediate">
          <addressbook>
            <name>SIEMENS AKTIENGESELLSCHAFT</name>
          </addressbook>
        </applicant>
        <applicant status="new" format="original">
          <addressbook>
            <last-name>SIEMENS AKTIENGESELLSCHAFT</last-name>
            <address>
              <street>Wittelsbacherplatz 2</street>
              <city>80333 München</city>
              <country>DE</country>
            </address>
          </addressbook>
        </applicant>
      </applicants>
      <inventors>
        <inventor status="new" format="epo">
          <addressbook>
            <name>BOELKENS ULRICH DR</name>
            <address>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>HEINEMANN GERHARD DR</name>
            <address>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>STEINLEIN GEORG</name>
            <address>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="epo">
          <addressbook>
            <name>WAGENPFEIL ALEXANDER</name>
            <address>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>BOELKENS, ULRICH, DR.</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>HEINEMANN, GERHARD, DR.</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>STEINLEIN, GEORG</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="intermediate">
          <addressbook>
            <name>WAGENPFEIL, ALEXANDER</name>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>Bölkens, Ulrich, Dr.</last-name>
            <address>
              <street>Mittlere Kreuzgasse 13</street>
              <city>90403 Nürnberg</city>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>HEINEMANN, GERHARD, DR.</last-name>
            <address>
              <street>Leipziger Strasse 20 A</street>
              <city>91058 Erlangen</city>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>STEINLEIN, GEORG</last-name>
            <address>
              <street>Am Bärn 4</street>
              <city>95512 Neudrossenfeld</city>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
        <inventor status="new" format="original">
          <addressbook>
            <last-name>WAGENPFEIL, ALEXANDER</last-name>
            <address>
              <street>Wallweg 9 A</street>
              <city>91341 Röttenbach</city>
              <country>DE</country>
            </address>
          </addressbook>
        </inventor>
      </inventors>
    </parties>
    <international-convention-data>
      <designated-states>
        <ep-contracting-states>
          <country>AT</country>
          <country>BE</country>
          <country>CH</country>
          <country>CY</country>
          <country>DE</country>
          <country>DK</country>
          <country>ES</country>
          <country>FI</country>
          <country>FR</country>
          <country>GB</country>
          <country>GR</country>
          <country>IE</country>
          <country>IT</country>
          <country>LI</country>
          <country>LU</country>
          <country>MC</country>
          <country>NL</country>
          <country>PT</country>
          <country>SE</country>
          <country>TR</country>
        </ep-contracting-states>
      </designated-states>
    </international-convention-data>
  </bibliographic-data>
  <abstract load-source="ep" status="new" lang="DE">
    <p>Es handelt sich um einen offenen Antriebsregler und um ein
Verfahren zur Softwaregenerierung das die Möglichkeit zur
kundenspezifischen Auswahl von Funktionsobjekten bietet, die
getrennt kompiliert werden. Die kompilierten Funktionsobjekte
können in Form von Bibliotheksroutinen aufbereitet werden.
Basierend auf den instanziierten und kompilierten Funktionsobjekten
wird die Software für den Antriebsregler generiert
oder zu einem bestehenden Programmablauf online geladen. Von
besonderem Vorteil ist, dass die Funktionsobjekte von einem
Kunden selbst verändert werden können, beispielweise um eine
kundenspezifische Funktionalität zu realisieren.
<img id="img-00000001" orientation="unknown" wi="140" img-format="tif" img-content="ad" file="00000001.tif" inline="no" he="106"/></p>
  </abstract>
  <abstract load-source="docdb" source="EPO" status="new" lang="EN">
    <p>The method involves selecting functional objects, separate compilation of each functional object and generation of software for the open drive controller from the compiled functional objects. Functional objects are generated or existing functional objects of a base system are specifically modified for customers. AN Independent claim is also included for the following: a computer program product and computer-readable medium for implementing the inventive method and an open drive controller.</p>
  </abstract>
  <description load-source="ep" status="new" lang="DE">
    <p num="0001">Offener Antriebsregler und Verfahren zur Softwaregewinnung
für einen offenen Antriebsregler</p>
    <p num="0002">Die Erfindung betrifft einen offenen Antriebsregler und ein
Verfahren zur Softwaregenerierung für einen offenen Antriebsregler.
Als Antriebsregler werden z.B. Stromrichtergereäte
und deren Software für den Betrieb elektrischer bzw. hydraulischer
Aktoren (z.B. Motoren) verstanden.</p>
    <p num="0003">Aus dem Stand der Technik sind sogenannte intelligente Antriebe
zur zentralen und dezentralen Automatisierung bekannt.
Dabei übernehmen verschiedene Komponenten einer Anlage die
Aufgaben von Prozesssteuerung und -Regelung in einer hierarchischen
Struktur.</p>
    <p num="0004">Beispielsweise kann ein Servoumrichter die entsprechenden Regelungsdaten
auf direktem Weg zu einem Leitsystem melden.
Wenn sich mehrere Regler in einer Station befinden, werden
diese über einen Kommunikationsbus miteinander verbunden, der
für direkten Datenabgleich sorgt.</p>
    <p num="0005">Auch für spezielle Regel- und Steuerungsaufgaben, z.B. in der
Druck- und Wickeltechnik, kommen intelligente Antriebe zum
Einsatz. Ein intelligenter Antrieb stellt hierfür Funktionen
bereit, die mit einer Bediensoftware auf die Bedürfnisse der
Anwendung angepasst werden. Für diese anwendungsspezifischen
Anforderungen stellt der intelligente Antrieb eine Bibliothek
von verschiedenen Regelungs- und Steuerungsgliedern zur Verfügung.
Es handelt sich hierbei um übliche Bausteine der allgemeinen
Regelungs- und Automatisierungstechnik, Prozessregler,
TechnologieRegler, Überwachungs-/Diagnosealgorithmen und
Hochlaufgeber.</p>
    <p num="0006">Aus dem Stand der Technik sind die Antriebsregler SIMODRIVE
der Firma Siemens AG bekannt. Insbesondere aus der Funktionsbeschreibung 
"SIMODRIVE 611 digital, SIMUMERIK 840D/810D",
Bestell-Nr.: 6SN1197-OAA80-OAP6, Ausgabe 10.2000. Diese Regler
beinhalten Antriebsfunktionen, wie Regelung des 4-Quadranten-Stromkreises
incl. Begrenzungen für Synchron- und
Asynchronmotoren mit/ohne Drehzahl-/Positionserfassung, Drehzahlregelung,
Betriebsmeldungen / Alarmreaktionen, Diagnosefunktionen,
.</p>
    <p num="0007">Die aus dem Stand der Technik bekannten Systeme sind insofern
nachteilig, als es sich nicht um sogenannte offene Systeme
handelt. Offenheit ist eine Software-Funktion, die im Bereich
von Steuerungstechnik im Allgemeinen gegenwärtig bereits im
Einsatz ist und dem Anwender über die werkseitig vorgegebene
Basisfunktionalität hinaus eine effiziente Möglichkeit bietet,
eigene spezifische Lösungen mit in das Gesamtsystem zu
integrieren.</p>
    <p num="0008">Für den Bereich der Antriebe fehlt es jedoch an solchen offenen
Software-Funktionen. Vielmehr werden für diesen Bereich
Software-Pakete, deren Funktionalitäten werkseitig definiert
und zusammengebunden werden, angeboten. Da es sich bei diesen
Software-Systemen nicht um offene Systeme handelt, ist die
Verwaltung, Wartung und Pflege von kundenspezifischen Varianten
mit hohem Verwaltungsaufwand (Software-Erstellung, Software-Handling,
Software-Vermarktung) verbunden.</p>
    <p num="0009">Der Erfindung liegt daher die Aufgabe zu Grunde, einen verbesserten,
offenen Antriebsregler und ein verbessertes Verfahren
zur Softwaregenerierung für einen offenen Antriebsregler
zu schaffen.</p>
    <p num="0010">Die der Erfindung zu Grunde liegende Aufgabe wird mit den
Merkmalen der unabhängigen Ansprüche jeweils gelöst. Bevorzugte
Ausführungsformen der Erfindung sind in den abhängigen
Ansprüchen angegeben. </p>
    <p num="0011">Die Erfindung erlaubt die Softwaregenerierung auf der Basis
von Funktionsobjekten. Diese werden einzeln kompiliert und
können in Form von Bibliotheksroutinen aufbereitet werden.
Aus den einzeln kompilierten Funktionsobjekten bzw. aus den
Bibliotheksroutinen wird in einem weiteren Schritt die Software
für den offenen Antriebsregler generiert. Dieses Konzept
kann durchgängig auf der Zentraleinheit wie auch auf den intelligenten
Peripherie-Komponenten umgesetzt werden. Des weiteren
werden in den Funktionsobjekten Einsprungstellen für
kundenspezifische Erweiterungen angeboten.</p>
    <p num="0012">Ein besonderer Vorteil der Erfindung liegt darin, dass OEM-Kunden
die Möglichkeit zur Verfügung gestellt wird, eigene
Applikationen (Funktionen oder Diagnosen) in das Basissystem
additiv einzubinden. Dafür sind Anbindungen an die Regelungsinfrastruktur
(z.B. Parameterbeschreibungen, Meldungen, Warnungen,
Alarme, Funktionsaufrufliste, Dateifunktionen, Dokumentationserstellung,
Anbindung an die Regelungshardware)
vorgesehen.</p>
    <p num="0013">Ein weiterer besonderer Vorteil der Erfindung liegt darin,
dass bestehende Teilfunktionen des Basissystems weggelassen
werden können und / oder durch kundenspezifische ersetzt werden
können. Die Infrastruktur der weggelassenen Teilfunktionen
wird dabei nicht in die generierte Software übernommen.
Dies hat den Vorteil der Performance-Steigerung, insbesondere
im Hinblick auf die Programmlaufzeit, und die Ressourcen-Schonung,
insbesondere im Hinblick auf den erforderlichen
Speicherbedarf.</p>
    <p num="0014">Ein zusätzlicher besonderer Vorteil der Erfindung liegt in
der Möglichkeit, Funktionsobjekte online von beliebigen Quellen
(interne Speichermedien, externe Speichermedien (als Beispiele:
CD, Internet) über die bestehenden Kommunikationsbusse
laden und in den Programmablauf integrieren zu können. </p>
    <p num="0015">Ferner erlaubt es die Erfindung Echtzeit-Applikationen zu realisieren,
die von einer kundenspezifisch zuschneidbaren Bedienmöglichkeit
im Rahmen eines Inbetriebnahmetools unterstützt
werden.</p>
    <p num="0016">Die Möglichkeiten eines offenen Antriebs erlauben schnelle,
flexible und auf den Kunden zugeschnittene Lösungen und verkürzen
auch die Time-To-Market des Grundsystems durch Entlastung
des Entwicklungs-Teams von der Entwicklung kundenspezifischer
Lösungen. Auf der Basis einer validierten Grundstruktur
werden "Sonderentwicklungen" sowohl für den Anwender als
auch für den Hersteller wirtschaftlich.</p>
    <p num="0017">Ein weiterer Vorteil ist, dass die Möglichkeit der Entwicklung
von OEM-Software-Varianten durch den Kunden selbst den
Schutz und die Geheimhaltung von dessen Know How erlaubt. Ein
OEM-Kunde kann dazu entsprechende Entwicklungs-Werkzeuge,
-abläufe und -dokumente die herstellerseitig zur Verfügung
gestellt werden, benutzen, so dass er für eine eigenständige
Weiterentwicklung der Basisfunktionalität in die Lage gesetzt
ist. Vorteilhaft ist dabei die Ausrichtung der zu Grunde liegenden
Softwarearchitektur in funktionelle Einheiten mit
standardisierten Schnittstellen, die auf Basis einer Grundfunktionalität
definiert miteinander kombiniert werden können.
Bestandteil eines Funktionsobjekts bzw. einer instanziierten
Funktion, sind neben Algorithmen in - unter Umständen
- unterschiedlichen Zeitscheiben der Funktion zugeordnete
<ul list-style="bullet"><li>Parameter,</li><li>Betriebsmeldungen, Warnungen, Alarme</li><li>Initialisierungsroutinen,</li><li>Testskripten,</li><li>Inbetriebnahmemöglichkeiten.</li></ul></p>
    <p num="0018">Das Verfahren ist unabhängig von der gewählten Programmiersprachen;
vorzugsweise kann eine solche Software-Architektur
in einer C++ Umgebung realisiert sein. </p>
    <p num="0019">Im Weiteren wird eine bevorzugtes Ausführungsbeispiel der Erfindung
mit Bezugnahme auf die Zeichnung näher erläutert. Es
zeigen:
<dl compact="compact" tsize="5"><dt>FIG 1</dt><dd>ein Flussdiagramm betreffend die Generierung eines Basissystems,</dd><dt>FIG 2</dt><dd>ein Flussdiagramm betreffend die Generierung eines kundenspezifischen
Softwaresystems,</dd><dt>FIG 3</dt><dd>ein Blockdiagramm eines erfindungsgemäßen offenen Antriebsreglers,</dd><dt>FIG 4</dt><dd>ein Flussdiagramm für die Generierung der Software für
den offenen Antriebsregler der FIG 3.</dd></dl></p>
    <p num="0020">Die dem Ablauf der FIG 1 zu Grunde liegende Softwarearchitektur
ist in die Bereiche Funktionen, Alarme und Parameter aufgegliedert.
In dem Beispiel der FIG 1 beinhaltet der Bereich
Funktionen Funktionsblock 1, Funktionsblock 2 und Funktionsblock
3. Diesen sind jeweils entsprechende Alarmblöcke 1 bis
3 bzw. Parameterblöcke 1 bis 3 zugeordnet. Zur Generierung
der ausführbaren Software des Basissystems werden die entsprechenden
Funktions-, Alarm- und Parameterblöcke in dem Modul
1 zusammengeführt. Das Modul 1 generiert dann einen entsprechenden
ausführbaren Code 2 des Basissystems und Listen
3.</p>
    <p num="0021">Die FIG 2 veranschaulicht die Generierung eines kundenspezifischen
Systems basierend auf dem Basissystem der FIG 1. Neben
den Funktions-, Alarm- und Parameterblöcken des Basissystems
beinhaltet das System der FIG 2 OEM1 und OEM2 Funktions-,
Alarm- und Parameterblöcke in den entsprechenden Bereichen
der Softwarearchitektur. Der Funktionsblock 2, Alarmblock
2 und Parameterblock 2 des Basissystems wird durch eine
Benutzer-Eingabe deselektiert. In dem Modul 1 erfolgt dann
eine Zusammenführung der Funktionen Funktionsblock 1, Funktionsblock
3, OEM1 Funktionsblock und OEM2 Funktionsblock mit
den entsprechenden Alarm- und Parameterblöcken. </p>
    <p num="0022">Aus der Zusammenführung der entsprechenden Blöcke durch das
Modul 1 resultiert dann kundenspezifischer Code 4 sowie entsprechende
Listen 5.</p>
    <p num="0023">Dies hat den Vorteil, dass der Kunde selbst, je nach dessen
kundenspezifischen Anforderungen, bestimmte Teile des Basissystems
durch von dem Kunden selbst erstellte Funktions-,
Alarm- und Parameterblöcke ersetzen kann.</p>
    <p num="0024">Die FIG 3 zeigt ein Blockdiagramm eines entsprechenden Antriebsreglers.
Der Antriebsregler hat einen Objektspeicher 6
zur Speicherung eines Systemobjekts 7 und von Funktionsobjekten
8. Der offene Regler weist ferner einen Mikrocontroller 9
auf, der mit dem Objektspeicher 6 verbunden ist. Ferner verfügt
der offene Antriebsregler über eine Nutzerschnittstelle
10 zur nutzerspezifischen Instanziierung von einem oder mehrerer
der Funktionsobjekte 8. Ferner ist ein Speicher 11 zur
Speicherung von Default-Werten für das Systemobjekt 7 und die
Funktionsobjekte 8 vorhanden.</p>
    <p num="0025">Ferner hat der offene Antriebsregler einen Speicher 12 zur
Speicherung von Parametern und einen Speicher 13 zur Speicherung
von Konfigurationsdaten. Über ein Interface 14 kann der
offene Antriebsregler beispielsweise über ein Bussystem mit
einer Zentraleinheit oder mit anderen offenen Antriebsreglern
kommunizieren; ferner ist es auch möglich, über das Interface
14 eine Chip-Karte in den Regler einzuführen. Auf der Chip-Karte
können benutzerspezifische Daten betreffend die System-Konfiguration
abgelegt sein.</p>
    <p num="0026">Das Programm des offenen Antriebsreglers ist in dem Programmspeicher
15 abgelegt.</p>
    <p num="0027">Beim Start des offenen Antriebsreglers der FIG 3 wird zunächst
das Systemobjekt 7 in den Mikrocontroller 9 geladen.
Das Systemobjekt 7 nimmt dabei die Funktion eines Betriebssystems
wahr. Liegen keine kundenspezifische Daten vor, so 
werden von dem Systemobjekt 7 die Funktionsobjekte 8 des Basissystems
mit den Default-Werten des Speichers 11 instanziiert
und zu einem ablauffähigen Programm zusammengebunden,
welches in dem Programmspeicher 15 abgelegt und gestartet
wird. Vor oder während der Instanziierung der Funktionsobjekte
kann ein Nutzer über die Nutzer-Schnittstelle 10 nutzerspezifische
Daten eingeben, so dass die Instanziierung der
entsprechenden Funktionsobjekte 8 nutzerspezifisch erfolgen
kann.</p>
    <p num="0028">Ebenfalls kann der Nutzer nutzerspezifische Funktionsobjekte
8 in dem Objektspeicher 6 ablegen entsprechend den OEM1 und
dem OEM2 Funktionsblöcken der FIG 2. Entsprechende nutzerspezifische
Eingaben werden in dem Speicher 12 als Parameter
bzw. als Konfigurationsdaten in dem Speicher 13 abgelegt. Bei
einem erneuten Start des offenen Antriebsreglers wird dann
auf diese Parameter-Werte zugegriffen, um die Funktionsobjekte
8 entsprechend nutzerspezifisch zu instanziieren.</p>
    <p num="0029">Die FIG 4 zeigt eine Ausführungsform des erfindungsgemäßen
Verfahrens. In dem Schritt 40 wird zunächst das Systemobjekt
in den Mikrocontroller geladen. In dem Schritt 41 werden Beschreibungsdaten
hinsichtlich der Konfiguration des Systems
gelesen, um das Systemobjekt zu instanziieren. In dem Schritt
42 werden die Funktionsobjekte gegebenenfalls mittels nutzerspezifischer
Parameter instanziiert. Die entsprechenden Parameter
werden in dem Schritt 43 gespeichert.</p>
    <p num="0030">In dem Schritt 44 werden die instanziierten Objekte getrennt
kompiliert und aus den entsprechenden Kompilaten ein ablauffähiges
Programm generiert. Dieses Programm wird in dem
Schritt 45 gestartet.</p>
  </description>
  <claims load-source="ep" status="new" lang="DE">
    <claim num="1">
      <claim-text>Verfahren zur Softwaregenerierung für einen offenen Antriebsregler
mit folgenden Schritten:
<claim-text><claim-text>Auswahl von Funktionsobjekten,</claim-text><claim-text>separate Kompilierung jedes der Funktionsobjekte,</claim-text><claim-text>Generierung der Software für den offenen Antriebsregler aus
den kompilierten Funktionsobjekten.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="2">
      <claim-text>Verfahren zur Softwaregenerierung nach Anspruch 1, bei dem
Funktionsobjekte erstellt oder vorhandene Funktionsobjekte
eines Basis-Systems kundenspezifisch modifiziert werden.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>Verfahren zur Softwaregenerierung nach Anspruch 1, wobei
die Funktionsobjekte entweder statisch im Rahmen einer Gesamtgenerierung
oder dynamisch im Rahmen eines Nachladens in
den Programmablauf eingebunden werden.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>Verfahren zur Softwaregenerierung nach Anspruch 1, 2 oder
3, bei dem eine Parametrier-Sicht fest den Funktionsobjekten
zugeordnet wird unter Nutzung der System-Infrastruktur, wie
z.B. von Kommunikations- und/oder Inbetriebnahmetools.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>Verfahren zur Softwaregenerierung nach einem der Ansprüche
1 bis 4, bei dem eine Diagnose-Sicht fest den Funktionsobjekten
zugeordnet wird unter Nutzung der System-Infrastruktur,
wie z.B. von Kommunikations- und/oder Inbetriebnahmetools.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>Verfahren zur Softwaregenerierung nach einem der Ansprüche
1 bis 5, wobei die Auswahl von Funktionsobjekten durch ein
Systemobjekt erfolgt.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>Verfahren zur Softwaregenerierung nach einem der vorhergehenden
Ansprüche 1 bis 6, bei dem die kompilierten Funktionsobjekte
ohne erforderliche Kenntnis der benachbarten Funktionsobjekte
als Bibliotheksroutinen aufbereitet und gespeichert
werden.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>Verfahren zur Softwaregenerierung nach einem der vorhergehenden
Ansprüche 1 bis 7, bei dem die System-Konfiguration
gespeichert wird, so dass bei einer Hinzufügung oder bei
Fortfall eines Funktionsobjekts nur eine Änderung bezüglich
des betreffenden Funktionsobjekts durchgeführt wird.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>Verfahren zur Softwaregenerierung nach einem der vorhergehenden
Ansprüche 1 bis 8, bei dem für die Softwaregenerierung
erforderliche Daten, beispielsweise benutzerspezifische Daten,
Funktionsobjekte, Parameter und / oder Konfigurationsdaten
über ein Interface zur Verbindung mit einem Datenbus oder
einer Chip-Karte zur Verfügung gestellt werden.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>Computerprogrammprodukt auf einem computerlesbaren Medium,
z.B. auf einer Chipkarte, mit computerlesbaren Programmmitteln
zur Ausführung eines Verfahrens nach einem der vorhergehenden
Ansprüche 1 bis 9, wenn das Programm von der
Steuerungselektronik eines offenen Antriebsreglers ausgeführt
wird.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>Offener Antriebsregler mit einer Steuerungselektronik,
die Mittel zur Ausführung eines Softwareproduktes beinhaltet,
das gemäß der Schritte eines Verfahrens zur Softwaregenerierung
nach einem der vorhergehenden Ansprüche 1 bis 9 erstellt
wurde.</claim-text>
    </claim>
  </claims>
  <copyright>User acknowledges that the Information Retrieval Facility (IRF) and its third party providers retain all right, title and interest in and to this xml under applicable copyright laws. User acquires no ownership rights to this xml including but not limited to its format. User hereby accepts the terms and conditions of the Licence Agreement set forth at http://www.ir-facility.org/legal/marec/data_licence</copyright>
</patent-document>
